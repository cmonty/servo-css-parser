var searchIndex = {};
searchIndex["app_units"] = {"doc":"An Au is an \"App Unit\" and represents 1/60th of a CSS pixel. It was originally proposed in 2002 as a standard unit of measure in Gecko. See https://bugzilla.mozilla.org/show_bug.cgi?id=177805 for more info.","items":[[3,"Au","app_units","An App Unit, the fundamental unit of length in Servo. Usually 1/60th of a pixel (see AU_PER_PX)",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"ordering"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"au"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"au"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"new","","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",0,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"scale_by","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"scale_by_trunc","","Scale, but truncate (useful for viewport-relative units)",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_au","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_px","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"to_px","","Rounds this app unit down to the pixel towards zero and returns it.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"ceil_to_px","","Ceil this app unit to the appropriate pixel boundary and return it.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_pixel","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"to_f32_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from_f32_px","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_px","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"au"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[17,"MIN_AU","","",null,null],[17,"MAX_AU","","",null,null],[17,"AU_PER_PX","","The number of app units in a pixel.",null,null]],"paths":[[3,"Au"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",1,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["atomic_refcell"] = {"doc":"Implements a container type providing RefCell-like semantics for objects shared across threads.","items":[[3,"AtomicRefCell","atomic_refcell","A threadsafe analogue to RefCell.",null,null],[3,"AtomicRef","","A wrapper type for an immutably borrowed value from an `AtomicRefCell<T>`.",null,null],[3,"AtomicRefMut","","A wrapper type for a mutably borrowed value from an `AtomicRefCell<T>`.",null,null],[11,"new","","Creates a new `AtomicRefCell` containing `value`.",0,{"inputs":[{"name":"t"}],"output":{"name":"atomicrefcell"}}],[11,"into_inner","","Consumes the `AtomicRefCell`, returning the wrapped value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","Immutably borrows the wrapped value.",0,{"inputs":[{"name":"self"}],"output":{"name":"atomicref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",0,{"inputs":[{"name":"self"}],"output":{"name":"atomicrefmut"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"atomicrefcell"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"atomicrefcell"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"atomicrefcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"atomicrefcell"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"atomicrefcell"}],"output":{"name":"ordering"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"atomicrefcell"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies an `AtomicRef`.",1,{"inputs":[{"name":"atomicref"}],"output":{"name":"atomicref"}}],[11,"map","","Make a new `AtomicRef` for a component of the borrowed data.",1,{"inputs":[{"name":"atomicref"},{"name":"f"}],"output":{"name":"atomicref"}}],[11,"map","","Make a new `AtomicRefMut` for a component of the borrowed data, e.g. an enum variant.",2,{"inputs":[{"name":"atomicrefmut"},{"name":"f"}],"output":{"name":"atomicrefmut"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"AtomicRefCell"],[3,"AtomicRef"],[3,"AtomicRefMut"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"Bounded","bincode","A SizeLimit that restricts serialized or deserialized messages from exceeding a certain byte length.",null,null],[12,"0","","",0,null],[3,"Infinite","","A SizeLimit without a limit! Use this if you don't care about the size of encoded or decoded messages.",null,null],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[0,"internal","","A collection of serialization and deserialization functions that use the `serde` crate for the serializable and deserializable implementation.",null,null],[3,"Deserializer","bincode::internal","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",1,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",1,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",1,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",1,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",1,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",1,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",1,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",1,null],[13,"Custom","","A custom error message from Serde.",1,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Read`er.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[6,"Result","","The result of a serialization or deserialization operation.",null,null],[6,"Error","","An error that can be produced during (de)serializing.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"read_types","bincode","The types that the deserializer uses for optimizations",null,null],[3,"SliceReader","bincode::read_types","A BincodeRead implementation for byte slices",null,null],[3,"IoReader","","A BincodeRead implementation for io::Readers",null,null],[8,"BincodeRead","","A byte-oriented reading trait that is specialized for slices and generic readers.",null,null],[6,"Deserializer","bincode","A Deserializer that uses LittleEndian byteorder",null,null],[6,"Serializer","","A Serializer that uses LittleEndian byteorder",null,null],[8,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[10,"add","","Tells the SizeLimit that a certain number of bytes has been read or written.  Returns Err if the limit has been exceeded.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"limit","","Returns the hard limit (if one exists)",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bounded"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infinite"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","bincode::internal","Creates a new Serializer with the given `Write`r.",5,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"new","bincode::read_types","Constructs a slice reader",6,null],[11,"new","","Constructs an IoReadReader",7,{"inputs":[{"name":"r"}],"output":{"name":"ioreader"}}],[11,"read","","",6,null],[11,"read_exact","","",6,null],[11,"read","","",7,null],[11,"read_exact","","",7,null],[11,"forward_read_str","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"forward_read_bytes","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"forward_read_str","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"forward_read_bytes","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","bincode::internal","Creates a new Deserializer with a given `Read`er and a size_limit.",8,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"deserializer"}}]],"paths":[[3,"Bounded"],[4,"ErrorKind"],[6,"Error"],[8,"SizeLimit"],[3,"Infinite"],[3,"Serializer"],[3,"SliceReader"],[3,"IoReader"],[3,"Deserializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["coco"] = {"doc":"Concurrent collections.","items":[[0,"deque","coco","A lock-free work-stealing deque.",null,null],[3,"Worker","coco::deque","Worker side of a work-stealing deque.",null,null],[3,"Stealer","","Stealer side of a work-stealing deque.",null,null],[5,"new","","Returns a new work-stealing deque.",null,null],[11,"len","","Returns the number of elements in the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element onto the bottom of the deque.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"epoch","coco","Epoch-based garbage collection.",null,null],[3,"Atomic","coco::epoch","A tagged atomic nullable pointer.",null,null],[3,"Ptr","","A tagged nullable pointer.",null,null],[3,"Garbage","","A garbage queue.",null,null],[3,"Pin","","A witness that the current thread is pinned.",null,null],[5,"defer_free","","Stashes away an object that will later be freed.",null,null],[5,"flush","","Flushes the buffered thread-local garbage.",null,{"inputs":[{"name":"pin"}],"output":null}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new, null atomic pointer tagged with `tag`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","Allocates `data` on the heap and returns a new atomic pointer that points to it and is tagged with `tag`.",2,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_ptr","","Returns a new atomic pointer initialized with `ptr`.",2,{"inputs":[{"name":"ptr"}],"output":{"name":"self"}}],[11,"from_box","","Returns a new atomic pointer initialized with `b` and `tag`.",2,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Returns a new atomic pointer initialized with `raw` and `tag`.",2,null],[11,"load","","Loads the tagged atomic pointer.",2,{"inputs":[{"name":"self"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"load_raw","","Loads the tagged atomic pointer as a raw pointer and a tag.",2,null],[11,"store","","Stores `new` tagged with `tag` into the atomic.",2,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":null}],[11,"store_box","","Stores `new` tagged with `tag` into the atomic and returns it.",2,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"store_raw","","Stores `new` tagged with `tag` into the atomic.",2,null],[11,"swap","","Stores `new` into the atomic, returning the old tagged pointer.",2,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ptr"}}],[11,"swap_box","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",2,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"swap_raw","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",2,null],[11,"cas","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"name":"result"}}],[11,"cas_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"name":"result"}}],[11,"cas_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"name":"result"}}],[11,"cas_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"name":"result"}}],[11,"cas_box","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cas_box_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cas_box_weak","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cas_box_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cas_raw","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,null],[11,"cas_raw_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a null pointer with a tag.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Constructs a tagged pointer from a raw pointer and tag.",3,null],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_raw","","Converts the pointer to a raw pointer.",3,null],[11,"unwrap","","Returns a reference to the pointing object.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"tag","","Returns the tag.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Constructs a new tagged pointer with a different tag.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Returns a new, empty garbage queue.",4,{"inputs":[],"output":{"name":"self"}}],[11,"defer_free","","Adds an object that will later be freed.",4,null],[11,"defer_drop","","Adds an object that will later be dropped and freed.",4,null],[11,"defer_destroy","","Adds an object that will later be destroyed using `destroy`.",4,null],[11,"flush","","Flushes the buffered garbage.",4,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"collect","","Collects some garbage from the queue and destroys it.",4,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stack","coco","A lock-free stack.",null,null],[3,"Stack","coco::stack","A lock-free stack.",null,null],[11,"new","","Returns a new, empty stack.",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` if the stack is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Pushes a new value onto the stack.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attemps to pop an value from the stack.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Worker"],[3,"Stealer"],[3,"Atomic"],[3,"Ptr"],[3,"Garbage"],[3,"Pin"],[3,"Stack"]]};
searchIndex["cssparser"] = {"doc":"Implementation of CSS Syntax Module Level 3 for Rust.","items":[[3,"SourcePosition","cssparser","A position from the start of the input, counted in UTF-8 bytes.",null,null],[3,"SourceLocation","","The line and column number for a given position within the input.",null,null],[12,"line","","The line number, starting at 0 for the first line, unless `with_first_line_number` was used.",0,null],[12,"column","","The column number within a line, starting at 1 for first the character of the line. Column numbers are counted in UTF-16 code units.",0,null],[3,"DeclarationListParser","","Provides an iterator for declaration list parsing.",null,null],[12,"input","","The input given to `DeclarationListParser::new`",1,null],[12,"parser","","The parser given to `DeclarationListParser::new`",1,null],[3,"RuleListParser","","Provides an iterator for rule list parsing.",null,null],[12,"input","","The input given to `RuleListParser::new`",2,null],[12,"parser","","The parser given to `RuleListParser::new`",2,null],[3,"PreciseParseError","","A parse error with details of where it occured",null,null],[12,"error","","Error details",3,null],[12,"slice","","The relevant slice of the input.",3,null],[12,"location","","The line number and column number of the start of the relevant input slice.",3,null],[3,"RGBA","","A color with red, green, blue, and alpha components, in a byte each.",null,null],[12,"red","","The red component.",4,null],[12,"green","","The green component.",4,null],[12,"blue","","The blue component.",4,null],[12,"alpha","","The alpha component.",4,null],[3,"CssStringWriter","","A `fmt::Write` adapter that escapes text for writing as a double-quoted CSS string. Quotes are not included.",null,null],[3,"TokenSerializationType","","A category of token. See the `needs_separator_when_before` method.",null,null],[3,"Parser","","A CSS parser that borrows its `&str` input, yields `Token`s, and keeps track of nested blocks and functions.",null,null],[3,"Delimiters","","A set of characters, to be used with the `Parser::parse_until*` methods.",null,null],[3,"ParserState","","A capture of the internal state of a `Parser` (including the position within the input), obtained from the `Parser::position` method.",null,null],[3,"ParserInput","","The owned input for a parser.",null,null],[3,"UnicodeRange","","One contiguous range of code points.",null,null],[12,"start","","Inclusive start of the range. In [0, end].",5,null],[12,"end","","Inclusive end of the range. In [0, 0x10FFFF].",5,null],[3,"CowRcStr","","A string that is either shared (heap-allocated and reference-counted) or borrowed.",null,null],[4,"Token","","One of the pieces the CSS input is broken into.",null,null],[13,"Ident","","A `<ident-token>`",6,null],[13,"AtKeyword","","A `<at-keyword-token>`",6,null],[13,"Hash","","A `<hash-token>` with the type flag set to \"unrestricted\"",6,null],[13,"IDHash","","A `<hash-token>` with the type flag set to \"id\"",6,null],[13,"QuotedString","","A `<string-token>`",6,null],[13,"UnquotedUrl","","A `<url-token>`",6,null],[13,"Delim","","A `<delim-token>`",6,null],[13,"Number","","A `<number-token>`",6,null],[12,"has_sign","cssparser::Token","Whether the number had a `+` or `-` sign.",6,null],[12,"value","","The value as a float",6,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",6,null],[13,"Percentage","cssparser","A `<percentage-token>`",6,null],[12,"has_sign","cssparser::Token","Whether the number had a `+` or `-` sign.",6,null],[12,"unit_value","","The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.",6,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer. It is not divided by 100.",6,null],[13,"Dimension","cssparser","A `<dimension-token>`",6,null],[12,"has_sign","cssparser::Token","Whether the number had a `+` or `-` sign.",6,null],[12,"value","","The value as a float",6,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",6,null],[12,"unit","","The unit, e.g. \"px\" in `12px`",6,null],[13,"WhiteSpace","cssparser","A `<whitespace-token>`",6,null],[13,"Comment","","A comment.",6,null],[13,"Colon","","A `:` `<colon-token>`",6,null],[13,"Semicolon","","A `;` `<semicolon-token>`",6,null],[13,"Comma","","A `,` `<comma-token>`",6,null],[13,"IncludeMatch","","A `~=` `<include-match-token>`",6,null],[13,"DashMatch","","A `|=` `<dash-match-token>`",6,null],[13,"PrefixMatch","","A `^=` `<prefix-match-token>`",6,null],[13,"SuffixMatch","","A `$=` `<suffix-match-token>`",6,null],[13,"SubstringMatch","","A `*=` `<substring-match-token>`",6,null],[13,"Column","","A `||` `<column-token>`",6,null],[13,"CDO","","A `<!--` `<CDO-token>`",6,null],[13,"CDC","","A `-->` `<CDC-token>`",6,null],[13,"Function","","A `<function-token>`",6,null],[13,"ParenthesisBlock","","A `<(-token>`",6,null],[13,"SquareBracketBlock","","A `<[-token>`",6,null],[13,"CurlyBracketBlock","","A `<{-token>`",6,null],[13,"BadUrl","","A `<bad-url-token>`",6,null],[13,"BadString","","A `<bad-string-token>`",6,null],[13,"CloseParenthesis","","A `<)-token>`",6,null],[13,"CloseSquareBracket","","A `<]-token>`",6,null],[13,"CloseCurlyBracket","","A `<}-token>`",6,null],[4,"AtRuleType","","The return value for `AtRuleParser::parse_prelude`. Indicates whether the at-rule is expected to have a `{ /* ... */ }` block or end with a `;` semicolon.",null,null],[13,"WithoutBlock","","The at-rule is expected to end with a `;` semicolon. Example: `@import`.",7,null],[13,"WithBlock","","The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`",7,null],[4,"Color","","A  value.",null,null],[13,"CurrentColor","","The 'currentcolor' keyword",8,null],[13,"RGBA","","Everything else gets converted to RGBA during parsing",8,null],[4,"ParseError","","Extensible parse errors that can be encountered by client parsing implementations.",null,null],[13,"Basic","","A fundamental parse error from a built-in parsing routine.",9,null],[13,"Custom","","A parse error reported by downstream consumer code.",9,null],[4,"BasicParseError","","The funamental parsing errors that can be triggered by built-in parsing routines.",null,null],[13,"UnexpectedToken","","An unexpected token was encountered.",10,null],[13,"EndOfInput","","The end of the input was encountered unexpectedly.",10,null],[13,"AtRuleInvalid","","An `@` rule was encountered that was invalid.",10,null],[13,"AtRuleBodyInvalid","","The body of an '@' rule was invalid.",10,null],[13,"QualifiedRuleInvalid","","A qualified rule was encountered that was invalid.",10,null],[5,"parse_important","","Parse `!important`.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_one_declaration","","Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude.",null,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[5,"parse_one_rule","","Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`.",null,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[5,"stylesheet_encoding","","Determine the character encoding of a CSS stylesheet.",null,null],[5,"parse_color_keyword","","Return the named color with the given name.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_nth","","Parse the An+B notation, as found in the `:nth-child()` selector. The input is typically the arguments of a function, in which case the caller needs to check if the arguments’ parser is exhausted. Return `Ok((A, B))`, or `Err(())` for a syntax error.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"serialize_identifier","","Write a CSS identifier, escaping characters as necessary.",null,{"inputs":[{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[5,"serialize_string","","Write a double-quoted CSS string token, escaping content as necessary.",null,{"inputs":[{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[0,"Delimiter","","`Delimiters` constants.",null,null],[17,"None","cssparser::Delimiter","The empty delimiter set",null,null],[17,"CurlyBracketBlock","","The delimiter set with only the `{` opening curly bracket",null,null],[17,"Semicolon","","The delimiter set with only the `;` semicolon",null,null],[17,"Bang","","The delimiter set with only the `!` exclamation point",null,null],[17,"Comma","","The delimiter set with only the `,` comma",null,null],[11,"new","cssparser","Create a new `DeclarationListParser` for the given `input` and `parser`.",1,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_for_stylesheet","","Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet and the given `parser`.",2,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"self"}}],[11,"new_for_nested_rule","","Same is `new_for_stylesheet`, but should be used for rule lists inside a block such as the body of an `@media` rule.",2,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_parse_error","","Return whether this token represents a parse error.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"ordering"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sourcelocation"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"parserstate"}}],[11,"position","","The position from the start of the input, counted in UTF-8 bytes.",12,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"source_location","","The line number and column number",12,{"inputs":[{"name":"self"}],"output":{"name":"sourcelocation"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"basicparseerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"basicparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"basicparseerror"}],"output":{"name":"bool"}}],[11,"from","","",9,{"inputs":[{"name":"basicparseerror"}],"output":{"name":"parseerror"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"basic","","Extract the fundamental parse error from an extensible error.",9,{"inputs":[{"name":"self"}],"output":{"name":"basicparseerror"}}],[11,"new","","Create a new input for a parser.",13,{"inputs":[{"name":"str"}],"output":{"name":"parserinput"}}],[11,"new_with_line_number_offset","","Create a new input for a parser.  Line numbers in locations are offset by the given value.",13,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"parserinput"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"delimiters"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"delimiters"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"delimiters"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"delimiters"}],"output":{"name":"delimiters"}}],[11,"new","","Create a new parser",15,{"inputs":[{"name":"parserinput"}],"output":{"name":"parser"}}],[11,"current_line","","Return the current line that is being parsed.",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expect_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token. Return a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"position","","Return the current position within the input.",15,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"current_source_location","","The current line number and column number.",15,{"inputs":[{"name":"self"}],"output":{"name":"sourcelocation"}}],[11,"current_source_map_url","","The source map URL, if known.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_source_url","","The source URL, if known.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"state","","Return the current internal state of the parser (including position within the input).",15,{"inputs":[{"name":"self"}],"output":{"name":"parserstate"}}],[11,"skip_whitespace","","Advance the input until the next token that’s not whitespace or a comment.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Restore the internal state of the parser (including position within the input) to what was previously saved by the `Parser::position` method.",15,{"inputs":[{"name":"self"},{"name":"parserstate"}],"output":null}],[11,"look_for_var_functions","","Start looking for `var()` functions. (See the `.seen_var_functions()` method.)",15,{"inputs":[{"name":"self"}],"output":null}],[11,"seen_var_functions","","Return whether a `var()` function has been seen by the tokenizer since either `look_for_var_functions` was called, and stop looking.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try","","Execute the given closure, passing it the parser. If the result (returned unchanged) is `Err`, the internal state of the parser  (including position within the input) is restored to what it was before the call.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"slice","","Return a slice of the CSS input",15,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"slice_from","","Return a slice of the CSS input, from the given position to the current one.",15,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"str"}}],[11,"next","","Return the next token in the input that is neither whitespace or a comment, and advance the position accordingly.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_including_whitespace","","Same as `Parser::next`, but does not skip whitespace tokens.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_including_whitespace_and_comments","","Same as `Parser::next`, but does not skip whitespace or comment tokens.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse_entirely","","Have the given closure parse something, then check the the input is exhausted. The result is overridden to `Err(())` if some input remains.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_comma_separated","","Parse a list of comma-separated values, all with the same syntax.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_nested_block","","Parse the content of a block or function.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_before","","Limit parsing to until a given delimiter or the end of the input. (E.g. a semicolon for a property value.)",15,{"inputs":[{"name":"self"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_after","","Like `parse_until_before`, but also consume the delimiter token.",15,{"inputs":[{"name":"self"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"expect_whitespace","","Parse a <whitespace-token> and return its value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident","","Parse a <ident-token> and return the unescaped value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_cloned","","expect_ident, but clone the CowRcStr",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_matching","","Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_string","","Parse a <string-token> and return the unescaped value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_string_cloned","","expect_string, but clone the CowRcStr",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_or_string","","Parse either a <ident-token> or a <string-token>, and return the unescaped value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_url","","Parse a <url-token> and return the unescaped value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_url_or_string","","Parse either a <url-token> or a <string-token>, and return the unescaped value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_number","","Parse a <number-token> and return the integer value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_integer","","Parse a <number-token> that does not have a fractional part, and return the integer value.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_percentage","","Parse a <percentage-token> and return the value. `0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_colon","","Parse a `:` <colon-token>.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_semicolon","","Parse a `;` <semicolon-token>.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_comma","","Parse a `,` <comma-token>.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_delim","","Parse a <delim-token> with the given value.",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"expect_curly_bracket_block","","Parse a `{ /* ... */ }` curly brackets block.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_square_bracket_block","","Parse a `[ /* ... */ ]` square brackets block.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_parenthesis_block","","Parse a `( /* ... */ )` parenthesis block.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_function","","Parse a  token and return its name.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_function_matching","","Parse a  token whose name is an ASCII-insensitive match for the given value.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_no_error_token","","Parse the input until exhaustion and check that it contains no “error” token.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_floats","","Constructs a new RGBA value from float components. It expects the red, green, blue and alpha channels in that order, and all values will be clamped to the 0.0 ... 1.0 range.",4,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"transparent","","Returns a transparent color.",4,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Same thing, but with `u8` values instead of floats in the 0 to 1 range.",4,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"red_f32","","Returns the red channel in a floating point number form, from 0 to 1.",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"green_f32","","Returns the green channel in a floating point number form, from 0 to 1.",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"blue_f32","","Returns the blue channel in a floating point number form, from 0 to 1.",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"alpha_f32","","Returns the alpha channel in a floating point number form, from 0 to 1.",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Parse a  value, per CSS Color Module Level 3.",8,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_hash","","Parse a color hash, without the leading '#' character.",8,null],[11,"to_css","","",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Wrap a text writer to create a `CssStringWriter`.",16,{"inputs":[{"name":"w"}],"output":{"name":"cssstringwriter"}}],[11,"write_str","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tokenserializationtype"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"tokenserializationtype"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"tokenserializationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nothing","","Return a value that represents the absence of a token, e.g. before the start of the input.",17,{"inputs":[],"output":{"name":"tokenserializationtype"}}],[11,"set_if_nothing","","If this value is `TokenSerializationType::nothing()`, set it to the given value instead.",17,{"inputs":[{"name":"self"},{"name":"tokenserializationtype"}],"output":null}],[11,"needs_separator_when_before","","Return true if, when a token of category `self` is serialized just before a token of category `other` with no whitespace in between, an empty comment `/**/` needs to be inserted between them so that they are not re-parsed as a single token.",17,{"inputs":[{"name":"self"},{"name":"tokenserializationtype"}],"output":{"name":"bool"}}],[11,"serialization_type","","Categorize a token into a type that determines when `/**/` needs to be inserted between two tokens when serialized next to each other without whitespace in between.",6,{"inputs":[{"name":"self"}],"output":{"name":"tokenserializationtype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"unicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"unicoderange"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"unicoderange"}}],[11,"hash","","",5,null],[11,"parse","","https://drafts.csswg.org/css-syntax/#urange-syntax",5,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",18,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",18,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"DeclarationParser","","A trait to provide various parsing of declaration values.",null,null],[16,"Declaration","","The finished representation of a declaration.",19,null],[16,"Error","","The error type that is included in the ParseError value that can be returned.",19,null],[10,"parse_value","","Parse the value of a declaration with the given `name`.",19,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"parser"}],"output":{"name":"result"}}],[8,"QualifiedRuleParser","","A trait to provide various parsing of qualified rules.",null,null],[16,"Prelude","","The intermediate representation of a qualified rule prelude.",20,null],[16,"QualifiedRule","","The finished representation of a qualified rule.",20,null],[16,"Error","","The error type that is included in the ParseError value that can be returned.",20,null],[11,"parse_prelude","","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",20,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",20,null],[8,"AtRuleParser","","A trait to provide various parsing of at-rules.",null,null],[16,"PreludeNoBlock","","The intermediate representation of prelude of an at-rule without block;",21,null],[16,"PreludeBlock","","The intermediate representation of prelude of an at-rule with block;",21,null],[16,"AtRule","","The finished representation of an at-rule.",21,null],[16,"Error","","The error type that is included in the ParseError value that can be returned.",21,null],[11,"parse_prelude","","Parse the prelude of an at-rule with the given `name`.",21,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"parser"}],"output":{"name":"result"}}],[11,"rule_without_block","","End an at-rule which doesn't have block. Return the finished representation of the at-rule.",21,null],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",21,null],[8,"EncodingSupport","","Abstraction for avoiding a dependency from cssparser to an encoding library",null,null],[16,"Encoding","","One character encoding",22,null],[10,"from_label","","https://encoding.spec.whatwg.org/#concept-encoding-get",22,null],[10,"utf8","","Return the UTF-8 encoding",22,null],[10,"is_utf16_be_or_le","","Whether the given encoding is UTF-16BE or UTF-16LE",22,null],[8,"ToCss","","Trait for things the can serialize themselves in CSS syntax.",null,null],[10,"to_css","","Serialize `self` in CSS syntax, writing to `dest`.",23,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[14,"match_ignore_ascii_case","","Expands to a `match` expression with string patterns, matching case-insensitively in the ASCII range.",null,null],[14,"ascii_case_insensitive_phf_map","","Define a function `$name(&str) -> Option<&'static $ValueType>`",null,null],[11,"parse_prelude","","Parse the prelude of an at-rule with the given `name`.",21,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"parser"}],"output":{"name":"result"}}],[11,"rule_without_block","","End an at-rule which doesn't have block. Return the finished representation of the at-rule.",21,null],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",21,null],[11,"parse_prelude","","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",20,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",20,null],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"SourceLocation"],[3,"DeclarationListParser"],[3,"RuleListParser"],[3,"PreciseParseError"],[3,"RGBA"],[3,"UnicodeRange"],[4,"Token"],[4,"AtRuleType"],[4,"Color"],[4,"ParseError"],[4,"BasicParseError"],[3,"SourcePosition"],[3,"ParserState"],[3,"ParserInput"],[3,"Delimiters"],[3,"Parser"],[3,"CssStringWriter"],[3,"TokenSerializationType"],[3,"CowRcStr"],[8,"DeclarationParser"],[8,"QualifiedRuleParser"],[8,"AtRuleParser"],[8,"EncodingSupport"],[8,"ToCss"]]};
searchIndex["cssparser_macros"] = {"doc":"","items":[[5,"cssparser_internal__assert_ascii_lowercase__max_len","cssparser_macros","Input: the arms of a `match` expression.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"cssparser_internal__max_len","","Input: string literals with no separator",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"cssparser_internal__phf_map","","Input: parsed as token trees. The first TT is a type. (Can be wrapped in parens.) following TTs are grouped in pairs, each pair being a key as a string literal and the corresponding value as a const expression.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["darling"] = {"doc":"Darling Darling is a tool for declarative attribute parsing in proc macro implementations.","items":[[8,"FromMetaItem","darling","Create an instance from an item in an attribute declaration. ",null,null],[11,"from_nested_meta_item","","",0,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"from_meta_item","","Create an instance from a `syn::MetaItem` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",0,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",0,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",0,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",0,{"inputs":[{"name":"lit"}],"output":{"name":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",0,{"inputs":[{"name":"char"}],"output":{"name":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",0,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}],[8,"FromDeriveInput","","Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.",null,null],[10,"from_derive_input","","Create an instance from `syn::DeriveInput`, or return an error.",1,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[8,"FromField","","Creates an instance by parsing an individual field and its attributes.",null,null],[10,"from_field","","",2,{"inputs":[{"name":"field"}],"output":{"name":"result"}}],[8,"FromVariant","","Creates an instance from a specified `syn::Variant`.",null,null],[10,"from_variant","","Create an instance from `syn::Variant`, or return an error.",3,{"inputs":[{"name":"variant"}],"output":{"name":"result"}}],[6,"Result","","An alias of `Result` specific to attribute parsing.",null,null],[3,"Error","","An error encountered during attribute parsing.",null,null],[0,"ast","","Utility types for working with the AST.",null,null],[4,"Body","darling::ast","A struct or enum body. ",null,null],[13,"Enum","","",4,null],[13,"Struct","","",4,null],[3,"VariantData","","",null,null],[12,"style","","",5,null],[12,"fields","","",5,null],[4,"Style","","",null,null],[13,"Tuple","","",6,null],[13,"Struct","","",6,null],[13,"Unit","","",6,null],[0,"error","darling","Types for working with darling errors and results.",null,null],[6,"Result","darling::error","An alias of `Result` specific to attribute parsing.",null,null],[3,"Error","","An error encountered during attribute parsing.",null,null],[3,"IntoIter","","An iterator that moves out of an `Error`.",null,null],[0,"util","darling","Utility types for attribute parsing.",null,null],[3,"Flag","darling::util","Marker type equivalent to `Option<()>` for use in attribute parsing.",null,null],[3,"Ignored","","An efficient way of discarding data from an attribute.",null,null],[4,"Override","","A value which can inherit a default value or have an explicit value specified.",null,null],[13,"Inherit","","Inherit the eventual value from an external source.",7,null],[13,"Explicit","","Explicitly set the value.",7,null],[3,"IdentList","","A list of `syn::Ident` instances. This type is used to extract a list of words from an  attribute.",null,null],[11,"deref","","",8,null],[11,"deref","","",9,null],[11,"into_iter","darling::error","",10,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","darling::util","",7,{"inputs":[],"output":{"name":"override"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"identlist"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"flag"}}],[11,"from_variant","","",11,{"inputs":[{"name":"variant"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","darling::ast","",6,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"eq","darling::util","",7,{"inputs":[{"name":"self"},{"name":"override"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"override"}],"output":{"name":"bool"}}],[11,"eq","darling::ast","",5,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"eq","darling::util","",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"ignored"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"identlist"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"identlist"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","darling::error","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","darling::util","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","darling::error","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not","darling::util","",9,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"description","darling::error","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor","darling::util","",9,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"from","darling::ast","",6,{"inputs":[{"name":"variantdata"}],"output":{"name":"style"}}],[11,"from","darling::util","",8,{"inputs":[{"name":"vec"}],"output":{"name":"identlist"}}],[11,"from","darling::ast","",5,null],[11,"from","darling::util","",9,{"inputs":[{"name":"option"}],"output":{"name":"flag"}}],[11,"from","darling::ast","",5,{"inputs":[{"name":"style"}],"output":{"name":"variantdata"}}],[11,"from","darling::util","",9,{"inputs":[{"name":"bool"}],"output":{"name":"flag"}}],[11,"from","","",7,{"inputs":[{"name":"option"}],"output":{"name":"override"}}],[11,"from","darling::ast","",6,{"inputs":[{"name":"variantdata"}],"output":{"name":"style"}}],[11,"from_derive_input","darling::util","",11,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"bitand","","",9,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","darling::ast","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","darling::error","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","darling::util","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","darling::ast","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_word","darling::util","",7,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","",7,null],[11,"from_value","","",7,{"inputs":[{"name":"lit"}],"output":{"name":"result"}}],[11,"from_meta_item","","",9,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_list","","",8,null],[11,"from_meta_item","","",11,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_nested_meta_item","","",11,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"from_field","","",11,{"inputs":[{"name":"field"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","darling::ast","",5,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"clone","darling::util","",9,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"clone","darling::ast","",4,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"clone","darling::util","",11,{"inputs":[{"name":"self"}],"output":{"name":"ignored"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"identlist"}}],[11,"custom","darling::error","Creates a new error with a custom message.",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"duplicate_field","","Creates a new error for a field that appears twice in the input.",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","Creates a new error for a non-optional field that does not appear in the input.",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","Creates a new error for a field name that appears in the input but does not correspond to a known field.",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unsupported_format","","",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unexpected_type","","Creates a new error for a field which has an unexpected literal type.",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_value","","Creates a new error for a value which doesn't match a set of expected literals.",10,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"too_few_items","","Creates a new error for a list which did not get enough items to proceed.",10,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"too_many_items","","Creates a new error when a list got more items than it supports. The `max` argument  is the largest number of items the receiver could accept.",10,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"multiple","","Bundle a set of multiple errors into a single `Error` instance.",10,{"inputs":[{"name":"vec"}],"output":{"name":"error"}}],[11,"flatten","","Recursively converts a tree of errors to a flattened list.",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"at","","Adds a location to the error, such as a field or variant.  Locations must be added in reverse order of specificity.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"error"}}],[11,"len","","Gets the number of individual errors in this error.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"empty_from","darling::ast","Creates an empty body of the same shape as the passed-in body.",4,{"inputs":[{"name":"body"}],"output":{"name":"body"}}],[11,"as_ref","","Creates a new `Body<&'a V, &'a F>` instance from `Body<V, F>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"map_enum_variants","","Applies a function `V -> U` on enum variants, if this is an enum.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"map_struct_fields","","Applies a function `F -> U` on struct fields, if this is a struct.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"map_struct","","Applies a function to the `VariantData` if this is a struct.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"take_struct","","Consumes the `Body`, returning `VariantData<F>` if it was a struct.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take_enum","","Consumes the `Body`, returning `Vec<V>` if it was an enum.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_enum","","Returns `true` if this instance is `Body::Enum`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","Returns `true` if this instance is `Body::Struct`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_from","","Attempt to convert from a `syn::Body` instance.",4,{"inputs":[{"name":"body"}],"output":{"name":"result"}}],[11,"empty_from","","",5,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"split","","Splits the `VariantData` into its style and fields for further processing. Returns an empty `Vec` for `Unit` data.",5,null],[11,"is_newtype","","Returns true if this variant's data makes it a newtype.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"map","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"variantdata"}}],[11,"try_from","","",5,{"inputs":[{"name":"variantdata"}],"output":{"name":"result"}}],[11,"is_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"present","darling::util","Creates a new `Flag` which corresponds to the presence of a value.",9,{"inputs":[],"output":{"name":"flag"}}],[11,"as_ref","","Converts from `Override<T>` to `Override<&T>`.",7,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"as_mut","","Converts from `Override<T>` to `Override<&mut T>`.",7,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"is_explicit","","Returns `true` if the override is an `Explicit` value.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"explicit","","Converts from `Override<T>` to `Option<T>`.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it returns `optb`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it calls `op`.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap_or_default","","Returns the contained value or the default value of `T`.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Create a new list.",8,{"inputs":[{"name":"vec"}],"output":{"name":"identlist"}}],[11,"as_strs","","Creates a view of the contained identifiers as `&str`s.",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[8,"FromMetaItem"],[8,"FromDeriveInput"],[8,"FromField"],[8,"FromVariant"],[4,"Body"],[3,"VariantData"],[4,"Style"],[4,"Override"],[3,"IdentList"],[3,"Flag"],[3,"Error"],[3,"Ignored"],[3,"IntoIter"]]};
searchIndex["darling_core"] = {"doc":"","items":[[0,"ast","darling_core","Utility types for working with the AST.",null,null],[3,"VariantData","darling_core::ast","",null,null],[12,"style","","",0,null],[12,"fields","","",0,null],[4,"Body","","A struct or enum body. ",null,null],[13,"Enum","","",1,null],[13,"Struct","","",1,null],[4,"Style","","",null,null],[13,"Tuple","","",2,null],[13,"Struct","","",2,null],[13,"Unit","","",2,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"empty_from","","Creates an empty body of the same shape as the passed-in body.",1,{"inputs":[{"name":"body"}],"output":{"name":"self"}}],[11,"as_ref","","Creates a new `Body<&'a V, &'a F>` instance from `Body<V, F>`.",1,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"map_enum_variants","","Applies a function `V -> U` on enum variants, if this is an enum.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"map_struct_fields","","Applies a function `F -> U` on struct fields, if this is a struct.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"map_struct","","Applies a function to the `VariantData` if this is a struct.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"body"}}],[11,"take_struct","","Consumes the `Body`, returning `VariantData<F>` if it was a struct.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take_enum","","Consumes the `Body`, returning `Vec<V>` if it was an enum.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_enum","","Returns `true` if this instance is `Body::Enum`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","Returns `true` if this instance is `Body::Struct`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_from","","Attempt to convert from a `syn::Body` instance.",1,{"inputs":[{"name":"body"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"empty_from","","",0,{"inputs":[{"name":"variantdata"}],"output":{"name":"self"}}],[11,"split","","Splits the `VariantData` into its style and fields for further processing. Returns an empty `Vec` for `Unit` data.",0,null],[11,"is_newtype","","Returns true if this variant's data makes it a newtype.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"variantdata"}}],[11,"try_from","","",0,{"inputs":[{"name":"variantdata"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"style"}],"output":{"name":"self"}}],[11,"from","","",0,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"is_unit","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",2,{"inputs":[{"name":"variantdata"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"variantdata"}],"output":{"name":"self"}}],[0,"codegen","darling_core","",null,null],[3,"Field","darling_core::codegen","Properties needed to generate code for a field in all the contexts where one may appear.",null,null],[12,"name_in_attr","","The name presented to the user of the library. This will appear in error messages and will be looked when parsing names.",3,null],[12,"ident","","The name presented to the author of the library. This will appear in the setters or temporary variables which contain the values.",3,null],[12,"ty","","The type of the field in the input.",3,null],[12,"default_expression","","",3,null],[12,"with_path","","",3,null],[12,"map","","",3,null],[12,"skip","","",3,null],[12,"multiple","","",3,null],[3,"FmiImpl","","",null,null],[12,"base","","",4,null],[3,"FromDeriveInputImpl","","",null,null],[12,"ident","","",5,null],[12,"generics","","",5,null],[12,"vis","","",5,null],[12,"attrs","","",5,null],[12,"body","","",5,null],[12,"base","","",5,null],[12,"attr_names","","",5,null],[12,"forward_attrs","","",5,null],[12,"from_ident","","",5,null],[12,"supports","","",5,null],[3,"FromFieldImpl","","`impl FromField` generator. This is used for parsing an individual field and its attributes.",null,null],[12,"ident","","",6,null],[12,"vis","","",6,null],[12,"ty","","",6,null],[12,"attrs","","",6,null],[12,"base","","",6,null],[12,"attr_names","","",6,null],[12,"forward_attrs","","",6,null],[12,"from_ident","","",6,null],[3,"FromVariantImpl","","",null,null],[12,"base","","",7,null],[12,"ident","","",7,null],[12,"data","","",7,null],[12,"attrs","","",7,null],[12,"attr_names","","",7,null],[12,"forward_attrs","","",7,null],[12,"from_ident","","",7,null],[12,"supports","","",7,null],[3,"TraitImpl","","",null,null],[12,"ident","","",8,null],[12,"generics","","",8,null],[12,"body","","",8,null],[12,"default","","",8,null],[12,"map","","",8,null],[12,"bound","","",8,null],[3,"Variant","","An enum variant.",null,null],[12,"name_in_attr","","The name which will appear in code passed to the `FromMetaItem` input.",9,null],[12,"variant_ident","","The name of the variant which will be returned for a given `name_in_attr`.",9,null],[12,"ty_ident","","The name of the parent enum type.",9,null],[12,"data","","",9,null],[12,"skip","","Whether or not the variant should be skipped in the generated code.",9,null],[3,"VariantDataGen","","",null,null],[12,"0","","",10,null],[4,"DefaultExpression","","The fallback value for a field or container.",null,null],[13,"Inherit","","Only valid on fields, `Inherit` indicates that the value should be taken from a pre-constructed fallback object. The value in the variant is the ident of the field.",11,null],[13,"Explicit","","",11,null],[13,"Trait","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"defaultexpression"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"defaultexpression"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"defaultexpression"}],"output":{"name":"bool"}}],[11,"as_declaration","","",11,{"inputs":[{"name":"self"}],"output":{"name":"defaultdeclaration"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"as_declaration","","",3,{"inputs":[{"name":"self"}],"output":{"name":"declaration"}}],[11,"as_match","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matcharm"}}],[11,"as_initializer","","",3,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"as_presence_check","","",3,{"inputs":[{"name":"self"}],"output":{"name":"checkmissing"}}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"trait_path","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"base","","",4,{"inputs":[{"name":"self"}],"output":{"name":"traitimpl"}}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"attr_names","","",5,null],[11,"forwarded_attrs","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"param_name","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"core_loop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"local_declarations","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"immutable_declarations","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"trait_path","","",5,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"trait_bound","","",5,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"base","","",5,{"inputs":[{"name":"self"}],"output":{"name":"traitimpl"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"attr_names","","",6,null],[11,"forwarded_attrs","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"param_name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"core_loop","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"local_declarations","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"immutable_declarations","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"trait_path","","",6,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"trait_bound","","",6,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"base","","",6,{"inputs":[{"name":"self"}],"output":{"name":"traitimpl"}}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"local_declarations","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"immutable_declarations","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"attr_names","","",7,null],[11,"forwarded_attrs","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"param_name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"core_loop","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"trait_path","","",7,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"trait_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"base","","",7,{"inputs":[{"name":"self"}],"output":{"name":"traitimpl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"declare_errors","","Gets the `let` declaration for errors accumulated during parsing.",8,{"inputs":[{"name":"self"}],"output":{"name":"errordeclaration"}}],[11,"check_errors","","Gets the check which performs an early return if errors occurred during parsing.",8,{"inputs":[{"name":"self"}],"output":{"name":"errorcheck"}}],[11,"require_fields","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"as_unit_match_arm","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unitmatcharm"}}],[11,"as_data_match_arm","","",9,{"inputs":[{"name":"self"}],"output":{"name":"datamatcharm"}}],[11,"require_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[8,"OuterFromImpl","","Wrapper for \"outer From\" traits, such as `FromDeriveInput`, `FromVariant`, and `FromField`.",null,null],[10,"trait_path","","Gets the path of the trait being implemented.",12,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[10,"base","","",12,{"inputs":[{"name":"self"}],"output":{"name":"traitimpl"}}],[11,"trait_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"wrap","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"tokens"}],"output":null}],[8,"ExtractAttribute","","Infrastructure for generating an attribute extractor.",null,null],[10,"local_declarations","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[10,"immutable_declarations","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[10,"attr_names","","Gets the list of attribute names that should be parsed by the extractor.",13,null],[10,"forwarded_attrs","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"param_name","","Gets the name used by the generated impl to return to the `syn` item passed as input.",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[10,"core_loop","","Gets the core from-meta-item loop that should be used on matching attributes.",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"declarations","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"extractor","","Generates the main extraction loop.",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"error","darling_core","Types for working with darling errors and results.",null,null],[3,"Error","darling_core::error","An error encountered during attribute parsing.",null,null],[3,"IntoIter","","An iterator that moves out of an `Error`.",null,null],[6,"Result","","An alias of `Result` specific to attribute parsing.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","Creates a new error with a custom message.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"duplicate_field","","Creates a new error for a field that appears twice in the input.",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","Creates a new error for a non-optional field that does not appear in the input.",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Creates a new error for a field name that appears in the input but does not correspond to a known field.",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unsupported_format","","",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unexpected_type","","Creates a new error for a field which has an unexpected literal type.",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_value","","Creates a new error for a value which doesn't match a set of expected literals.",14,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"too_few_items","","Creates a new error for a list which did not get enough items to proceed.",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"too_many_items","","Creates a new error when a list got more items than it supports. The `max` argument  is the largest number of items the receiver could accept.",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"multiple","","Bundle a set of multiple errors into a single `Error` instance.",14,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"flatten","","Recursively converts a tree of errors to a flattened list.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"at","","Adds a location to the error, such as a field or variant.  Locations must be added in reverse order of specificity.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"len","","Gets the number of individual errors in this error.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",14,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_meta_item","darling_core::from_meta_item","",16,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[0,"options","darling_core","",null,null],[3,"Core","darling_core::options","A struct or enum which should have `FromMetaItem` or `FromDeriveInput` implementations generated.",null,null],[12,"ident","","The type identifier.",17,null],[12,"generics","","The type's generics. If the type does not use any generics, this will be an empty instance.",17,null],[12,"default","","Controls whether missing properties should cause errors or should be filled by the result of a function call. This can be overridden at the field level.",17,null],[12,"rename_rule","","The rule that should be used to rename all fields/variants in the container.",17,null],[12,"map","","An infallible function with the signature `FnOnce(T) -> T` which will be called after the target instance is successfully constructed.",17,null],[12,"body","","The body of the deriving type.",17,null],[12,"bound","","The custom bound to apply to the generated impl",17,null],[3,"FdiOptions","","",null,null],[12,"base","","",18,null],[12,"vis","","The field on the target struct which should receive the type visibility, if any.",18,null],[12,"generics","","The field on the target struct which should receive the type generics, if any.",18,null],[12,"body","","",18,null],[12,"supports","","",18,null],[3,"FromFieldOptions","","",null,null],[12,"base","","",19,null],[12,"vis","","",19,null],[12,"ty","","",19,null],[3,"FmiOptions","","",null,null],[3,"FromVariantOptions","","",null,null],[12,"base","","",20,null],[12,"data","","",20,null],[12,"supports","","",20,null],[3,"InputVariant","","",null,null],[3,"InputField","","",null,null],[12,"ident","","",21,null],[12,"attr_name","","",21,null],[12,"ty","","",21,null],[12,"default","","",21,null],[12,"with","","",21,null],[12,"skip","","If `true`, generated code will not look for this field in the input meta item, instead always falling back to either `InputField::default` or `Default::default`.",21,null],[12,"map","","",21,null],[12,"multiple","","",21,null],[3,"OuterFrom","","Reusable base for `FromDeriveInput`, `FromVariant`, `FromField`, and other top-level  `From*` traits.",null,null],[12,"ident","","The field on the target struct which should receive the type identifier, if any.",22,null],[12,"attrs","","The field on the target struct which should receive the type attributes, if any.",22,null],[12,"container","","",22,null],[12,"attr_names","","The attribute names that should be searched.",22,null],[12,"forward_attrs","","The attribute names that should be forwarded. The presence of the word with no additional  filtering will cause all attributes to be cloned and exposed to the struct after parsing.",22,null],[12,"from_ident","","Whether or not the container can be made through conversion from the type `Ident`.",22,null],[3,"DataShape","","",null,null],[3,"Shape","","",null,null],[4,"ForwardAttrs","","A rule about which attributes to forward to the generated struct.",null,null],[13,"All","","",23,null],[13,"Only","","",23,null],[4,"DefaultExpression","","A default/fallback expression encountered in attributes during parsing.",null,null],[13,"Inherit","","The value should be taken from the `default` instance of the containing struct. This is not valid in container options.",24,null],[13,"Explicit","","",24,null],[13,"Trait","","",24,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"core"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"core"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"core"}],"output":{"name":"bool"}}],[11,"start","","Partially initializes `Core` by reading the identity, generics, and body shape.",17,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"parse_nested","","",17,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_variant","","",17,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"parse_field","","",17,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"from","darling_core::codegen","",8,{"inputs":[{"name":"core"}],"output":{"name":"self"}}],[11,"fmt","darling_core::options","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"forwardattrs"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"forwardattrs"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"forwardattrs"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if this will not forward any attributes.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_word","","",23,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","",23,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"parse_nested","","",18,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_variant","","",18,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"parse_field","","",18,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"from","darling_core::codegen","",5,{"inputs":[{"name":"fdioptions"}],"output":{"name":"self"}}],[11,"fmt","darling_core::options","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"parse_nested","","",19,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_variant","","",19,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"parse_field","","",19,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"from","darling_core::codegen","",6,{"inputs":[{"name":"fromfieldoptions"}],"output":{"name":"self"}}],[11,"new","darling_core::options","",25,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"parse_nested","","",25,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_variant","","",25,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"parse_field","","",25,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"from","darling_core::codegen","",4,{"inputs":[{"name":"fmioptions"}],"output":{"name":"self"}}],[11,"fmt","darling_core::options","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fromvariantoptions"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"fromvariantoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"fromvariantoptions"}],"output":{"name":"bool"}}],[11,"new","","",20,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"from","darling_core::codegen","",7,{"inputs":[{"name":"fromvariantoptions"}],"output":{"name":"self"}}],[11,"parse_nested","darling_core::options","",20,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_field","","",20,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"inputvariant"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"inputvariant"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"inputvariant"}],"output":{"name":"bool"}}],[11,"as_codegen_variant","","",26,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"variant"}}],[11,"from_variant","","",26,{"inputs":[{"name":"variant"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_nested","","",26,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"inputfield"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"inputfield"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"inputfield"}],"output":{"name":"bool"}}],[11,"as_codegen_field","","Generate a view into this field that can be used for code generation.",21,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"from_field","","",21,{"inputs":[{"name":"field"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_nested","","",21,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"outerfrom"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"outerfrom"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"outerfrom"}],"output":{"name":"bool"}}],[11,"start","","",22,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"parse_nested","","",22,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"parse_field","","",22,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"all","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"from_list","","",27,null],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"datashape"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"datashape"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"datashape"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"datashape"}],"output":{"name":"bool"}}],[11,"from_list","","",28,null],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ParseAttribute","","Middleware for extracting attribute values.",null,null],[11,"parse_attributes","","",29,null],[10,"parse_nested","","Read a meta-item, and apply its values to the current instance.",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[8,"ParseBody","","",null,null],[11,"parse_body","","",30,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"result"}}],[11,"parse_variant","","Apply the next found variant to the object, returning an error if parsing goes wrong.",30,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"parse_field","","Apply the next found struct field to the object, returning an error if parsing goes wrong.",30,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"defaultexpression"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"defaultexpression"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"defaultexpression"}],"output":{"name":"bool"}}],[0,"util","darling_core","Utility types for attribute parsing.",null,null],[3,"IdentList","darling_core::util","A list of `syn::Ident` instances. This type is used to extract a list of words from an  attribute.",null,null],[3,"Ignored","","An efficient way of discarding data from an attribute.",null,null],[3,"Flag","","Marker type equivalent to `Option<()>` for use in attribute parsing.",null,null],[4,"Override","","A value which can inherit a default value or have an explicit value specified.",null,null],[13,"Inherit","","Inherit the eventual value from an external source.",31,null],[13,"Explicit","","Explicitly set the value.",31,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"identlist"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"identlist"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"identlist"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"identlist"}],"output":{"name":"bool"}}],[11,"new","","Create a new list.",32,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_strs","","Creates a view of the contained identifiers as `&str`s.",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_list","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"ignored"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"ignored"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"from_meta_item","","",33,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_nested_meta_item","","",33,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"from_derive_input","","",33,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[11,"from_field","","",33,{"inputs":[{"name":"field"}],"output":{"name":"result"}}],[11,"from_variant","","",33,{"inputs":[{"name":"variant"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"override"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"override"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Override<T>` to `Override<&T>`.",31,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"as_mut","","Converts from `Override<T>` to `Override<&mut T>`.",31,{"inputs":[{"name":"self"}],"output":{"name":"override"}}],[11,"is_explicit","","Returns `true` if the override is an `Explicit` value.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"explicit","","Converts from `Override<T>` to `Option<T>`.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it returns `optb`.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it calls `op`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap_or_default","","Returns the contained value or the default value of `T`.",31,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_word","","",31,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","",31,null],[11,"from_value","","",31,{"inputs":[{"name":"lit"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"flag"}}],[11,"present","","Creates a new `Flag` which corresponds to the presence of a value.",34,{"inputs":[],"output":{"name":"self"}}],[11,"deref","","",34,null],[11,"from_meta_item","","",34,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from","","",34,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"not","","",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"FromDeriveInput","darling_core","Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.",null,null],[10,"from_derive_input","","Create an instance from `syn::DeriveInput`, or return an error.",35,{"inputs":[{"name":"deriveinput"}],"output":{"name":"result"}}],[8,"FromField","","Creates an instance by parsing an individual field and its attributes.",null,null],[10,"from_field","","",36,{"inputs":[{"name":"field"}],"output":{"name":"result"}}],[8,"FromMetaItem","","Create an instance from an item in an attribute declaration. ",null,null],[11,"from_nested_meta_item","","",37,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"from_meta_item","","Create an instance from a `syn::MetaItem` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",37,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",37,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",37,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",37,{"inputs":[{"name":"lit"}],"output":{"name":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",37,{"inputs":[{"name":"char"}],"output":{"name":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",37,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",37,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}],[8,"FromVariant","","Creates an instance from a specified `syn::Variant`.",null,null],[10,"from_variant","","Create an instance from `syn::Variant`, or return an error.",38,{"inputs":[{"name":"variant"}],"output":{"name":"result"}}],[11,"trait_bound","darling_core::codegen","",12,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"wrap","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"tokens"}],"output":null}],[11,"from_nested_meta_item","darling_core","",37,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"from_meta_item","","Create an instance from a `syn::MetaItem` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",37,{"inputs":[{"name":"metaitem"}],"output":{"name":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",37,{"inputs":[],"output":{"name":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",37,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",37,{"inputs":[{"name":"lit"}],"output":{"name":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",37,{"inputs":[{"name":"char"}],"output":{"name":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",37,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",37,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"VariantData"],[4,"Body"],[4,"Style"],[3,"Field"],[3,"FmiImpl"],[3,"FromDeriveInputImpl"],[3,"FromFieldImpl"],[3,"FromVariantImpl"],[3,"TraitImpl"],[3,"Variant"],[3,"VariantDataGen"],[4,"DefaultExpression"],[8,"OuterFromImpl"],[8,"ExtractAttribute"],[3,"Error"],[3,"IntoIter"],[6,"Result"],[3,"Core"],[3,"FdiOptions"],[3,"FromFieldOptions"],[3,"FromVariantOptions"],[3,"InputField"],[3,"OuterFrom"],[4,"ForwardAttrs"],[4,"DefaultExpression"],[3,"FmiOptions"],[3,"InputVariant"],[3,"Shape"],[3,"DataShape"],[8,"ParseAttribute"],[8,"ParseBody"],[4,"Override"],[3,"IdentList"],[3,"Ignored"],[3,"Flag"],[8,"FromDeriveInput"],[8,"FromField"],[8,"FromMetaItem"],[8,"FromVariant"]]};
searchIndex["darling_macro"] = {"doc":"","items":[[5,"derive_from_meta_item","darling_macro","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_from_input","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_field","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_variant","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[14,"debug_unreachable","debug_unreachable","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["dtoa_short"] = {"doc":"","items":[[3,"Notation","dtoa_short","Form of the formatted floating-point number.",null,null],[12,"decimal_point","","Whether it contains a decimal point.",0,null],[12,"scientific","","Whether it uses E-notation.",0,null],[5,"write","","Format the given `value` into `dest` and return the notation it uses.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"dtoaresult"}}],[6,"DtoaResult","","Result of formatting the number.",null,null],[8,"Floating","","",null,null],[10,"write","","",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"dtoaresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"notation"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"notation"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"notation"}}]],"paths":[[3,"Notation"],[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["encoding"] = {"doc":"Encoding 0.2.33","items":[[0,"types","encoding","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the current input. For the `finish` call, this should be no more than zero (since there is no input). It can be negative if the remaining byte is in the prior inputs, as long as the remaining byte is not yet processed. The caller should feed the bytes starting from this point again in order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors. Corresponds to WHATWG \"fatal\" error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder). Corresponds to WHATWG \"replacement\" error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors. The function is given the current decoder, input and output writer, and should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors. Corresponds to WHATWG \"fatal\" error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding. Note that this fails when `?` cannot be represented in given encoding. Corresponds to WHATWG \"URL\" error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`). The encoder trap fails when NCRs cannot be represented in given encoding. Corresponds to WHATWG \"\" error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors. The function is given the current encoder, input and output writer, and should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM) and decoded a single string in memory. Return the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding, for code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output until the next call to `writer_hint`, so that the writer can reserve the memory for writing. `RawEncoder`s are recommended but not required to call this method with an appropriate estimate. By default this method does nothing.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"write_byte","","Writes a single byte.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output until the next call to `writer_hint`, so that the writer can reserve the memory for writing. `RawDecoder`s are recommended but not required to call this method with an appropriate estimate. By default this method does nothing.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"write_char","","Writes a single character.",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[10,"write_str","","Writes a string.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence. This is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII, i.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of string to the encoder, pushes the an encoded byte sequence at the end of the given output, and returns a byte offset to the first unprocessed character (that can be zero when the first such character appeared in the prior calls to `raw_feed`) and optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder, pushes the an encoded byte sequence at the end of the given output, and returns optional error information (None means success). `remaining` value of the error information, if any, is always an empty string.",5,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string. This is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII, i.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder, pushes the a decoded string at the end of the given output, and returns an offset to the first unprocessed byte (that can be zero when the first such byte appeared in the prior calls to `raw_feed`) and optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder, pushes the a decoded string at the end of the given output, and returns optional error information (None means success).",6,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding. This name is guaranteed to be unique across built-in encodings, but it is not normative and would be at most arbitrary.",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any. This name often differs from `name` due to the compatibility reason.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"raw_encoder","","Creates a new encoder.",7,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"raw_decoder","","Creates a new decoder.",7,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"encode","","An easy-to-use interface to `RawEncoder`. On the encoder error `trap` is called, which may return a replacement sequence to continue processing, or a failure to return the error.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"encodertrap"}],"output":{"name":"result"}}],[11,"encode_to","","Encode into a `ByteWriter`.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"encodertrap"},{"name":"bytewriter"}],"output":{"name":"result"}}],[11,"decode","","An easy-to-use interface to `RawDecoder`. On the decoder error `trap` is called, which may return a replacement string to continue processing, or a failure to return the error.",7,null],[11,"decode_to","","Decode into a `StringWriter`.",7,null],[11,"trap","","Handles a decoder error. May write to the output writer. Returns true only when it is fine to keep going.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decodertrap"}}],[11,"trap","","Handles an encoder error. May write to the output writer. Returns true only when it is fine to keep going.",2,{"inputs":[{"name":"self"},{"name":"rawencoder"},{"name":"str"},{"name":"bytewriter"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"encodertrap"}}],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"errorencoding"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"raw_encoder","","",8,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",8,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"errorencoder"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",9,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_feed","","",9,null],[11,"raw_finish","","",9,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errordecoder"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",10,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_feed","","",10,null],[11,"raw_finish","","",10,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"asciiencoding"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"raw_encoder","","",11,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",11,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asciiencoder"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",12,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"asciidecoder"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",13,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",13,null],[11,"raw_finish","","",13,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",14,null],[12,"whatwg_name","","",14,null],[12,"index_forward","","",14,null],[12,"index_backward","","",14,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::singlebyte","",14,{"inputs":[{"name":"self"}],"output":{"name":"singlebyteencoding"}}],[11,"name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",14,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",14,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"singlebyteencoder"}}],[11,"new","","",15,null],[11,"from_self","","",15,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"singlebytedecoder"}}],[11,"new","","",16,null],[11,"from_self","","",16,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",16,null],[11,"raw_finish","","",16,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`. This function is provided for the fair benchmark against the stdlib's UTF-8 conversion functions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"utf8encoding"}}],[11,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"utf8encoder"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",18,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"utf8decoder"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",19,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",19,null],[11,"raw_finish","","",19,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"little"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"big"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoding"}}],[11,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",22,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",22,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoder"}}],[11,"from_self","","",23,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_feed","","",23,null],[11,"raw_finish","","",23,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",24,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_feed","","",24,null],[11,"raw_finish","","",24,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"windows949encoding"}}],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"windows949encoder"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",26,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eucjpencoding"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"eucjpencoder"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",28,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"windows31jencoding"}}],[11,"name","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",29,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",29,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"windows31jencoder"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",30,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",30,null],[11,"raw_finish","","",30,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"iso2022jpencoding"}}],[11,"name","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",31,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",31,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"iso2022jpencoder"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",32,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GBK","encoding::codec::simpchinese","An implementation type for GBK.",null,null],[3,"GB18030","","An implementation type for GB18030.",null,null],[3,"GBEncoding","","GBK and GB 18030-2005.",null,null],[3,"GBEncoder","","An encoder for GBK and GB18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[6,"GBKEncoding","","A type for GBK.",null,null],[6,"GB18030Encoding","","A type for GB18030.",null,null],[17,"GBK_ENCODING","","An instance for GBK.",null,null],[17,"GB18030_ENCODING","","An instance for GB18030.",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"gbk"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"gb18030"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"gbencoding"}}],[11,"name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",35,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",35,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"gbencoder"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",36,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",36,null],[11,"raw_finish","","",36,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"hzencoding"}}],[11,"name","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",37,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",37,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"hzencoder"}}],[11,"new","","",38,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",38,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bigfive2003encoding"}}],[11,"name","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",39,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",39,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bigfive2003encoder"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",40,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and client supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",41,{"inputs":[{"name":"self"}],"output":{"name":"encoderonlyutf8encoding"}}],[11,"name","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_encoder","","",41,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"raw_decoder","","",41,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[5,"encodings","encoding::all","Returns a list of references to the encodings available.",null,null],[0,"whatwg","","",null,null],[17,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[17,"ISO_8859_8_I","","",null,null],[17,"REPLACEMENT","","",null,null],[17,"ERROR","encoding::all","",null,null],[17,"ASCII","","",null,null],[17,"IBM866","","",null,null],[17,"ISO_8859_1","","",null,null],[17,"ISO_8859_2","","",null,null],[17,"ISO_8859_3","","",null,null],[17,"ISO_8859_4","","",null,null],[17,"ISO_8859_5","","",null,null],[17,"ISO_8859_6","","",null,null],[17,"ISO_8859_7","","",null,null],[17,"ISO_8859_8","","",null,null],[17,"ISO_8859_10","","",null,null],[17,"ISO_8859_13","","",null,null],[17,"ISO_8859_14","","",null,null],[17,"ISO_8859_15","","",null,null],[17,"ISO_8859_16","","",null,null],[17,"KOI8_R","","",null,null],[17,"KOI8_U","","",null,null],[17,"MAC_ROMAN","","",null,null],[17,"WINDOWS_874","","",null,null],[17,"WINDOWS_1250","","",null,null],[17,"WINDOWS_1251","","",null,null],[17,"WINDOWS_1252","","",null,null],[17,"WINDOWS_1253","","",null,null],[17,"WINDOWS_1254","","",null,null],[17,"WINDOWS_1255","","",null,null],[17,"WINDOWS_1256","","",null,null],[17,"WINDOWS_1257","","",null,null],[17,"WINDOWS_1258","","",null,null],[17,"MAC_CYRILLIC","","",null,null],[17,"UTF_8","","",null,null],[17,"UTF_16LE","","",null,null],[17,"UTF_16BE","","",null,null],[17,"WINDOWS_949","","",null,null],[17,"EUC_JP","","",null,null],[17,"WINDOWS_31J","","",null,null],[17,"ISO_2022_JP","","",null,null],[17,"GBK","","",null,null],[17,"GB18030","","",null,null],[17,"HZ","","",null,null],[17,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any. Implements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number. http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx Sometimes it can return a superset of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"GBK"],[3,"GB18030"],[3,"GBEncoding"],[3,"GBEncoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex["encoding_index_japanese"] = {"doc":"Japanese index tables for rust-encoding.","items":[[0,"jis0208","encoding_index_japanese","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding_index_japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding_index_japanese","JIS X 0212.",null,null],[5,"forward","encoding_index_japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["encoding_index_korean"] = {"doc":"Korean index tables for rust-encoding.","items":[[0,"euc_kr","encoding_index_korean","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding_index_korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["encoding_index_simpchinese"] = {"doc":"Simplified Chinese index tables for rust-encoding.","items":[[0,"gb18030","encoding_index_simpchinese","GB 18030 two-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding_index_simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["encoding_index_singlebyte"] = {"doc":"Single-byte index tables for rust-encoding.","items":[[0,"ibm866","encoding_index_singlebyte","IBM code page 866.",null,null],[5,"forward","encoding_index_singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding_index_singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding_index_singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding_index_singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding_index_singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding_index_singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding_index_singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding_index_singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding_index_singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding_index_singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding_index_singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding_index_singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding_index_singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding_index_singlebyte","KOI8-R.",null,null],[5,"forward","encoding_index_singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding_index_singlebyte","KOI8-U.",null,null],[5,"forward","encoding_index_singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding_index_singlebyte","MacRoman.",null,null],[5,"forward","encoding_index_singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding_index_singlebyte","Windows code page 874.",null,null],[5,"forward","encoding_index_singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding_index_singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding_index_singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding_index_singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding_index_singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding_index_singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding_index_singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding_index_singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding_index_singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding_index_singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding_index_singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding_index_singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding_index_singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding_index_singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding_index_singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding_index_singlebyte","MacCyrillic.",null,null],[5,"forward","encoding_index_singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex["encoding_index_tests"] = {"doc":"Macros and utilities for testing indices.","items":[[14,"single_byte_tests","encoding_index_tests","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
searchIndex["encoding_index_tradchinese"] = {"doc":"Traditional Chinese index tables for rust-encoding.","items":[[0,"big5","encoding_index_tradchinese","Big5 and HKSCS.",null,null],[5,"forward","encoding_index_tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["euclid"] = {"doc":"A collection of strongly typed math tools for computer graphics with an inclination towards 2d graphics and layout.","items":[[3,"Length","euclid","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",null,null],[12,"0","","",0,null],[3,"ScaleFactor","","A scaling factor between two different units of measurement.",null,null],[12,"0","","",1,null],[3,"TypedTransform2D","","A 2d transform stored as a 2 by 3 matrix in row-major order in memory.",null,null],[12,"m11","","",2,null],[12,"m12","","",2,null],[12,"m21","","",2,null],[12,"m22","","",2,null],[12,"m31","","",2,null],[12,"m32","","",2,null],[3,"TypedTransform3D","","A 3d transform stored as a 4 by 4 matrix in row-major order in memory.",null,null],[12,"m11","","",3,null],[12,"m12","","",3,null],[12,"m13","","",3,null],[12,"m14","","",3,null],[12,"m21","","",3,null],[12,"m22","","",3,null],[12,"m23","","",3,null],[12,"m24","","",3,null],[12,"m31","","",3,null],[12,"m32","","",3,null],[12,"m33","","",3,null],[12,"m34","","",3,null],[12,"m41","","",3,null],[12,"m42","","",3,null],[12,"m43","","",3,null],[12,"m44","","",3,null],[3,"TypedPoint2D","","A 2d Point tagged with a unit.",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"TypedPoint3D","","A 3d Point tagged with a unit.",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"z","","",5,null],[3,"TypedVector2D","","A 2d Vector tagged with a unit.",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"TypedVector3D","","A 3d Vector tagged with a unit.",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"z","","",7,null],[3,"TypedRect","","A 2d Rectangle optionally tagged with a unit.",null,null],[12,"origin","","",8,null],[12,"size","","",8,null],[3,"TypedRotation2D","","A transform that can represent rotations in 2d, represented as an angle in radians.",null,null],[12,"angle","","",9,null],[3,"TypedRotation3D","","A transform that can represent rotations in 3d, represented as a quaternion.",null,null],[12,"i","","",10,null],[12,"j","","",10,null],[12,"k","","",10,null],[12,"r","","",10,null],[3,"TypedSideOffsets2D","","",null,null],[12,"top","","",11,null],[12,"right","","",11,null],[12,"bottom","","",11,null],[12,"left","","",11,null],[3,"TypedSize2D","","",null,null],[12,"width","","",12,null],[12,"height","","",12,null],[3,"UnknownUnit","","The default unit.",null,null],[3,"Rad","","Unit for angles in radians.",null,null],[3,"Deg","","Unit for angles in degrees.",null,null],[5,"point2","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[5,"point3","","",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[5,"vec2","","Convenience constructor.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedvector2d"}}],[5,"vec3","","Convenience constructor.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedvector3d"}}],[5,"rect","","Shorthand for `TypedRect::new(TypedPoint2D::new(x, y), TypedSize2D::new(w, h))`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedrect"}}],[5,"size2","","Shorthand for `TypedSize2D::new(w, h)`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[0,"approxeq","","",null,null],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","",13,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"approx_eq_eps","","",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[0,"num","euclid","A one-dimensional length, tagged with its units.",null,null],[8,"Zero","euclid::num","",null,null],[10,"zero","","",14,{"inputs":[],"output":{"name":"self"}}],[8,"One","","",null,null],[10,"one","","",15,{"inputs":[],"output":{"name":"self"}}],[8,"Round","","",null,null],[10,"round","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Floor","","",null,null],[10,"floor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Ceil","","",null,null],[10,"ceil","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","euclid","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":null}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":null}],[11,"saturating_add","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"saturating_sub","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"scalefactor"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"length"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"length"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"lerp","","Linearly interpolate between this length and another length.",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"row_major","","Create a transform specifying its matrix elements in row-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"column_major","","Create a transform specifying its matrix elements in column-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",2,null],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",2,null],[11,"to_row_arrays","","Returns an array containing this transform's 3 rows in (in row-major order) as arrays.",2,null],[11,"from_row_major_array","","Creates a transform from an array of 6 elements in row-major order.",2,null],[11,"from_row_arrays","","Creates a transform from 3 rows of 2 elements (row-major order).",2,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,{"inputs":[{"name":"self"}],"output":{"name":"transform2d"}}],[11,"from_untyped","","Tag a unitless value with units.",2,{"inputs":[{"name":"transform2d"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"identity","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",2,{"inputs":[{"name":"self"},{"name":"typedtransform2d"}],"output":{"name":"typedtransform2d"}}],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",2,{"inputs":[{"name":"self"},{"name":"typedtransform2d"}],"output":{"name":"typedtransform2d"}}],[11,"create_translation","","Returns a translation transform.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_translate","","Applies a translation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"pre_translate","","Applies a translation before self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"create_scale","","Returns a scale transform.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_scale","","Applies a scale after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_scale","","Applies a scale before self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"create_rotation","","Returns a rotation transform.",2,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[11,"post_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"radians"}],"output":{"name":"self"}}],[11,"pre_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"radians"}],"output":{"name":"self"}}],[11,"transform_point","","Returns the given point transformed by this transform.",2,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector","","Returns the given vector transformed by this matrix.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",2,{"inputs":[{"name":"self"},{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"determinant","","Computes and returns the determinant of this transform.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inverse","","Returns the inverse transform if possible.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_destination","","Returns the same transform with a different destination unit.",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"with_source","","Returns the same transform with a different source unit.",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"to_3d","","Create a 3D transform from the current transform",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"approx_eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"row_major","","Create a transform specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"column_major","","Create a transform specifying its components in column-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"identity","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"row_major_2d","","Create a 4 by 4 transform representing a 2d transformation, specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"ortho","","Create an orthogonal projection transform.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"is_2d","","Returns true if this transform can be represented with a TypedTransform2D.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_2d","","Create a 2D transform picking the relevent terms from this transform.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"is_backface_visible","","Check whether shapes on the XY plane with Z pointing towards the screen transformed by this matrix would be facing back.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"with_destination","","Returns the same transform with a different destination unit.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"with_source","","Returns the same transform with a different source unit.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",3,{"inputs":[{"name":"self"}],"output":{"name":"transform3d"}}],[11,"from_untyped","","Tag a unitless value with units.",3,{"inputs":[{"name":"transform3d"}],"output":{"name":"self"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedtransform3d"}],"output":{"name":"typedtransform3d"}}],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedtransform3d"}],"output":{"name":"typedtransform3d"}}],[11,"inverse","","Returns the inverse transform if possible.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"determinant","","Compute the determinant of the transform.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"mul_s","","Multiplies all of the transform's component by a scalar and returns the result.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_scale_factor","","Convenience function to create a scale transform from a ScaleFactor.",3,{"inputs":[{"name":"scalefactor"}],"output":{"name":"self"}}],[11,"transform_point2d","","Returns the given 2d point transformed by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector2d","","Returns the given 2d vector transformed by this matrix.",3,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"transform_point3d","","Returns the given 3d point transformed by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"transform_vector3d","","Returns the given 3d vector transformed by this matrix.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"typedvector3d"}}],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"create_translation","","Create a 3d translation transform",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_translate","","Returns a transform with a translation applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"post_translate","","Returns a transform with a translation applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"create_scale","","Create a 3d scale transform",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_scale","","Returns a transform with a scale applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_scale","","Returns a transform with a scale applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"create_rotation","","Create a 3d rotation transform from an angle / axis. The supplied axis must be normalized.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"radians"}],"output":{"name":"self"}}],[11,"post_rotate","","Returns a transform with a rotation applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"radians"}],"output":{"name":"self"}}],[11,"pre_rotate","","Returns a transform with a rotation applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"radians"}],"output":{"name":"self"}}],[11,"create_skew","","Create a 2d skew transform.",3,{"inputs":[{"name":"radians"},{"name":"radians"}],"output":{"name":"self"}}],[11,"create_perspective","","Create a simple perspective projection transform",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",3,null],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",3,null],[11,"to_row_arrays","","Returns an array containing this transform's 4 rows in (in row-major order) as arrays.",3,null],[11,"to_column_arrays","","Returns an array containing this transform's 4 columns in (in row-major order, or 4 rows in column-major order) as arrays.",3,null],[11,"from_array","","Creates a transform from an array of 16 elements in row-major order.",3,null],[11,"from_row_arrays","","Creates a transform from 4 rows of 4 elements (row-major order).",3,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"origin","","Constructor, setting all components to zero.",4,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"to_3d","","Convert into a 3d point.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",4,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"extend","","Create a 3d point from this one, using the specified z value.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[11,"to_vector","","Cast this point into a vector.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"yx","","Swap x and y.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",4,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",4,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",4,{"inputs":[{"name":"self"}],"output":{"name":"point2d"}}],[11,"from_untyped","","Tag a unitless value with units.",4,{"inputs":[{"name":"point2d"}],"output":{"name":"self"}}],[11,"to_array","","",4,null],[11,"add_size","","",4,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":null}],[11,"sub_assign","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"min","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedpoint2d"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedpoint2d"}}],[11,"round","","Rounds each component to the nearest integer value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Cast into an `f32` point.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"lerp","","Linearly interpolate between this point and another point.",4,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"approx_epsilon","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",4,null],[11,"from","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"origin","","Constructor, setting all copmonents to zero.",5,{"inputs":[],"output":{"name":"self"}}],[11,"to_array_4d","","",5,null],[11,"lerp","","Linearly interpolate between this point and another point.",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",5,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",5,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"to_vector","","Cast this point into a vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"xy","","Returns a 2d point using this point's x and y coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"xz","","Returns a 2d point using this point's x and z coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"yz","","Returns a 2d point using this point's x and z coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"z_typed","","Returns self.z as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",5,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",5,{"inputs":[{"name":"self"}],"output":{"name":"point3d"}}],[11,"from_untyped","","Tag a unitless value with units.",5,{"inputs":[{"name":"point3d"}],"output":{"name":"self"}}],[11,"to_2d","","Convert into a 2d point.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"min","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Cast into an `f32` point.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"to_i32","","Cast into an `i32` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"to_i64","","Cast into an `i64` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"approx_epsilon","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",5,null],[11,"from","","",5,null],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor.",8,{"inputs":[{"name":"typedpoint2d"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"intersects","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"max_x","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"min_x","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"max_y","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"min_y","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"max_x_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"min_x_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"max_y_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"min_y_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"intersection","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"translate","","Returns the same rectangle, translated by a vector.",8,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"contains","","Returns true if this rectangle contains the point. Points are considered in the rectangle if they are on the left or top edge, but outside if they are on the right or bottom edge.",8,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"bool"}}],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always returns true if rect is empty, and always returns false if rect is nonempty but this rectangle is empty.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"inflate","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"inflate_typed","","",8,{"inputs":[{"name":"self"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"top_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"bottom_left","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"bottom_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"translate_by_size","","",8,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"from_points","","Returns the smallest rectangle containing the four points.",8,null],[11,"lerp","","Linearly interpolate between this rectangle and another rectange.",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"union","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"scale","","",8,{"inputs":[{"name":"self"},{"name":"scale"},{"name":"scale"}],"output":{"name":"self"}}],[11,"zero","","Constructor, setting all sides to zero.",8,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns true if the size is zero, regardless of the origin's value.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedrect"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedrect"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",8,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"from_untyped","","Tag a unitless value with units.",8,{"inputs":[{"name":"rect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that the returned rectangle has the same set of pixel centers as the original one. Edges at offset 0.5 round up. Suitable for most places where integral device coordinates are needed, but note that any translation should be applied first to avoid pixel rounding errors. Note that this is not rounding to nearest integer if the values are negative. They are always rounding as floor(n + 0.5).",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle contains the resulting rectangle.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle is contained in the resulting rectangle.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_f32","","Cast into an `f32` rectangle.",8,{"inputs":[{"name":"self"}],"output":{"name":"typedrect"}}],[11,"to_usize","","Cast into an `usize` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"typedrect"}}],[11,"to_i32","","Cast into an `i32` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"typedrect"}}],[11,"to_i64","","Cast into an `i64` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"typedrect"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates a rotation from an angle in radians.",9,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[11,"radians","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"identity","","Creates the identity rotation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"get_angle","","Returns self.angle as a strongly typed `Radians<T>`.",9,{"inputs":[{"name":"self"}],"output":{"name":"radians"}}],[11,"to_3d","","Creates a 3d rotation (around the z axis) from this 2d rotation.",9,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation3d"}}],[11,"inverse","","Returns the inverse of this rotation.",9,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation2d"}}],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",9,{"inputs":[{"name":"self"},{"name":"typedrotation2d"}],"output":{"name":"typedrotation2d"}}],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",9,{"inputs":[{"name":"self"},{"name":"typedrotation2d"}],"output":{"name":"typedrotation2d"}}],[11,"transform_point","","Returns the given 2d point transformed by this rotation.",9,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector","","Returns the given 2d vector transformed by this rotation.",9,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"to_transform","","Returns the matrix representation of this rotation.",9,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"quaternion","","Creates a rotation around from a quaternion representation.",10,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"vector_part","","Returns the vector part (i, j, k) of this quaternion.",10,{"inputs":[{"name":"self"}],"output":{"name":"vector3d"}}],[11,"identity","","Creates the identity rotation.",10,{"inputs":[],"output":{"name":"self"}}],[11,"unit_quaternion","","Creates a rotation around from a quaternion representation and normalizes it.",10,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"around_axis","","Creates a rotation around a given axis.",10,{"inputs":[{"name":"typedvector3d"},{"name":"radians"}],"output":{"name":"self"}}],[11,"around_x","","Creates a rotation around the x axis.",10,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[11,"around_y","","Creates a rotation around the y axis.",10,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[11,"around_z","","Creates a rotation around the z axis.",10,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[11,"euler","","Creates a rotation from euler angles.",10,{"inputs":[{"name":"radians"},{"name":"radians"},{"name":"radians"}],"output":{"name":"self"}}],[11,"inverse","","Returns the inverse of this rotation.",10,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation3d"}}],[11,"norm","","Computes the norm of this quaternion",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"square_norm","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"normalize","","Returns a unit quaternion from this one.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_normalized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slerp","","Spherical linear interpolation between this rotation and another rotation.",10,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"lerp","","Basic Linear interpolation between this rotation and another rotation.",10,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_point3d","","Returns the given 3d point transformed by this rotation.",10,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"rotate_point2d","","Returns the given 2d point transformed by this rotation then projected on the xy plane.",10,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"rotate_vector3d","","Returns the given 3d vector transformed by this rotation then projected on the xy plane.",10,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"typedvector3d"}}],[11,"rotate_vector2d","","Returns the given 2d vector transformed by this rotation then projected on the xy plane.",10,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"to_transform","","Returns the matrix representation of this rotation.",10,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",10,{"inputs":[{"name":"self"},{"name":"typedrotation3d"}],"output":{"name":"typedrotation3d"}}],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",10,{"inputs":[{"name":"self"},{"name":"typedrotation3d"}],"output":{"name":"typedrotation3d"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"approx_epsilon","","",10,{"inputs":[],"output":{"name":"t"}}],[11,"approx_eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"scalefactor"}}],[11,"get","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inv","","The inverse ScaleFactor (1.0 / self).",1,{"inputs":[{"name":"self"}],"output":{"name":"scalefactor"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scalefactor"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking a scalar for each side.",11,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking a typed Length for each side.",11,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",11,{"inputs":[{"name":"length"}],"output":{"name":"self"}}],[11,"horizontal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"vertical","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"horizontal_typed","","",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"vertical_typed","","",11,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"zero","","Constructor, setting all sides to zero.",11,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values.",12,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking scalar strongly typed lengths.",12,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"area","","",12,null],[11,"lerp","","Linearly interpolate between this size and another size.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedsize2d"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedsize2d"}}],[11,"width_typed","","Returns self.width as a Length carrying the unit.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"height_typed","","Returns self.height as a Length carrying the unit.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",12,null],[11,"to_vector","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",12,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"from_untyped","","Tag a unitless value with units.",12,{"inputs":[{"name":"size2d"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Cast into an `f32` size.",12,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"to_usize","","Cast into an `uint` size, truncating decimals if any.",12,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"to_i32","","Cast into an `i32` size, truncating decimals if any.",12,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"to_i64","","Cast into an `i64` size, truncating decimals if any.",12,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"abs","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_positive","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"zero","","Constructor, setting all components to zero.",6,{"inputs":[],"output":{"name":"self"}}],[11,"to_3d","","Convert into a 3d vector.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",6,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"extend","","Create a 3d vector from this one, using the specified z value.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"typedvector3d"}}],[11,"to_point","","Cast this vector into a point.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"yx","","Swap x and y.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_size","","Cast this vector into a size.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",6,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",6,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6,{"inputs":[{"name":"self"}],"output":{"name":"vector2d"}}],[11,"from_untyped","","Tag a unitless value with units.",6,{"inputs":[{"name":"vector2d"}],"output":{"name":"self"}}],[11,"to_array","","",6,null],[11,"dot","","Dot product.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"normalize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"square_length","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lerp","","Linearly interpolate between this vector and another vector.",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedvector2d"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"scalefactor"}],"output":{"name":"typedvector2d"}}],[11,"round","","Rounds each component to the nearest integer value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Cast into an `f32` vector.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"approx_epsilon","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",6,null],[11,"from","","",6,null],[11,"abs","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"zero","","Constructor, setting all copmonents to zero.",7,{"inputs":[],"output":{"name":"self"}}],[11,"to_array_4d","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",7,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",7,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedvector3d"}}],[11,"to_point","","Cast this vector into a point.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"xy","","Returns a 2d vector using this vector's x and y coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"xz","","Returns a 2d vector using this vector's x and z coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"yz","","Returns a 2d vector using this vector's x and z coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"z_typed","","Returns self.z as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",7,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7,{"inputs":[{"name":"self"}],"output":{"name":"vector3d"}}],[11,"from_untyped","","Tag a unitless value with units.",7,{"inputs":[{"name":"vector3d"}],"output":{"name":"self"}}],[11,"to_2d","","Convert into a 2d vector.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"dot","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"cross","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"normalize","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"square_length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lerp","","Linearly interpolate between this vector and another vector.",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"min","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Cast into an `f32` vector.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"to_i32","","Cast into an `i32` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"to_i64","","Cast into an `i64` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"approx_epsilon","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",7,null],[11,"from","","",7,null],[11,"abs","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[6,"Transform2D","","The default 2d transform type with no units.",null,null],[6,"Transform3D","","The default 4d transform type with no units.",null,null],[6,"Point2D","","Default 2d point type with no unit.",null,null],[6,"Point3D","","Default 3d point type with no unit.",null,null],[6,"Vector2D","","Default 2d vector type with no unit.",null,null],[6,"Vector3D","","Default 3d vector type with no unit.",null,null],[6,"Rect","","The default rectangle type with no unit.",null,null],[6,"Rotation2D","","The default 2d rotation type with no units.",null,null],[6,"Rotation3D","","The default 3d rotation type with no units.",null,null],[6,"SideOffsets2D","","The default side offset type with no unit.",null,null],[6,"Size2D","","Default 2d size type with no unit.",null,null],[6,"Radians","","A value in radians.",null,null],[6,"Degrees","","A value in Degrees.",null,null],[6,"Matrix2D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"TypedMatrix2D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"Matrix4D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"TypedMatrix4D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[8,"Trig","","Trait for basic trigonometry functions, so they can be used on generic numeric types",null,null],[10,"sin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownunit"}}]],"paths":[[3,"Length"],[3,"ScaleFactor"],[3,"TypedTransform2D"],[3,"TypedTransform3D"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedVector2D"],[3,"TypedVector3D"],[3,"TypedRect"],[3,"TypedRotation2D"],[3,"TypedRotation3D"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[8,"ApproxEq"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[8,"Trig"],[3,"UnknownUnit"]]};
searchIndex["fallible"] = {"doc":"","items":[[8,"FallibleVec","fallible","",null,null],[10,"try_push","","Append |val| to the end of |vec|.  Returns Ok(()) on success, Err(reason) if it fails, with |reason| describing the failure.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}]],"paths":[[8,"FallibleVec"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["futf"] = {"doc":"","items":[[3,"Codepoint","futf","Represents a complete or partial UTF-8 codepoint.",null,null],[12,"bytes","","The bytes that make up the partial or full codepoint.",0,null],[12,"rewind","","Start of the codepoint in the buffer, expressed as an offset back from `idx`.",0,null],[12,"meaning","","Meaning of the partial or full codepoint.",0,null],[4,"Meaning","","Meaning of a complete or partial UTF-8 codepoint.",null,null],[13,"Whole","","We found a whole codepoint.",1,null],[13,"LeadSurrogate","","We found something that isn't a valid Unicode codepoint, but it would correspond to a UTF-16 leading surrogate code unit, i.e. a value in the range `U+D800` - `U+DBFF`.",1,null],[13,"TrailSurrogate","","We found something that isn't a valid Unicode codepoint, but it would correspond to a UTF-16 trailing surrogate code unit, i.e. a value in the range `U+DC00` - `U+DFFF`.",1,null],[13,"Prefix","","We found only a prefix of a codepoint before the buffer ended.",1,null],[13,"Suffix","","We found only a suffix of a codepoint before running off the start of the buffer.",1,null],[5,"classify","","Describes the UTF-8 codepoint containing the byte at index `idx` within `buf`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"meaning"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"meaning"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codepoint"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null]],"paths":[[3,"Codepoint"],[4,"Meaning"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `merge` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",40,null],[13,"Second","","An item from the second stream",40,null],[13,"Both","","Items from both streams",40,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",45,null],[11,"poll_complete","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",50,null],[11,"poll_complete","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",67,null],[11,"poll_complete","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",68,null],[11,"poll_complete","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",75,null],[11,"poll_complete","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",76,null],[11,"poll_complete","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",81,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",82,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"name":"result"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",83,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",84,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",85,null],[16,"Error","","The type of error this stream may generate.",85,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",85,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",85,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",85,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",85,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",85,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",85,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",85,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",85,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",85,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",85,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",85,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",85,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",86,null],[11,"poll_complete","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",87,null],[11,"poll_complete","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",93,null],[11,"poll_complete","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",94,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",95,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",95,null],[10,"start_send","","Begin the process of sending a value to the sink.",95,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",95,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",95,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",95,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a new future, returning the fused future and task.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",97,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",98,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",100,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",100,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",102,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",101,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",101,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",110,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"start_send","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",107,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",107,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",109,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",114,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",114,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",114,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",114,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",117,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",118,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",118,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",119,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",119,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",120,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",120,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",121,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",121,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",124,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",125,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",126,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",127,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"from","futures::executor","",129,{"inputs":[{"name":"nodetohandle"}],"output":{"name":"notifyhandle"}}],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",130,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",131,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",132,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",132,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",132,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",132,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",132,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",132,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",134,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",134,{"inputs":[{"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",129,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",135,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",135,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",132,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",132,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",132,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",132,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",132,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",129,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",129,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",129,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"NotifyHandle"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"Task"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["hashglobe"] = {"doc":"","items":[[3,"FailedAllocationError","hashglobe","",null,null],[0,"hash_map","","",null,null],[3,"DefaultHasher","hashglobe::hash_map","The default [`Hasher`] used by [`RandomState`].",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"HashMap","","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",0,null],[13,"Vacant","","A vacant entry.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty `HashMap`.",1,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"try_with_capacity","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",1,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"with_hasher","","",1,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"try_with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_capacity_and_hasher","","",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"try_reserve","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"try_shrink_to_fit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"try_entry","","",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"try_insert","","",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",1,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key in the entry.",5,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take the ownership of the key and value from the map.",5,null],[11,"get","","Gets a reference to the value in the entry.",5,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",5,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",5,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",6,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",6,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"hash_set","hashglobe","",null,null],[3,"HashSet","hashglobe::hash_set","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty `HashSet`.",11,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",11,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",11,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",11,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",11,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",11,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",11,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[0,"fake","hashglobe","This module contains shims around the stdlib HashMap that add fallible methods",null,null],[4,"Entry","hashglobe::fake","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",19,null],[13,"Vacant","","A vacant entry.",19,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"MapIter","","An iterator over the entries of a `HashMap`.",null,null],[3,"MapIterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"SetIter","","An iterator over the items of a `HashSet`.",null,null],[3,"SetIntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"HashMap","","",null,null],[3,"HashSet","","",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"deref","","",20,null],[11,"deref_mut","","",20,null],[11,"new","","",20,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"try_with_capacity","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_with_hasher","","",20,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"try_with_capacity_and_hasher","","",20,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_capacity_and_hasher","","",20,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"try_reserve","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_shrink_to_fit","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_entry","","",20,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[11,"try_insert","","",20,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"deref","","",21,null],[11,"deref_mut","","",21,null],[11,"new","","",21,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","",21,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","",21,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"try_reserve","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_shrink_to_fit","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_insert","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"into_iter","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setintoiter"}}],[11,"fmt","hashglobe","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","hashglobe::hash_map","Creates a new `DefaultHasher`.",23,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"fmt","hashglobe::fake","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hashglobe::hash_map","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hashglobe::fake","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",19,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"default","","Constructs a new `RandomState`.",28,{"inputs":[],"output":{"name":"randomstate"}}],[11,"default","hashglobe::hash_map","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",23,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"write","","",23,null],[11,"finish","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"build_hasher","hashglobe::fake","",28,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","hashglobe::hash_map","",23,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","hashglobe::fake","",28,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",28,{"inputs":[],"output":{"name":"randomstate"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",19,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",19,{"inputs":[{"name":"self"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[4,"Entry"],[3,"HashMap"],[3,"HashSet"],[3,"FailedAllocationError"],[3,"DefaultHasher"],[3,"SetIter"],[3,"SetIntoIter"],[3,"MapIterMut"],[3,"MapIter"],[3,"RandomState"]]};
searchIndex["heapsize"] = {"doc":"Data structure measurement.","items":[[5,"heap_size_of","heapsize","Get the size of a heap block.",null,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the space taken up by the value itself (i.e. what size_of:: measures, more or less); that space is handled by the implementation of HeapSizeOf for Box below.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[14,"known_heap_size","","For use on types defined in external crates with known heap sizes.",null,null]],"paths":[[8,"HeapSizeOf"]]};
searchIndex["heapsize_derive"] = {"doc":"","items":[[5,"expand_token_stream","heapsize_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["html5ever"] = {"doc":"","items":[[0,"serialize","html5ever","",null,null],[8,"Serialize","html5ever::serialize","",null,null],[10,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"traversalscope"}],"output":{"name":"result"}}],[8,"Serializer","","",null,null],[10,"start_elem","","",1,{"inputs":[{"name":"self"},{"name":"qualname"},{"name":"attriter"}],"output":{"name":"result"}}],[10,"end_elem","","",1,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"result"}}],[10,"write_text","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_comment","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_doctype","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_processing_instruction","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[4,"TraversalScope","","",null,null],[13,"IncludeNode","","",2,null],[13,"ChildrenOnly","","",2,null],[6,"AttrRef","","",null,null],[3,"SerializeOpts","","",null,null],[12,"scripting_enabled","","Is scripting enabled?",3,null],[12,"traversal_scope","","Serialize the root node? Default: ChildrenOnly",3,null],[12,"create_missing_parent","","If the serializer is asked to serialize an invalid tree, the default behavior is to panic in the event that an `end_elem` is created without a matching `start_elem`. Setting this to true will prevent those panics by creating a default parent on the element stack. No extra start elem will actually be written. Default: false",3,null],[5,"serialize","","",null,{"inputs":[{"name":"wr"},{"name":"t"},{"name":"serializeopts"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"serializeopts"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"serializeopts"}}],[0,"tokenizer","html5ever","The HTML5 tokenizer.",null,null],[3,"BufferQueue","html5ever::tokenizer","A queue of owned string buffers, which supports incrementally consuming characters.",null,null],[4,"SetResult","","Result from `pop_except_from`.",null,null],[13,"FromSet","","",4,null],[13,"NotFromSet","","",4,null],[3,"Doctype","","A `DOCTYPE` token.",null,null],[12,"name","","",5,null],[12,"public_id","","",5,null],[12,"system_id","","",5,null],[12,"force_quirks","","",5,null],[3,"Tag","","A tag token.",null,null],[12,"kind","","",6,null],[12,"name","","",6,null],[12,"self_closing","","",6,null],[12,"attrs","","",6,null],[3,"TokenizerOpts","","Tokenizer options, with an impl for `Default`.",null,null],[12,"exact_errors","","Report all parse errors described in the spec, at some performance penalty?  Default: false",7,null],[12,"discard_bom","","Discard a `U+FEFF BYTE ORDER MARK` if we see one at the beginning of the stream?  Default: true",7,null],[12,"profile","","Keep a record of how long we spent in each state?  Printed when `end()` is called.  Default: false",7,null],[12,"initial_state","","Initial state override.  Only the test runner should use a non-`None` value!",7,null],[12,"last_start_tag_name","","Last start tag.  Only the test runner should use a non-`None` value!",7,null],[3,"Tokenizer","","The HTML tokenizer.",null,null],[12,"sink","","Destination for tokens we emit.",8,null],[4,"TagKind","","",null,null],[13,"StartTag","","",9,null],[13,"EndTag","","",9,null],[4,"Token","","",null,null],[13,"DoctypeToken","","",10,null],[13,"TagToken","","",10,null],[13,"CommentToken","","",10,null],[13,"CharacterTokens","","",10,null],[13,"NullCharacterToken","","",10,null],[13,"EOFToken","","",10,null],[13,"ParseError","","",10,null],[4,"TokenSinkResult","","",null,null],[13,"Continue","","",11,null],[13,"Script","","",11,null],[13,"Plaintext","","",11,null],[13,"RawData","","",11,null],[4,"ProcessResult","","",null,null],[13,"Continue","","",12,null],[13,"Suspend","","",12,null],[13,"Script","","",12,null],[4,"TokenizerResult","","",null,null],[13,"Done","","",13,null],[13,"Script","","",13,null],[0,"states","","Tokenizer states.",null,null],[4,"ScriptEscapeKind","html5ever::tokenizer::states","",null,null],[13,"Escaped","","",14,null],[13,"DoubleEscaped","","",14,null],[4,"DoctypeIdKind","","",null,null],[13,"Public","","",15,null],[13,"System","","",15,null],[4,"RawKind","","",null,null],[13,"Rcdata","","",16,null],[13,"Rawtext","","",16,null],[13,"ScriptData","","",16,null],[13,"ScriptDataEscaped","","",16,null],[4,"AttrValueKind","","",null,null],[13,"Unquoted","","",17,null],[13,"SingleQuoted","","",17,null],[13,"DoubleQuoted","","",17,null],[4,"State","","",null,null],[13,"Data","","",18,null],[13,"Plaintext","","",18,null],[13,"TagOpen","","",18,null],[13,"EndTagOpen","","",18,null],[13,"TagName","","",18,null],[13,"RawData","","",18,null],[13,"RawLessThanSign","","",18,null],[13,"RawEndTagOpen","","",18,null],[13,"RawEndTagName","","",18,null],[13,"ScriptDataEscapeStart","","",18,null],[13,"ScriptDataEscapeStartDash","","",18,null],[13,"ScriptDataEscapedDash","","",18,null],[13,"ScriptDataEscapedDashDash","","",18,null],[13,"ScriptDataDoubleEscapeEnd","","",18,null],[13,"BeforeAttributeName","","",18,null],[13,"AttributeName","","",18,null],[13,"AfterAttributeName","","",18,null],[13,"BeforeAttributeValue","","",18,null],[13,"AttributeValue","","",18,null],[13,"AfterAttributeValueQuoted","","",18,null],[13,"SelfClosingStartTag","","",18,null],[13,"BogusComment","","",18,null],[13,"MarkupDeclarationOpen","","",18,null],[13,"CommentStart","","",18,null],[13,"CommentStartDash","","",18,null],[13,"Comment","","",18,null],[13,"CommentEndDash","","",18,null],[13,"CommentEnd","","",18,null],[13,"CommentEndBang","","",18,null],[13,"Doctype","","",18,null],[13,"BeforeDoctypeName","","",18,null],[13,"DoctypeName","","",18,null],[13,"AfterDoctypeName","","",18,null],[13,"AfterDoctypeKeyword","","",18,null],[13,"BeforeDoctypeIdentifier","","",18,null],[13,"DoctypeIdentifierDoubleQuoted","","",18,null],[13,"DoctypeIdentifierSingleQuoted","","",18,null],[13,"AfterDoctypeIdentifier","","",18,null],[13,"BetweenDoctypePublicAndSystemIdentifiers","","",18,null],[13,"BogusDoctype","","",18,null],[13,"CdataSection","","",18,null],[13,"CdataSectionBracket","","",18,null],[13,"CdataSectionEnd","","",18,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"scriptescapekind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"scriptescapekind"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"scriptescapekind"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"scriptescapekind"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"doctypeidkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"doctypeidkind"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"doctypeidkind"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"doctypeidkind"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"rawkind"}],"output":{"name":"ordering"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rawkind"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"attrvaluekind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"attrvaluekind"}],"output":{"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"attrvaluekind"}],"output":{"name":"ordering"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"attrvaluekind"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"ordering"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","html5ever::tokenizer","",5,{"inputs":[{"name":"self"},{"name":"doctype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"doctype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"doctype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"doctype"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"tagkind"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tagkind"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"equiv_modulo_attr_order","","Are the tags equivalent when we don't care about attribute order? Also ignores the self-closing flag.",6,{"inputs":[{"name":"self"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"tokensinkresult"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"tokensinkresult"}],"output":{"name":"bool"}}],[8,"TokenSink","","Types which can receive tokens from the tokenizer.",null,null],[16,"Handle","","",19,null],[10,"process_token","","Process a token.",19,{"inputs":[{"name":"self"},{"name":"token"},{"name":"u64"}],"output":{"name":"tokensinkresult"}}],[11,"end","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"adjusted_current_node_present_but_not_in_html_namespace","","Used in the markup declaration open state. By default, this always returns false and thus all CDATA sections are tokenized as bogus comments. https://html.spec.whatwg.org/multipage/#markup-declaration-open-state",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenizeropts"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"tokenizeropts"}}],[11,"new","","Create a new tokenizer which feeds tokens to a particular `TokenSink`.",8,{"inputs":[{"name":"sink"},{"name":"tokenizeropts"}],"output":{"name":"tokenizer"}}],[11,"feed","","Feed an input string into the tokenizer.",8,{"inputs":[{"name":"self"},{"name":"bufferqueue"}],"output":{"name":"tokenizerresult"}}],[11,"set_plaintext_state","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"end","","Indicate that we have reached the end of the input.",8,{"inputs":[{"name":"self"}],"output":null}],[0,"tree_builder","html5ever","The HTML5 tree builder.",null,null],[4,"QuirksMode","html5ever::tree_builder","A document's quirks mode.",null,null],[13,"Quirks","","",20,null],[13,"LimitedQuirks","","",20,null],[13,"NoQuirks","","",20,null],[4,"NodeOrText","","Something which can be inserted into the DOM.",null,null],[13,"AppendNode","","",21,null],[13,"AppendText","","",21,null],[3,"Attribute","","A tag attribute.",null,null],[12,"name","","",22,null],[12,"value","","",22,null],[8,"TreeSink","","",null,null],[16,"Handle","","`Handle` is a reference to a DOM node.  The tree builder requires that a `Handle` implements `Clone` to get another reference to the same node.",23,null],[16,"Output","","The overall result of parsing.",23,null],[10,"finish","","Consume this sink and return the overall result of parsing.",23,null],[10,"parse_error","","Signal a parse error.",23,null],[10,"get_document","","Get a handle to the `Document` node.",23,null],[10,"elem_name","","What is the name of this element?",23,null],[10,"create_element","","Create an element.",23,null],[10,"create_comment","","Create a comment node.",23,null],[10,"create_pi","","Create a Processing Instruction node.",23,null],[10,"append","","Append a node as the last child of the given node.  If this would produce adjacent sibling text nodes, it should concatenate the text instead.",23,null],[10,"append_based_on_parent_node","","When the insertion point is decided by the existence of a parent node of the element, we consider both possibilities and send the element which will be used if a parent node exists, along with the element to be used if there isn't one.",23,null],[10,"append_doctype_to_document","","Append a `DOCTYPE` element to the `Document` node.",23,null],[11,"mark_script_already_started","","Mark a HTML `<script>` as \"already started\".",23,null],[11,"pop","","Indicate that a node was popped off the stack of open elements.",23,null],[10,"get_template_contents","","Get a handle to a template's template contents. The tree builder promises this will never be called with something else than a template element.",23,null],[10,"same_node","","Do two handles refer to the same node?",23,null],[11,"same_tree","","Are two handles present in the same tree",23,null],[10,"set_quirks_mode","","Set the document's quirks mode.",23,null],[10,"has_parent_node","","Does the node have a parent?",23,null],[10,"append_before_sibling","","Append a node as the sibling immediately before the given node. This method will only be called if has_parent_node(sibling) is true",23,null],[10,"add_attrs_if_missing","","Add each attribute to the given element, if no attribute with that name already exists. The tree builder promises this will never be called with something else than an element.",23,null],[11,"associate_with_form","","Associate the given form-associatable element with the form element",23,null],[10,"remove_from_parent","","Detach the given node from its parent.",23,null],[10,"reparent_children","","Remove all the children from node and append them to new_parent.",23,null],[11,"is_mathml_annotation_xml_integration_point","","Returns true if the adjusted current node is an HTML integration point and the token is a start tag.",23,null],[11,"set_current_line","","Called whenever the line number changes.",23,null],[11,"complete_script","","Indicate that a `script` element is complete.",23,null],[8,"Tracer","","Trace hooks for a garbage-collected DOM.",null,null],[16,"Handle","","",24,null],[10,"trace_handle","","Upon a call to `trace_handles`, the tree builder will call this method for each handle in its internal state.",24,null],[4,"NextParserState","","Whether to interrupt further parsing of the current input until the next explicit resumption of the tokenizer, or continue without any interruption.",null,null],[13,"Suspend","","Stop further parsing.",25,null],[13,"Continue","","Continue without interruptions.",25,null],[5,"create_element","","",null,null],[3,"ElementFlags","","",null,null],[12,"template","","A document fragment should be created, associated with the element, and returned in TreeSink::get_template_contents",26,null],[12,"mathml_annotation_xml_integration_point","","This boolean should be recorded with the element and returned in TreeSink::is_mathml_annotation_xml_integration_point",26,null],[3,"TreeBuilderOpts","","Tree builder options, with an impl for Default.",null,null],[12,"exact_errors","","Report all parse errors described in the spec, at some performance penalty?  Default: false",27,null],[12,"scripting_enabled","","Is scripting enabled?",27,null],[12,"iframe_srcdoc","","Is this an `iframe srcdoc` document?",27,null],[12,"drop_doctype","","Should we drop the DOCTYPE (if any) from the tree?",27,null],[12,"ignore_missing_rules","","Obsolete, ignored.",27,null],[12,"quirks_mode","","Initial TreeBuilder quirks mode. Default: NoQuirks",27,null],[3,"TreeBuilder","","The HTML tree builder.",null,null],[12,"sink","","Consumer of tree modifications.",28,null],[3,"ActiveFormattingIter","","",null,null],[4,"PushFlag","","",null,null],[13,"Push","","",29,null],[13,"NoPush","","",29,null],[5,"html_elem","","",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"treebuilderopts"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"treebuilderopts"}}],[11,"new","","Create a new tree builder which sends tree modifications to a particular `TreeSink`.",28,{"inputs":[{"name":"sink"},{"name":"treebuilderopts"}],"output":{"name":"treebuilder"}}],[11,"new_for_fragment","","Create a new tree builder which sends tree modifications to a particular `TreeSink`. This is for parsing fragments.",28,{"inputs":[{"name":"sink"},{"name":"handle"},{"name":"option"},{"name":"treebuilderopts"}],"output":{"name":"treebuilder"}}],[11,"tokenizer_state_for_context_elem","","",28,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"trace_handles","","Call the `Tracer`'s `trace_handle` method on every `Handle` in the tree builder's internal state.  This is intended to support garbage-collected DOMs.",28,{"inputs":[{"name":"self"},{"name":"tracer"}],"output":null}],[11,"is_fragment","","Are we parsing a HTML fragment?",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"process_token","","",28,{"inputs":[{"name":"self"},{"name":"token"},{"name":"u64"}],"output":{"name":"tokensinkresult"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"adjusted_current_node_present_but_not_in_html_namespace","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"driver","html5ever","High-level interface to the parser.",null,null],[3,"ParseOpts","html5ever::driver","All-encompassing options struct for the parser.",null,null],[12,"tokenizer","","Tokenizer options.",31,null],[12,"tree_builder","","Tree builder options.",31,null],[3,"Parser","","An HTML parser, ready to receive Unicode input through the `tendril::TendrilSink` trait’s methods.",null,null],[12,"tokenizer","","",32,null],[12,"input_buffer","","",32,null],[5,"parse_document","","Parse an HTML document",null,{"inputs":[{"name":"sink"},{"name":"parseopts"}],"output":{"name":"parser"}}],[5,"parse_fragment","","Parse an HTML fragment",null,{"inputs":[{"name":"sink"},{"name":"parseopts"},{"name":"qualname"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"parse_fragment_for_element","","Like `parse_fragment`, but with an existing context element and optionally a form element.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"parseopts"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"parseopts"}}],[11,"process","","",32,{"inputs":[{"name":"self"},{"name":"strtendril"}],"output":null}],[11,"error","","",32,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"finish","","",32,null],[11,"from_utf8","","Wrap this parser into a `TendrilSink` that accepts UTF-8 bytes.",32,{"inputs":[{"name":"self"}],"output":{"name":"utf8lossydecoder"}}],[14,"small_char_set","html5ever","",null,null],[14,"namespace_url","","",null,null],[14,"ns","","",null,null],[14,"namespace_prefix","","",null,null],[14,"expanded_name","","",null,null],[14,"local_name","","",null,null],[11,"default","html5ever::tree_builder","",26,{"inputs":[],"output":{"name":"elementflags"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"eq","html5ever::serialize","",2,{"inputs":[{"name":"self"},{"name":"traversalscope"}],"output":{"name":"bool"}}],[11,"eq","html5ever::tree_builder","",25,{"inputs":[{"name":"self"},{"name":"nextparserstate"}],"output":{"name":"bool"}}],[11,"eq","html5ever::tokenizer","",4,{"inputs":[{"name":"self"},{"name":"setresult"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"setresult"}],"output":{"name":"bool"}}],[11,"eq","html5ever::tree_builder","",20,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","html5ever::tokenizer","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","html5ever::tree_builder","",20,null],[11,"hash","","",25,null],[11,"clone","html5ever::serialize","",2,{"inputs":[{"name":"self"}],"output":{"name":"traversalscope"}}],[11,"clone","html5ever::tree_builder","",25,{"inputs":[{"name":"self"}],"output":{"name":"nextparserstate"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"new","html5ever::tokenizer","Create an empty BufferQueue.",33,{"inputs":[],"output":{"name":"bufferqueue"}}],[11,"is_empty","","Returns whether the queue is empty.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop_front","","Get the tendril at the beginning of the queue.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Add a buffer to the beginning of the queue.",33,null],[11,"push_back","","Add a buffer to the end of the queue.",33,null],[11,"peek","","Look at the next available character, if any.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","Get the next character, if one is available.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_except_from","","Pops and returns either a single character from the given set, or a `StrTendril` of characters none of which are in the set.  The set is represented as a bitmask and so can only contain the first 64 ASCII characters.",33,{"inputs":[{"name":"self"},{"name":"smallcharset"}],"output":{"name":"option"}}],[11,"eat","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"option"}}],[11,"end","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"adjusted_current_node_present_but_not_in_html_namespace","","Used in the markup declaration open state. By default, this always returns false and thus all CDATA sections are tokenized as bogus comments. https://html.spec.whatwg.org/multipage/#markup-declaration-open-state",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"Serialize"],[8,"Serializer"],[4,"TraversalScope"],[3,"SerializeOpts"],[4,"SetResult"],[3,"Doctype"],[3,"Tag"],[3,"TokenizerOpts"],[3,"Tokenizer"],[4,"TagKind"],[4,"Token"],[4,"TokenSinkResult"],[4,"ProcessResult"],[4,"TokenizerResult"],[4,"ScriptEscapeKind"],[4,"DoctypeIdKind"],[4,"RawKind"],[4,"AttrValueKind"],[4,"State"],[8,"TokenSink"],[4,"QuirksMode"],[4,"NodeOrText"],[3,"Attribute"],[8,"TreeSink"],[8,"Tracer"],[4,"NextParserState"],[3,"ElementFlags"],[3,"TreeBuilderOpts"],[3,"TreeBuilder"],[4,"PushFlag"],[3,"ActiveFormattingIter"],[3,"ParseOpts"],[3,"Parser"],[3,"BufferQueue"]]};
searchIndex["ident_case"] = {"doc":"Crate for changing case of Rust identifiers.","items":[[4,"RenameRule","ident_case","A casing rule for renaming Rust identifiers.",null,null],[13,"None","","No-op rename rule.",0,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",0,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",0,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",0,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",0,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",0,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"apply_to_variant","","Change case of a `PascalCase` variant.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"string"}}],[11,"apply_to_field","","Change case of a `snake_case` field.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"string"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}]],"paths":[[4,"RenameRule"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",40,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",50,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"chunks_lazy","","",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_default","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"extend","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,null],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref","","",0,null]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",65,null],[12,"aio_lio_opcode","","",65,null],[12,"aio_reqprio","","",65,null],[12,"aio_buf","","",65,null],[12,"aio_nbytes","","",65,null],[12,"aio_sigevent","","",65,null],[12,"aio_offset","","",65,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",66,null],[12,"e_exit","","",66,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",67,null],[12,"tv_usec","","",67,null],[3,"utmpx","","",null,null],[12,"ut_type","","",68,null],[12,"ut_pid","","",68,null],[12,"ut_line","","",68,null],[12,"ut_id","","",68,null],[12,"ut_user","","",68,null],[12,"ut_host","","",68,null],[12,"ut_exit","","",68,null],[12,"ut_session","","",68,null],[12,"ut_tv","","",68,null],[12,"ut_addr_v6","","",68,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",69,null],[12,"sa_mask","","",69,null],[12,"sa_flags","","",69,null],[12,"sa_restorer","","",69,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",70,null],[12,"ss_flags","","",70,null],[12,"ss_size","","",70,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",71,null],[12,"si_errno","","",71,null],[12,"si_code","","",71,null],[12,"_pad","","",71,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",72,null],[12,"gl_pathv","","",72,null],[12,"gl_offs","","",72,null],[12,"gl_flags","","",72,null],[3,"ucred","","",null,null],[12,"pid","","",73,null],[12,"uid","","",73,null],[12,"gid","","",73,null],[3,"statfs","","",null,null],[12,"f_type","","",74,null],[12,"f_bsize","","",74,null],[12,"f_blocks","","",74,null],[12,"f_bfree","","",74,null],[12,"f_bavail","","",74,null],[12,"f_files","","",74,null],[12,"f_ffree","","",74,null],[12,"f_fsid","","",74,null],[12,"f_namelen","","",74,null],[12,"f_frsize","","",74,null],[3,"msghdr","","",null,null],[12,"msg_name","","",75,null],[12,"msg_namelen","","",75,null],[12,"msg_iov","","",75,null],[12,"msg_iovlen","","",75,null],[12,"msg_control","","",75,null],[12,"msg_controllen","","",75,null],[12,"msg_flags","","",75,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",76,null],[12,"cmsg_level","","",76,null],[12,"cmsg_type","","",76,null],[3,"termios","","",null,null],[12,"c_iflag","","",77,null],[12,"c_oflag","","",77,null],[12,"c_cflag","","",77,null],[12,"c_lflag","","",77,null],[12,"c_line","","",77,null],[12,"c_cc","","",77,null],[12,"c_ispeed","","",77,null],[12,"c_ospeed","","",77,null],[3,"flock","","",null,null],[12,"l_type","","",78,null],[12,"l_whence","","",78,null],[12,"l_start","","",78,null],[12,"l_len","","",78,null],[12,"l_pid","","",78,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",79,null],[12,"loads","","",79,null],[12,"totalram","","",79,null],[12,"freeram","","",79,null],[12,"sharedram","","",79,null],[12,"bufferram","","",79,null],[12,"totalswap","","",79,null],[12,"freeswap","","",79,null],[12,"procs","","",79,null],[12,"pad","","",79,null],[12,"totalhigh","","",79,null],[12,"freehigh","","",79,null],[12,"mem_unit","","",79,null],[12,"_f","","",79,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",80,null],[12,"msg_stime","","",80,null],[12,"msg_rtime","","",80,null],[12,"msg_ctime","","",80,null],[12,"msg_qnum","","",80,null],[12,"msg_qbytes","","",80,null],[12,"msg_lspid","","",80,null],[12,"msg_lrpid","","",80,null],[3,"stat","","",null,null],[12,"st_dev","","",81,null],[12,"st_ino","","",81,null],[12,"st_nlink","","",81,null],[12,"st_mode","","",81,null],[12,"st_uid","","",81,null],[12,"st_gid","","",81,null],[12,"st_rdev","","",81,null],[12,"st_size","","",81,null],[12,"st_blksize","","",81,null],[12,"st_blocks","","",81,null],[12,"st_atime","","",81,null],[12,"st_atime_nsec","","",81,null],[12,"st_mtime","","",81,null],[12,"st_mtime_nsec","","",81,null],[12,"st_ctime","","",81,null],[12,"st_ctime_nsec","","",81,null],[3,"stat64","","",null,null],[12,"st_dev","","",82,null],[12,"st_ino","","",82,null],[12,"st_nlink","","",82,null],[12,"st_mode","","",82,null],[12,"st_uid","","",82,null],[12,"st_gid","","",82,null],[12,"st_rdev","","",82,null],[12,"st_size","","",82,null],[12,"st_blksize","","",82,null],[12,"st_blocks","","",82,null],[12,"st_atime","","",82,null],[12,"st_atime_nsec","","",82,null],[12,"st_mtime","","",82,null],[12,"st_mtime_nsec","","",82,null],[12,"st_ctime","","",82,null],[12,"st_ctime_nsec","","",82,null],[3,"statfs64","","",null,null],[12,"f_type","","",83,null],[12,"f_bsize","","",83,null],[12,"f_blocks","","",83,null],[12,"f_bfree","","",83,null],[12,"f_bavail","","",83,null],[12,"f_files","","",83,null],[12,"f_ffree","","",83,null],[12,"f_fsid","","",83,null],[12,"f_namelen","","",83,null],[12,"f_frsize","","",83,null],[12,"f_flags","","",83,null],[12,"f_spare","","",83,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",84,null],[12,"f_frsize","","",84,null],[12,"f_blocks","","",84,null],[12,"f_bfree","","",84,null],[12,"f_bavail","","",84,null],[12,"f_files","","",84,null],[12,"f_ffree","","",84,null],[12,"f_favail","","",84,null],[12,"f_fsid","","",84,null],[12,"f_flag","","",84,null],[12,"f_namemax","","",84,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",85,null],[12,"exponent","","",85,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",86,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",87,null],[12,"swd","","",87,null],[12,"ftw","","",87,null],[12,"fop","","",87,null],[12,"rip","","",87,null],[12,"rdp","","",87,null],[12,"mxcsr","","",87,null],[12,"mxcr_mask","","",87,null],[12,"_st","","",87,null],[12,"_xmm","","",87,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",88,null],[12,"swd","","",88,null],[12,"ftw","","",88,null],[12,"fop","","",88,null],[12,"rip","","",88,null],[12,"rdp","","",88,null],[12,"mxcsr","","",88,null],[12,"mxcr_mask","","",88,null],[12,"st_space","","",88,null],[12,"xmm_space","","",88,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",89,null],[12,"r14","","",89,null],[12,"r13","","",89,null],[12,"r12","","",89,null],[12,"rbp","","",89,null],[12,"rbx","","",89,null],[12,"r11","","",89,null],[12,"r10","","",89,null],[12,"r9","","",89,null],[12,"r8","","",89,null],[12,"rax","","",89,null],[12,"rcx","","",89,null],[12,"rdx","","",89,null],[12,"rsi","","",89,null],[12,"rdi","","",89,null],[12,"orig_rax","","",89,null],[12,"rip","","",89,null],[12,"cs","","",89,null],[12,"eflags","","",89,null],[12,"rsp","","",89,null],[12,"ss","","",89,null],[12,"fs_base","","",89,null],[12,"gs_base","","",89,null],[12,"ds","","",89,null],[12,"es","","",89,null],[12,"fs","","",89,null],[12,"gs","","",89,null],[3,"user","","",null,null],[12,"regs","","",90,null],[12,"u_fpvalid","","",90,null],[12,"i387","","",90,null],[12,"u_tsize","","",90,null],[12,"u_dsize","","",90,null],[12,"u_ssize","","",90,null],[12,"start_code","","",90,null],[12,"start_stack","","",90,null],[12,"signal","","",90,null],[12,"u_ar0","","",90,null],[12,"u_fpstate","","",90,null],[12,"magic","","",90,null],[12,"u_comm","","",90,null],[12,"u_debugreg","","",90,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",91,null],[12,"fpregs","","",91,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",92,null],[12,"uc_link","","",92,null],[12,"uc_stack","","",92,null],[12,"uc_mcontext","","",92,null],[12,"uc_sigmask","","",92,null],[3,"ipc_perm","","",null,null],[12,"__key","","",93,null],[12,"uid","","",93,null],[12,"gid","","",93,null],[12,"cuid","","",93,null],[12,"cgid","","",93,null],[12,"mode","","",93,null],[12,"__seq","","",93,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",94,null],[12,"shm_segsz","","",94,null],[12,"shm_atime","","",94,null],[12,"shm_dtime","","",94,null],[12,"shm_ctime","","",94,null],[12,"shm_cpid","","",94,null],[12,"shm_lpid","","",94,null],[12,"shm_nattch","","",94,null],[3,"termios2","","",null,null],[12,"c_iflag","","",95,null],[12,"c_oflag","","",95,null],[12,"c_cflag","","",95,null],[12,"c_lflag","","",95,null],[12,"c_line","","",95,null],[12,"c_cc","","",95,null],[12,"c_ispeed","","",95,null],[12,"c_ospeed","","",95,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lru_cache"] = {"doc":"A simple LRU cache.","items":[[3,"LRUCache","lru_cache","A LRU cache using a statically-sized array for storage.",null,null],[3,"CacheIndex","","An opaque token used as an index into an LRUCache.",null,null],[3,"Entry","","An entry in an LRUCache.",null,null],[3,"LRUCacheIterator","","Immutable iterator over values in an LRUCache, from most-recently-used to least-recently-used.",null,null],[3,"LRUCacheMutIterator","","Mutable iterator over values in an LRUCache, from most-recently-used to least-recently-used.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"num_entries","","Returns the number of elements in the cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"touch","","Touch a given entry, putting it first in the list.",0,{"inputs":[{"name":"self"},{"name":"cacheindex"}],"output":null}],[11,"front","","Returns the front entry in the list (most recently used).",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Returns a mutable reference to the front entry in the list (most recently used).",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate over the contents of this cache, from more to less recently used.",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucacheiterator"}}],[11,"iter_mut","","Iterate mutably over the contents of this cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucachemutiterator"}}],[11,"lookup","","Performs a lookup on the cache with the given test routine. Touches the result on a hit.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert","","Insert a given key in the cache.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"evict_all","","Evict all elements from the cache.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LRUCache"],[3,"LRUCacheIterator"],[3,"LRUCacheMutIterator"]]};
searchIndex["mac"] = {"doc":"mac","items":[[0,"test","mac","Macros for writing test suites.",null,null],[0,"mem","","Macros for low-level memory manipulation.",null,null],[0,"format","","Macros for string formatting.",null,null],[0,"syntax_ext","","Macros useful when writing procedural syntax extensions.",null,null],[0,"matches","","Pattern Matching macros.",null,null],[0,"inspect","","Inspect Macros",null,null],[0,"cfg","","Macros for conditional compilation.",null,null],[14,"test_eq","","Generate a test function `$name` which asserts that `$left` and `$right` are equal.",null,null],[14,"addrs_of","","Make a tuple of the addresses of some of a struct's fields.",null,null],[14,"format_if","","Conditionally perform string formatting.",null,null],[14,"ext_bail","","Call `span_err` on an `ExtCtxt` and return `DummyResult::any`.",null,null],[14,"ext_bail_if","","`ext_bail!` if the condition `$e` is true.",null,null],[14,"ext_expect","","Unwrap the `Option` `$e`, or `ext_bail!`.",null,null],[14,"matches","","Returns true if an expression matches a pattern.",null,null],[14,"inspect","","Evaluates an expression, prints a stringified version of the expression along with the evaluated value, and then returns that value.",null,null],[14,"match_cfg","","Compile-time matching on config variables.",null,null],[14,"if_cfg","","Compile-time conditional expression.",null,null],[14,"unwrap_or_return","","Unwraps an `Option` or returns from the function with the specified return value.",null,null],[14,"do_while","","Do-while loop.",null,null]],"paths":[]};
searchIndex["malloc_size_of"] = {"doc":"A crate for measuring the heap usage of data structures in a way that integrates with Firefox's memory reporting, particularly the use of mozjemalloc and DMD.","items":[[3,"MallocSizeOfOps","malloc_size_of","Operations used when measuring heap usage of data structures.",null,null],[8,"MallocSizeOf","","Trait for measuring the \"deep\" heap usage of a data structure. This is the most commonly-used of the traits.",null,null],[10,"size_of","","Measure the heap usage of all descendant heap-allocated structures, but not the space taken up by the value itself.",0,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[8,"MallocShallowSizeOf","","Trait for measuring the \"shallow\" heap usage of a container.",null,null],[10,"shallow_size_of","","Measure the heap usage of immediate heap-allocated descendant structures, but not the space taken up by the value itself. Anything beyond the immediate descendants must be measured separately, using iteration.",1,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[8,"MallocUnconditionalSizeOf","","Like `MallocSizeOf`, but with a different name so it cannot be used accidentally with derive(MallocSizeOf). For use with types like `Rc` and `Arc` when appropriate (e.g. when measuring a \"primary\" reference).",null,null],[10,"unconditional_size_of","","Measure the heap usage of all heap-allocated descendant structures, but not the space taken up by the value itself.",2,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[8,"MallocUnconditionalShallowSizeOf","","`MallocUnconditionalSizeOf` combined with `MallocShallowSizeOf`.",null,null],[10,"unconditional_shallow_size_of","","`unconditional_size_of` combined with `shallow_size_of`.",3,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[8,"MallocConditionalSizeOf","","Like `MallocSizeOf`, but only measures if the value hasn't already been measured. For use with types like `Rc` and `Arc` when appropriate (e.g. when there is no \"primary\" reference).",null,null],[10,"conditional_size_of","","Measure the heap usage of all heap-allocated descendant structures, but not the space taken up by the value itself, and only if that heap usage hasn't already been measured.",4,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[8,"MallocConditionalShallowSizeOf","","`MallocConditionalSizeOf` combined with `MallocShallowSizeOf`.",null,null],[10,"conditional_shallow_size_of","","`conditional_size_of` combined with `shallow_size_of`.",5,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"new","","",6,null],[11,"malloc_size_of","","Call `size_of_op` on `ptr`, first checking that the allocation isn't empty, because some types (such as `Vec`) utilize empty allocations.",6,null],[11,"malloc_enclosing_size_of","","Call `enclosing_size_of_op` on `ptr`, which must not be empty.",6,null],[11,"have_seen_ptr","","Call `have_seen_ptr_op` on `ptr`.",6,null],[14,"size_of_is_0","","For use on types where size_of() returns 0.",null,null]],"paths":[[8,"MallocSizeOf"],[8,"MallocShallowSizeOf"],[8,"MallocUnconditionalSizeOf"],[8,"MallocUnconditionalShallowSizeOf"],[8,"MallocConditionalSizeOf"],[8,"MallocConditionalShallowSizeOf"],[3,"MallocSizeOfOps"]]};
searchIndex["malloc_size_of_derive"] = {"doc":"A crate for deriving the MallocSizeOf trait.","items":[[5,"expand_token_stream","malloc_size_of_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["markup5ever"] = {"doc":"","items":[[3,"LocalNameStaticSet","markup5ever","",null,null],[3,"PrefixStaticSet","","",null,null],[3,"NamespaceStaticSet","","",null,null],[3,"SmallCharSet","","Represents a set of \"small characters\", those with Unicode scalar values less than 64.",null,null],[12,"bits","","",0,null],[0,"data","","",null,null],[7,"C1_REPLACEMENTS","markup5ever::data","The spec replaces most characters in the ISO-2022 C1 control code range (U+0080 through U+009F) with these characters, based on Windows 8-bit codepages.",null,null],[7,"NAMED_ENTITIES","","",null,null],[0,"interface","markup5ever","",null,null],[3,"ExpandedName","markup5ever::interface","https://www.w3.org/TR/REC-xml-names/#dt-expname",null,null],[12,"ns","","",1,null],[12,"local","","",1,null],[3,"QualName","","A name with a namespace. Fully qualified name. Used to depict names of tags and attributes.",null,null],[12,"prefix","","",2,null],[12,"ns","","",2,null],[12,"local","","",2,null],[3,"Attribute","","A tag attribute.",null,null],[12,"name","","",3,null],[12,"value","","",3,null],[0,"tree_builder","","",null,null],[3,"ElementFlags","markup5ever::interface::tree_builder","",null,null],[12,"template","","A document fragment should be created, associated with the element, and returned in TreeSink::get_template_contents",4,null],[12,"mathml_annotation_xml_integration_point","","This boolean should be recorded with the element and returned in TreeSink::is_mathml_annotation_xml_integration_point",4,null],[4,"NodeOrText","","Something which can be inserted into the DOM.",null,null],[13,"AppendNode","","",5,null],[13,"AppendText","","",5,null],[4,"QuirksMode","","A document's quirks mode.",null,null],[13,"Quirks","","",6,null],[13,"LimitedQuirks","","",6,null],[13,"NoQuirks","","",6,null],[4,"NextParserState","","Whether to interrupt further parsing of the current input until the next explicit resumption of the tokenizer, or continue without any interruption.",null,null],[13,"Suspend","","Stop further parsing.",7,null],[13,"Continue","","Continue without interruptions.",7,null],[5,"create_element","","",null,null],[8,"TreeSink","","",null,null],[16,"Handle","","`Handle` is a reference to a DOM node.  The tree builder requires that a `Handle` implements `Clone` to get another reference to the same node.",8,null],[16,"Output","","The overall result of parsing.",8,null],[10,"finish","","Consume this sink and return the overall result of parsing.",8,null],[10,"parse_error","","Signal a parse error.",8,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[10,"get_document","","Get a handle to the `Document` node.",8,null],[10,"elem_name","","What is the name of this element?",8,null],[10,"create_element","","Create an element.",8,null],[10,"create_comment","","Create a comment node.",8,null],[10,"create_pi","","Create a Processing Instruction node.",8,null],[10,"append","","Append a node as the last child of the given node.  If this would produce adjacent sibling text nodes, it should concatenate the text instead.",8,null],[10,"append_based_on_parent_node","","When the insertion point is decided by the existence of a parent node of the element, we consider both possibilities and send the element which will be used if a parent node exists, along with the element to be used if there isn't one.",8,null],[10,"append_doctype_to_document","","Append a `DOCTYPE` element to the `Document` node.",8,{"inputs":[{"name":"self"},{"name":"strtendril"},{"name":"strtendril"},{"name":"strtendril"}],"output":null}],[11,"mark_script_already_started","","Mark a HTML `<script>` as \"already started\".",8,null],[11,"pop","","Indicate that a node was popped off the stack of open elements.",8,null],[10,"get_template_contents","","Get a handle to a template's template contents. The tree builder promises this will never be called with something else than a template element.",8,null],[10,"same_node","","Do two handles refer to the same node?",8,null],[11,"same_tree","","Are two handles present in the same tree",8,null],[10,"set_quirks_mode","","Set the document's quirks mode.",8,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":null}],[10,"has_parent_node","","Does the node have a parent?",8,null],[10,"append_before_sibling","","Append a node as the sibling immediately before the given node. This method will only be called if has_parent_node(sibling) is true",8,null],[10,"add_attrs_if_missing","","Add each attribute to the given element, if no attribute with that name already exists. The tree builder promises this will never be called with something else than an element.",8,null],[11,"associate_with_form","","Associate the given form-associatable element with the form element",8,null],[10,"remove_from_parent","","Detach the given node from its parent.",8,null],[10,"reparent_children","","Remove all the children from node and append them to new_parent.",8,null],[11,"is_mathml_annotation_xml_integration_point","","Returns true if the adjusted current node is an HTML integration point and the token is a start tag.",8,null],[11,"set_current_line","","Called whenever the line number changes.",8,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"complete_script","","Indicate that a `script` element is complete.",8,null],[8,"Tracer","","Trace hooks for a garbage-collected DOM.",null,null],[16,"Handle","","",9,null],[10,"trace_handle","","Upon a call to `trace_handles`, the tree builder will call this method for each handle in its internal state.",9,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"nextparserstate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nextparserstate"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"elementflags"}}],[11,"clone","markup5ever::interface","",1,{"inputs":[{"name":"self"}],"output":{"name":"expandedname"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"expandedname"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"qualname"}}],[11,"new","","",2,{"inputs":[{"name":"option"},{"name":"namespace"},{"name":"localname"}],"output":{"name":"qualname"}}],[11,"expanded","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expandedname"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rcdom","markup5ever","A simple reference-counted DOM.",null,null],[3,"Node","markup5ever::rcdom","A DOM node.",null,null],[12,"parent","","Parent node.",10,null],[12,"children","","Child nodes of this node.",10,null],[12,"data","","Represents this node's data.",10,null],[3,"RcDom","","The DOM itself; the result of parsing.",null,null],[12,"document","","The `Document` itself.",11,null],[12,"errors","","Errors that occurred during parsing.",11,null],[12,"quirks_mode","","The document's quirks mode.",11,null],[4,"NodeData","","The different kinds of nodes in the DOM.",null,null],[13,"Document","","The `Document` itself.",12,null],[13,"Doctype","","A `DOCTYPE` with name, public id, and system id.",12,null],[12,"name","markup5ever::rcdom::NodeData","",12,null],[12,"public_id","","",12,null],[12,"system_id","","",12,null],[13,"Text","markup5ever::rcdom","A text node.",12,null],[12,"contents","markup5ever::rcdom::NodeData","",12,null],[13,"Comment","markup5ever::rcdom","A comment.",12,null],[12,"contents","markup5ever::rcdom::NodeData","",12,null],[13,"Element","markup5ever::rcdom","An element with attributes.",12,null],[12,"name","markup5ever::rcdom::NodeData","",12,null],[12,"attrs","","",12,null],[12,"template_contents","","For HTML  elements, the template contents https://html.spec.whatwg.org/multipage/#template-contents",12,null],[12,"mathml_annotation_xml_integration_point","","https://html.spec.whatwg.org/multipage/#html-integration-point",12,null],[13,"ProcessingInstruction","markup5ever::rcdom","A Processing instruction.",12,null],[12,"target","markup5ever::rcdom::NodeData","",12,null],[12,"contents","","",12,null],[6,"Handle","markup5ever::rcdom","Reference to a DOM node.",null,null],[6,"WeakHandle","","Weak reference to a DOM node, used for parent pointers.",null,null],[11,"finish","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse_error","","",11,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"get_document","","",11,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"get_template_contents","","",11,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"handle"}}],[11,"set_quirks_mode","","",11,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":null}],[11,"same_node","","",11,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"elem_name","","",11,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"expandedname"}}],[11,"create_element","","",11,{"inputs":[{"name":"self"},{"name":"qualname"},{"name":"vec"},{"name":"elementflags"}],"output":{"name":"handle"}}],[11,"create_comment","","",11,{"inputs":[{"name":"self"},{"name":"strtendril"}],"output":{"name":"handle"}}],[11,"create_pi","","",11,{"inputs":[{"name":"self"},{"name":"strtendril"},{"name":"strtendril"}],"output":{"name":"handle"}}],[11,"has_parent_node","","",11,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"append","","",11,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"nodeortext"}],"output":null}],[11,"append_before_sibling","","",11,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"nodeortext"}],"output":null}],[11,"append_based_on_parent_node","","",11,null],[11,"append_doctype_to_document","","",11,{"inputs":[{"name":"self"},{"name":"strtendril"},{"name":"strtendril"},{"name":"strtendril"}],"output":null}],[11,"add_attrs_if_missing","","",11,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"vec"}],"output":null}],[11,"remove_from_parent","","",11,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[11,"reparent_children","","",11,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"handle"}],"output":null}],[11,"is_mathml_annotation_xml_integration_point","","",11,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"rcdom"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"traversalscope"}],"output":{"name":"result"}}],[0,"serialize","markup5ever","",null,null],[4,"TraversalScope","markup5ever::serialize","",null,null],[13,"IncludeNode","","",14,null],[13,"ChildrenOnly","","",14,null],[6,"AttrRef","","",null,null],[8,"Serialize","","",null,null],[10,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"s"},{"name":"traversalscope"}],"output":{"name":"result"}}],[8,"Serializer","","",null,null],[10,"start_elem","","",16,{"inputs":[{"name":"self"},{"name":"qualname"},{"name":"attriter"}],"output":{"name":"result"}}],[10,"end_elem","","",16,{"inputs":[{"name":"self"},{"name":"qualname"}],"output":{"name":"result"}}],[10,"write_text","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_comment","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_doctype","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"write_processing_instruction","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"traversalscope"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"traversalscope"}],"output":{"name":"bool"}}],[11,"nonmember_prefix_len","markup5ever","Count the number of bytes of characters at the beginning of `buf` which are not in the set. See `tokenizer::buffer_queue::pop_except_from`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[0,"smallcharset","","",null,null],[3,"SmallCharSet","markup5ever::smallcharset","Represents a set of \"small characters\", those with Unicode scalar values less than 64.",null,null],[12,"bits","","",0,null],[0,"buffer_queue","markup5ever","",null,null],[3,"BufferQueue","markup5ever::buffer_queue","A queue of owned string buffers, which supports incrementally consuming characters.",null,null],[4,"SetResult","","Result from `pop_except_from`.",null,null],[13,"FromSet","","",17,null],[13,"NotFromSet","","",17,null],[6,"LocalName","markup5ever","",null,null],[6,"Prefix","","",null,null],[6,"Namespace","","",null,null],[11,"get","","",18,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"get","","",19,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"get","","",20,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",20,{"inputs":[],"output":{"name":"u32"}}],[14,"small_char_set","","",null,null],[14,"local_name","","",null,null],[14,"namespace_prefix","","",null,null],[14,"namespace_url","","",null,null],[14,"ns","","",null,null],[14,"expanded_name","","",null,null],[11,"eq","markup5ever::buffer_queue","",17,{"inputs":[{"name":"self"},{"name":"setresult"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"setresult"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty BufferQueue.",21,{"inputs":[],"output":{"name":"bufferqueue"}}],[11,"is_empty","","Returns whether the queue is empty.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop_front","","Get the tendril at the beginning of the queue.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Add a buffer to the beginning of the queue.",21,{"inputs":[{"name":"self"},{"name":"strtendril"}],"output":null}],[11,"push_back","","Add a buffer to the end of the queue.",21,{"inputs":[{"name":"self"},{"name":"strtendril"}],"output":null}],[11,"peek","","Look at the next available character, if any.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","Get the next character, if one is available.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_except_from","","Pops and returns either a single character from the given set, or a `StrTendril` of characters none of which are in the set.  The set is represented as a bitmask and so can only contain the first 64 ASCII characters.",21,{"inputs":[{"name":"self"},{"name":"smallcharset"}],"output":{"name":"option"}}],[11,"eat","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"option"}}]],"paths":[[3,"SmallCharSet"],[3,"ExpandedName"],[3,"QualName"],[3,"Attribute"],[3,"ElementFlags"],[4,"NodeOrText"],[4,"QuirksMode"],[4,"NextParserState"],[8,"TreeSink"],[8,"Tracer"],[3,"Node"],[3,"RcDom"],[4,"NodeData"],[6,"Handle"],[4,"TraversalScope"],[8,"Serialize"],[8,"Serializer"],[4,"SetResult"],[3,"LocalNameStaticSet"],[3,"PrefixStaticSet"],[3,"NamespaceStaticSet"],[3,"BufferQueue"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"] = {"doc":"num_cpus","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"fix","","Fixpoint combinator for rust closures, generalized over the return type.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"ref_eq","","Compare if a and b are equal as pointers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if a and b are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"char","","Extra functions for `char`",null,null],[3,"EncodeUtf8Error","odds::char","Placeholder",null,null],[5,"encode_utf8","","Encode a char into buf using UTF-8.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf8error"}}],[0,"string","odds","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",null,null],[3,"CharStr","","A single-char string.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",2,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",2,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",2,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/, otherwise return `None`",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","Panics if `index` is out of bounds.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charchunks"}}],[10,"char_windows","","Return an iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charwindows"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"charchunks"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"charwindows"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new string from `c`.",11,{"inputs":[{"name":"char"}],"output":{"name":"charstr"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"vec","odds","Extensions to `Vec`",null,null],[5,"vec","odds::vec","Create a new vec from the iterable",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[8,"VecExt","","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",12,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"VecFindRemove","","",null,null],[16,"Item","","",13,null],[10,"find_remove","","Linear search for the first element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind_remove","","Linear search for the last element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[0,"slice","odds","Extra functions for slices",null,null],[3,"MendSlices","odds::slice","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"RevSlice","","A reversed view of a slice.",null,null],[5,"shared_prefix","","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[5,"rotate_left","","Rotate `steps` towards lower indices.",null,null],[5,"split_aligned_for","","Split the input slice into three chunks, so that the middle chunk is a slice of a larger \"block size\" (for example T could be u64) that is correctly aligned for `T`.",null,null],[0,"unalign","","",null,null],[3,"UnalignedIter","odds::slice::unalign","An iterator of `T` (by value) where each value read using an unaligned load.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Create an `UnalignedIter` from `ptr` and `end`, which must be spaced an whole number of `T` offsets apart.",14,null],[11,"from_slice","","Create an `UnalignedIter` out of the slice of data, which iterates first in blocks of `T` (unaligned loads), and then leaves a tail of the remaining bytes.",14,null],[11,"tail","","Return a byte iterator of the remaining tail of the iterator; this can be called at any time, but in particular when the iterator has returned None.",14,{"inputs":[{"name":"self"}],"output":{"name":"slicecopyiter"}}],[11,"has_tail","","Return `true` if the tail is not empty.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek_next","","Return the next iterator element, without stepping the iterator.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"iter","odds::slice","",null,null],[3,"SliceCopyIter","odds::slice::iter","Slice (contiguous data) iterator.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",15,null],[11,"into_raw","","Return the start, end pointer of the iterator",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,null],[11,"default","","Create an empty `SliceCopyIter`.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SliceFind","odds::slice","Element-finding methods for slices",null,null],[16,"Item","","",16,null],[10,"find","","Linear search for the first occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind","","Linear search for the last occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[8,"SliceFindSplit","","Element-finding methods for slices",null,null],[16,"Item","","",17,null],[10,"find_split","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split","","Linear search for the last occurrence  `elt` in the slice.",17,null],[10,"find_split_mut","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split_mut","","Linear search for the last occurrence  `elt` in the slice.",17,null],[8,"SliceIterExt","","Extra iterator adaptors for iterators of slice elements.",null,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",18,{"inputs":[{"name":"self"}],"output":{"name":"mendslices"}}],[8,"MendSlice","","A trait for items that can maybe be joined together.",null,null],[8,"Pod","","\"plain old data\": Types that we can stick arbitrary bit patterns into, and thus use them as blocks in `split_aligned_for` or in `UnalignedIter`.",null,null],[11,"find","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"rfind","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the length of the slice.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inner_ref","","",19,null],[11,"inner_mut","","",19,null],[11,"into_boxed_slice","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"iter","","Return a by-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"iter_mut","","Return a by-mutable-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"split_at","","",19,null],[11,"split_at_mut","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"revslice"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[0,"stride","odds","Slice iterator with custom step size",null,null],[3,"Stride","odds::stride","(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[11,"from_ptr_len","","Create a Stride iterator from a raw pointer.",21,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",22,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",21,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",21,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",22,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",22,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[0,"prelude","odds","prelude of often used traits and functions",null,null],[8,"IndexRange","","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"EncodeUtf8Error"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[3,"CharStr"],[8,"VecExt"],[8,"VecFindRemove"],[3,"UnalignedIter"],[3,"SliceCopyIter"],[8,"SliceFind"],[8,"SliceFindSplit"],[8,"SliceIterExt"],[3,"RevSlice"],[3,"MendSlices"],[3,"Stride"],[3,"StrideMut"],[8,"IndexRange"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"orderedfloat"}}],[11,"into_inner","","Get the value out.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"notnan"}}],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"floatisnan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"floatisnan"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",10,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",10,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"UnparkResult","parking_lot_core","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",0,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",0,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",0,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",1,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",3,null],[13,"Invalid","","The validation callback returned false.",3,null],[13,"TimedOut","","The timeout expired.",3,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",4,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",4,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",4,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_UNPARK_TOKEN","parking_lot_core","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null]],"paths":[[3,"UnparkResult"],[3,"UnparkToken"],[3,"ParkToken"],[4,"ParkResult"],[4,"RequeueOp"],[4,"FilterOp"],[3,"SpinWait"]]};
searchIndex["pdqsort"] = {"doc":"Pattern-defeating quicksort.","items":[[5,"sort","pdqsort","Sorts a slice.",null,null],[5,"sort_by_key","","Sorts a slice using `f` to extract a key to compare elements by.",null,null],[5,"sort_by","","Sorts a slice using `compare` to compare elements.",null,null]],"paths":[]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_codegen"] = {"doc":"A set of builders to generate Rust source for PHF data structures at compile time.","items":[[3,"Map","phf_codegen","A builder for the `phf::Map` type.",null,null],[3,"Set","","A builder for the `phf::Set` type.",null,null],[3,"OrderedMap","","A builder for the `phf::OrderedMap` type.",null,null],[3,"OrderedSet","","A builder for the `phf::OrderedSet` type.",null,null],[11,"new","","Creates a new `phf::Map` builder.",0,{"inputs":[],"output":{"name":"map"}}],[11,"phf_path","","Set the path to the `phf` crate from the global namespace",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"map"}}],[11,"entry","","Adds an entry to the builder.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"str"}],"output":{"name":"map"}}],[11,"build","","Constructs a `phf::Map`, outputting Rust source to the provided writer.",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `phf::Set` builder.",1,{"inputs":[],"output":{"name":"set"}}],[11,"phf_path","","Set the path to the `phf` crate from the global namespace",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"set"}}],[11,"entry","","Adds an entry to the builder.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"set"}}],[11,"build","","Constructs a `phf::Set`, outputting Rust source to the provided writer.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a enw `phf::OrderedMap` builder.",2,{"inputs":[],"output":{"name":"orderedmap"}}],[11,"phf_path","","Set the path to the `phf` crate from the global namespace",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"orderedmap"}}],[11,"entry","","Adds an entry to the builder.",2,{"inputs":[{"name":"self"},{"name":"k"},{"name":"str"}],"output":{"name":"orderedmap"}}],[11,"build","","Constructs a `phf::OrderedMap`, outputting Rust source to the provided writer.",2,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `phf::OrderedSet` builder.",3,{"inputs":[],"output":{"name":"orderedset"}}],[11,"phf_path","","Set the path to the `phf` crate from the global namespace",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"orderedset"}}],[11,"entry","","Adds an entry to the builder.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"orderedset"}}],[11,"build","","Constructs a `phf::OrderedSet`, outputting Rust source to the provided writer.",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Map"],[3,"Set"],[3,"OrderedMap"],[3,"OrderedSet"]]};
searchIndex["phf_generator"] = {"doc":"","items":[[3,"HashState","phf_generator","",null,null],[12,"key","","",0,null],[12,"disps","","",0,null],[12,"map","","",0,null],[5,"generate_hash","","",null,null]],"paths":[[3,"HashState"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["precomputed_hash"] = {"doc":"A base trait to expose a precomputed hash for a type.","items":[[8,"PrecomputedHash","precomputed_hash","A trait to expose a precomputed hash for a type.",null,null],[10,"precomputed_hash","","Return the precomputed hash for this item.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[8,"PrecomputedHash"]]};
searchIndex["procedural_masquerade"] = {"doc":"Custom `derive` pretending to be functional procedural macros on Rust 1.15","items":[[14,"define_proc_macros","procedural_masquerade","This macro wraps `&str -> String` functions in custom `derive` implementations with `#[proc_macro_derive]`.",null,null],[14,"define_invoke_proc_macro","","This macro expands to the definition of another macro (whose name is given as a parameter).",null,null]],"paths":[]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[3,"ThreadPool","","ThreadPool",null,null],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[0,"collections","","This module contains the parallel iterator types for standard collections. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[3,"Chain","rayon::iter","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","",null,null],[3,"Rev","","",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[4,"Either","","Represents a value of one of two possible types.",null,null],[13,"Left","","",18,null],[13,"Right","","",18,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",19,null],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"drive_unindexed","","",21,null],[11,"drive_unindexed","","",22,null],[11,"drive_unindexed","","",23,null],[0,"internal","","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",24,null],[10,"callback","","",24,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[16,"Item","","",25,null],[16,"IntoIter","","",25,null],[10,"into_iter","","",25,null],[11,"min_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",25,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",26,null],[16,"Reducer","","",26,null],[16,"Result","","",26,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",26,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",26,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",27,null],[10,"consume","","Consume next item and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",27,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",28,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off_left","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",29,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[16,"Item","","",30,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",30,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"drive_unindexed","rayon::iter","",31,null],[11,"drive_unindexed","","",32,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"drive_unindexed","","",36,null],[11,"opt_len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",36,null],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",36,null],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",37,null],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",37,null],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"drive_unindexed","","",44,null],[8,"IntoParallelIterator","","",null,null],[16,"Iter","","",45,null],[16,"Item","","",45,null],[10,"into_par_iter","","",45,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",46,null],[16,"Item","","",46,null],[10,"par_iter","","",46,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",47,null],[16,"Item","","",47,null],[10,"par_iter_mut","","",47,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",48,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",48,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",48,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",48,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",48,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",48,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",48,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",48,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",48,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",49,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",49,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",49,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the conversion from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","",50,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","",51,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","This module contains the parallel iterator types for options (`Option<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::option","Parallel iterator over an option",null,null],[3,"Iter","","Parallel iterator over an immutable reference to an option",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to an option",null,null],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",52,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",54,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","This module contains the parallel iterator types for ranges (`Range<T>`); this is the type for values created by a `a..b` expression. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"Iter","rayon::range","Parallel iterator over a range",null,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"drive_unindexed","","",55,null],[0,"result","rayon","This module contains the parallel iterator types for results (`Result<T, E>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"drive_unindexed","","",56,null],[11,"opt_len","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",56,null],[11,"len","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",56,null],[11,"drive_unindexed","","",57,null],[11,"opt_len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",57,null],[11,"len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",57,null],[11,"drive_unindexed","","",58,null],[11,"opt_len","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",58,null],[11,"len","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",58,null],[0,"slice","rayon","This module contains the parallel iterator types for slices (`[T]`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",59,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",60,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"drive_unindexed","","",61,null],[11,"opt_len","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",61,null],[11,"len","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",61,null],[11,"drive_unindexed","","",62,null],[11,"opt_len","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",62,null],[11,"len","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",62,null],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",63,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",65,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",67,null],[0,"str","rayon","This module contains extension methods for `String` that expose parallel iterators, such as `par_split_whitespace()`. You will rarely need to interact with it directly, since if you add `use rayon::prelude::*` to your file, that will include the helper traits defined in this module.",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",68,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",68,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",68,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",68,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",69,null],[11,"drive_unindexed","","",70,null],[11,"drive_unindexed","","",71,null],[11,"drive_unindexed","","",72,null],[11,"drive_unindexed","","",73,null],[0,"vec","rayon","This module contains the parallel iterator types for vectors (`Vec<T>`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",74,null],[11,"new","rayon","Creates and return a valid rayon thread pool configuration, but does not initialize it.",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"configuration"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Set the stack size of the worker threads",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",75,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"drop","","",76,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",76,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",76,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",76,null],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",77,null]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"Configuration"],[3,"ThreadPool"],[3,"Scope"]]};
searchIndex["rayon_core"] = {"doc":"","items":[[3,"ThreadPool","rayon_core","ThreadPool",null,null],[3,"Scope","","",null,null],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"name":"option"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",1,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Set the stack size of the worker threads",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"Configuration"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[4,"OnUnwind","","Run on scope exit through unwinding.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[5,"guard_on_unwind","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"should_run","","",2,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",3,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[4,"OnUnwind"],[3,"ScopeGuard"]]};
searchIndex["selectors"] = {"doc":"","items":[[0,"attr","selectors","",null,null],[3,"AttrSelectorWithNamespace","selectors::attr","",null,null],[12,"namespace","","",0,null],[12,"local_name","","",0,null],[12,"local_name_lower","","",0,null],[12,"operation","","",0,null],[12,"never_matches","","",0,null],[4,"NamespaceConstraint","","",null,null],[13,"Any","","",1,null],[13,"Specific","","Empty string for no namespace",1,null],[4,"ParsedAttrSelectorOperation","","",null,null],[13,"Exists","","",2,null],[13,"WithValue","","",2,null],[12,"operator","selectors::attr::ParsedAttrSelectorOperation","",2,null],[12,"case_sensitivity","","",2,null],[12,"expected_value","","",2,null],[4,"AttrSelectorOperation","selectors::attr","",null,null],[13,"Exists","","",3,null],[13,"WithValue","","",3,null],[12,"operator","selectors::attr::AttrSelectorOperation","",3,null],[12,"case_sensitivity","","",3,null],[12,"expected_value","","",3,null],[4,"AttrSelectorOperator","selectors::attr","",null,null],[13,"Equal","","",4,null],[13,"Includes","","",4,null],[13,"DashMatch","","",4,null],[13,"Prefix","","",4,null],[13,"Substring","","",4,null],[13,"Suffix","","",4,null],[4,"ParsedCaseSensitivity","","",null,null],[13,"CaseSensitive","","",5,null],[13,"AsciiCaseInsensitive","","",5,null],[13,"AsciiCaseInsensitiveIfInHtmlElementInHtmlDocument","","",5,null],[4,"CaseSensitivity","","",null,null],[13,"CaseSensitive","","",6,null],[13,"AsciiCaseInsensitive","","",6,null],[7,"SELECTOR_WHITESPACE","","The definition of whitespace per CSS Selectors Level 3 § 4.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attrselectorwithnamespace"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attrselectorwithnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attrselectorwithnamespace"}],"output":{"name":"bool"}}],[11,"namespace","","",0,{"inputs":[{"name":"self"}],"output":{"name":"namespaceconstraint"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"namespaceconstraint"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"namespaceconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"namespaceconstraint"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parsedattrselectoroperation"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parsedattrselectoroperation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parsedattrselectoroperation"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attrselectoroperation"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attrselectoroperation"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"attrselectoroperation"}],"output":{"name":"bool"}}],[11,"eval_str","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"attrselectoroperator"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"attrselectoroperator"}],"output":{"name":"bool"}}],[11,"to_css","","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"eval_str","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parsedcasesensitivity"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parsedcasesensitivity"}],"output":{"name":"bool"}}],[11,"to_unconditional","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"casesensitivity"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"casesensitivity"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[11,"eq","","",6,null],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[0,"bloom","selectors","Counting and non-counting Bloom filters tuned for use as ancestor filters for selector matching.",null,null],[3,"CountingBloomFilter","selectors::bloom","A counting Bloom filter with parameterized storage to handle counters of different sizes.  For now we assume that having two hash functions is enough, but we may revisit that decision later.",null,null],[3,"BloomStorageU8","","Storage class for a CountingBloomFilter that has 8-bit counters.",null,null],[3,"BloomStorageBool","","Storage class for a CountingBloomFilter that has 1-bit counters.",null,null],[6,"BloomFilter","","A counting Bloom filter with 8-bit counters.",null,null],[6,"NonCountingBloomFilter","","A non-counting Bloom filter.",null,null],[17,"BLOOM_HASH_MASK","","",null,null],[8,"BloomStorage","","",null,null],[10,"slot_is_empty","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"adjust_slot","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[10,"is_zeroed","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first_slot_is_empty","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"second_slot_is_empty","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"adjust_first_slot","","",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"adjust_second_slot","","",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"first_slot_index","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"usize"}}],[11,"second_slot_index","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"countingbloomfilter"}}],[11,"new","","Creates a new bloom filter.",8,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"is_zeroed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert_hash","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"insert","","Inserts an item into the bloom filter.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove_hash","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"remove","","Removes an item from the bloom filter.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"might_contain_hash","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"might_contain","","Check whether the filter might contain an item.  This can sometimes return true even if the item is not in the filter, but will never return false for items that are actually in the filter.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adjust_slot","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"slot_is_empty","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_zeroed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"adjust_slot","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"slot_is_empty","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_zeroed","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"context","selectors","",null,null],[3,"NthIndexCache","selectors::context","A cache to speed up matching of nth-index-like selectors.",null,null],[3,"MatchingContext","","Data associated with the matching process for a element.  This context is used across many selectors for an element, so it's not appropriate for transient data that applies to only a single selector.",null,null],[12,"matching_mode","","Input with the matching mode we should use when matching selectors.",11,null],[12,"bloom_filter","","Input with the bloom filter used to fast-reject selectors.",11,null],[12,"visited_handling","","Input that controls how matching for links is handled.",11,null],[12,"relevant_link_found","","Output that records whether we encountered a \"relevant link\" while matching any selector for this element. (This differs from `RelevantLinkStatus` which tracks the status for the current selector only.)",11,null],[4,"MatchingMode","","What kind of selector matching mode we should use.",null,null],[13,"Normal","","Don't ignore any pseudo-element selectors.",12,null],[13,"ForStatelessPseudoElement","","Ignores any stateless pseudo-element selectors in the rightmost sequence of simple selectors.",12,null],[4,"VisitedHandlingMode","","The mode to use when matching unvisited and visited links.",null,null],[13,"AllLinksUnvisited","","All links are matched as if they are unvisted.",13,null],[13,"AllLinksVisitedAndUnvisited","","All links are matched as if they are visited and unvisited (both :link and :visited match).",13,null],[13,"RelevantLinkVisited","","A element's \"relevant link\" is the element being matched if it is a link or the nearest ancestor link. The relevant link is matched as though it is visited, and all other links are matched as if they are unvisited.",13,null],[4,"QuirksMode","","Which quirks mode is this document in.",null,null],[13,"Quirks","","Quirks mode.",14,null],[13,"LimitedQuirks","","Limited quirks mode.",14,null],[13,"NoQuirks","","No quirks mode.",14,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"matchingmode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"matchingmode"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"visitedhandlingmode"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"visitedhandlingmode"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"classes_and_ids_case_sensitivity","","",14,{"inputs":[{"name":"self"}],"output":{"name":"casesensitivity"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"nthindexcache"}}],[11,"new","","Constructs a new `MatchingContext`.",11,{"inputs":[{"name":"matchingmode"},{"name":"option"},{"name":"option"},{"name":"quirksmode"}],"output":{"name":"self"}}],[11,"new_for_visited","","Constructs a new `MatchingContext` for use in visited matching.",11,{"inputs":[{"name":"matchingmode"},{"name":"option"},{"name":"option"},{"name":"visitedhandlingmode"},{"name":"quirksmode"}],"output":{"name":"self"}}],[11,"quirks_mode","","The quirks mode of the document.",11,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"classes_and_ids_case_sensitivity","","The case-sensitivity for class and ID selectors",11,{"inputs":[{"name":"self"}],"output":{"name":"casesensitivity"}}],[0,"matching","selectors","",null,null],[3,"ElementSelectorFlags","selectors::matching","Set of flags that are set on either the element or its parent (depending on the flag) if the element could potentially match a selector.",null,null],[3,"LocalMatchingContext","","Holds per-selector data alongside a pointer to MatchingContext.",null,null],[12,"shared","","Shared `MatchingContext`.",16,null],[12,"selector","","A reference to the base selector we're matching against.",16,null],[12,"nesting_level","","The level of nesting for the selector being matched.",16,null],[12,"hover_active_quirk_disabled","","Holds a bool flag to see whether :active and :hover quirk should try to match or not. This flag can only be true in the case PseudoElements are encountered when matching mode is ForStatelessPseudoElement.",16,null],[4,"RelevantLinkStatus","","Tracks whether we are currently looking for relevant links for a given complex selector. A \"relevant link\" is the element being matched if it is a link or the nearest ancestor link.",null,null],[13,"Looking","","Looking for a possible relevant link.  This is the initial mode when matching a selector.",17,null],[13,"NotLooking","","Not looking for a relevant link.  We transition to this mode if we encounter a sibiling combinator (since only ancestor combinators are allowed for this purpose).",17,null],[13,"Found","","Found a relevant link for the element being matched.",17,null],[4,"CompoundSelectorMatchingResult","","Whether a compound selector matched, and whether it was the rightmost selector inside the complex selector.",null,null],[13,"Matched","","The compound selector matched, and the next combinator offset is `next_combinator_offset`.",18,null],[12,"next_combinator_offset","selectors::matching::CompoundSelectorMatchingResult","",18,null],[13,"NotMatched","selectors::matching","The selector didn't match.",18,null],[5,"matches_selector_list","","",null,{"inputs":[{"name":"selectorlist"},{"name":"e"},{"name":"matchingcontext"}],"output":{"name":"bool"}}],[5,"matches_selector","","Matches a selector, fast-rejecting against a bloom filter.",null,{"inputs":[{"name":"selector"},{"name":"usize"},{"name":"option"},{"name":"e"},{"name":"matchingcontext"},{"name":"f"}],"output":{"name":"bool"}}],[5,"matches_compound_selector","","Matches a compound selector belonging to `selector`, starting at offset `from_offset`, matching left to right.",null,{"inputs":[{"name":"selector"},{"name":"usize"},{"name":"matchingcontext"},{"name":"e"}],"output":{"name":"compoundselectormatchingresult"}}],[5,"matches_complex_selector","","Matches a complex selector.",null,{"inputs":[{"name":"selectoriter"},{"name":"e"},{"name":"localmatchingcontext"},{"name":"f"}],"output":{"name":"bool"}}],[7,"RECOMMENDED_SELECTOR_BLOOM_FILTER_SIZE","","",null,null],[17,"HAS_SLOW_SELECTOR","","When a child is added or removed from the parent, all the children must be restyled, because they may match :nth-last-child, :last-of-type, :nth-last-of-type, or :only-of-type.",null,null],[17,"HAS_SLOW_SELECTOR_LATER_SIBLINGS","","When a child is added or removed from the parent, any later children must be restyled, because they may match :nth-child, :first-of-type, or :nth-of-type.",null,null],[17,"HAS_EDGE_CHILD_SELECTOR","","When a child is added or removed from the parent, the first and last children must be restyled, because they may match :first-child, :last-child, or :only-child.",null,null],[17,"HAS_EMPTY_SELECTOR","","The element has an empty selector, so when a child is appended we might need to restyle the parent completely.",null,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"elementselectorflags"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"ordering"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",19,{"inputs":[],"output":{"name":"elementselectorflags"}}],[11,"all","","Returns the set containing all flags.",19,{"inputs":[],"output":{"name":"elementselectorflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",19,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",19,{"inputs":[{"name":"usize"}],"output":{"name":"elementselectorflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"elementselectorflags"}}],[11,"bitor_assign","","Adds the set of flags.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"elementselectorflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"elementselectorflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"elementselectorflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",19,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",19,{"inputs":[{"name":"self"}],"output":{"name":"elementselectorflags"}}],[11,"extend","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",19,{"inputs":[{"name":"t"}],"output":{"name":"elementselectorflags"}}],[11,"for_self","","Returns the subset of flags that apply to the element.",19,{"inputs":[{"name":"self"}],"output":{"name":"elementselectorflags"}}],[11,"for_parent","","Returns the subset of flags that apply to the parent.",19,{"inputs":[{"name":"self"}],"output":{"name":"elementselectorflags"}}],[11,"new","","Constructs a new `LocalMatchingContext`.",16,{"inputs":[{"name":"matchingcontext"},{"name":"selector"}],"output":{"name":"self"}}],[11,"active_hover_quirk_matches","","Returns true if current compound selector matches :active and :hover quirk. https://quirks.spec.whatwg.org/#the-active-and-hover-quirk",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"relevantlinkstatus"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"relevantlinkstatus"}],"output":{"name":"bool"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"is_visited","","Returns whether an element is considered visited for the purposes of matching.  This is true only if the element is a link, an relevant link exists for the element, and the visited handling mode is set to accept relevant links as visited.",17,{"inputs":[{"name":"self"},{"name":"e"},{"name":"matchingcontext"}],"output":{"name":"bool"}}],[11,"is_unvisited","","Returns whether an element is considered unvisited for the purposes of matching.  Assuming the element is a link, this is always true for non-relevant links, since only relevant links can potentially be treated as visited.  If this is a relevant link, then is it unvisited if the visited handling mode is set to treat all links as unvisted (including relevant links).",17,{"inputs":[{"name":"self"},{"name":"e"},{"name":"matchingcontext"}],"output":{"name":"bool"}}],[0,"parser","selectors","",null,null],[3,"SelectorList","selectors::parser","",null,null],[12,"0","","",20,null],[3,"AncestorHashes","","Ancestor hashes for the bloom filter. We precompute these and store them inline with selectors to optimize cache performance during matching. This matters a lot.",null,null],[12,"packed_hashes","","",21,null],[3,"Selector","","A Selector stores a sequence of simple selectors and combinators. The iterator classes allow callers to iterate at either the raw sequence level or at the level of sequences of simple selectors separated by combinators. Most callers want the higher-level iterator.",null,null],[3,"SelectorIter","","",null,null],[3,"LocalName","","",null,null],[12,"name","","",22,null],[12,"lower_name","","",22,null],[4,"SelectorParseError","","",null,null],[13,"PseudoElementInComplexSelector","","",23,null],[13,"NoQualifiedNameInAttributeSelector","","",23,null],[13,"EmptySelector","","",23,null],[13,"DanglingCombinator","","",23,null],[13,"NonSimpleSelectorInNegation","","",23,null],[13,"UnexpectedTokenInAttributeSelector","","",23,null],[13,"PseudoElementExpectedColon","","",23,null],[13,"PseudoElementExpectedIdent","","",23,null],[13,"NoIdentForPseudo","","",23,null],[13,"UnsupportedPseudoClassOrElement","","",23,null],[13,"UnexpectedIdent","","",23,null],[13,"ExpectedNamespace","","",23,null],[13,"ExpectedBarInAttr","","",23,null],[13,"BadValueInAttr","","",23,null],[13,"InvalidQualNameInAttr","","",23,null],[13,"ExplicitNamespaceUnexpectedToken","","",23,null],[13,"ClassNeedsIdent","","",23,null],[13,"EmptyNegation","","",23,null],[13,"Custom","","",23,null],[4,"Combinator","","",null,null],[13,"Child","","",24,null],[13,"Descendant","","",24,null],[13,"NextSibling","","",24,null],[13,"LaterSibling","","",24,null],[13,"PseudoElement","","A dummy combinator we use to the left of pseudo-elements.",24,null],[4,"Component","","A CSS simple selector or combinator. We store both in the same enum for optimal packing and cache performance, see [1].",null,null],[13,"Combinator","","",25,null],[13,"ExplicitAnyNamespace","","",25,null],[13,"ExplicitNoNamespace","","",25,null],[13,"DefaultNamespace","","",25,null],[13,"Namespace","","",25,null],[13,"ExplicitUniversalType","","",25,null],[13,"LocalName","","",25,null],[13,"ID","","",25,null],[13,"Class","","",25,null],[13,"AttributeInNoNamespaceExists","","",25,null],[12,"local_name","selectors::parser::Component","",25,null],[12,"local_name_lower","","",25,null],[13,"AttributeInNoNamespace","selectors::parser","",25,null],[12,"local_name","selectors::parser::Component","",25,null],[12,"local_name_lower","","",25,null],[12,"operator","","",25,null],[12,"value","","",25,null],[12,"case_sensitivity","","",25,null],[12,"never_matches","","",25,null],[13,"AttributeOther","selectors::parser","",25,null],[13,"Negation","","",25,null],[13,"FirstChild","","",25,null],[13,"LastChild","","",25,null],[13,"OnlyChild","","",25,null],[13,"Root","","",25,null],[13,"Empty","","",25,null],[13,"NthChild","","",25,null],[13,"NthLastChild","","",25,null],[13,"NthOfType","","",25,null],[13,"NthLastOfType","","",25,null],[13,"FirstOfType","","",25,null],[13,"LastOfType","","",25,null],[13,"OnlyOfType","","",25,null],[13,"NonTSPseudoClass","","",25,null],[13,"PseudoElement","","",25,null],[5,"namespace_empty_string","","",null,null],[5,"is_css2_pseudo_element","","Returns whether the name corresponds to a CSS2 pseudo-element that can be specified with the single colon syntax (in addition to the double-colon syntax, which can be used for all pseudo-elements).",null,{"inputs":[{"name":"cowrcstr"}],"output":{"name":"bool"}}],[8,"PseudoElement","","A trait that represents a pseudo-element.",null,null],[16,"Impl","","The `SelectorImpl` this pseudo-element is used for.",26,null],[11,"supports_pseudo_class","","Whether the pseudo-element supports a given state selector to the right of it.",26,null],[8,"SelectorImpl","","This trait allows to define the parser implementation in regards of pseudo-classes/elements",null,null],[16,"AttrValue","","",27,null],[16,"Identifier","","",27,null],[16,"ClassName","","",27,null],[16,"LocalName","","",27,null],[16,"NamespaceUrl","","",27,null],[16,"NamespacePrefix","","",27,null],[16,"BorrowedNamespaceUrl","","",27,null],[16,"BorrowedLocalName","","",27,null],[16,"NonTSPseudoClass","","non tree-structural pseudo-classes (see: https://drafts.csswg.org/selectors/#structural-pseudos)",27,null],[16,"PseudoElement","","pseudo-elements",27,null],[10,"is_active_or_hover","","Returns whether the given pseudo class is :active or :hover.",27,null],[8,"Parser","","",null,null],[16,"Impl","","",28,null],[16,"Error","","",28,null],[11,"is_pseudo_element_allows_single_colon","","Whether the name is a pseudo-element that can be specified with the single colon syntax in addition to the double-colon syntax.",28,{"inputs":[{"name":"cowrcstr"}],"output":{"name":"bool"}}],[11,"parse_non_ts_pseudo_class","","This function can return an \"Err\" pseudo-element in order to support CSS2.1 pseudo-elements.",28,{"inputs":[{"name":"self"},{"name":"cowrcstr"}],"output":{"name":"result"}}],[11,"parse_non_ts_functional_pseudo_class","","",28,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"cssparser"}],"output":{"name":"result"}}],[11,"parse_pseudo_element","","",28,{"inputs":[{"name":"self"},{"name":"cowrcstr"}],"output":{"name":"result"}}],[11,"parse_functional_pseudo_element","","",28,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"cssparser"}],"output":{"name":"result"}}],[11,"default_namespace","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"namespace_for_prefix","","",28,null],[8,"SelectorMethods","","",null,null],[16,"Impl","","",29,null],[10,"visit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"selectorparseerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"selectorparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"selectorparseerror"}],"output":{"name":"bool"}}],[11,"into","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"selectorlist"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"selectorlist"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"selectorlist"}],"output":{"name":"bool"}}],[11,"parse","","Parse a comma-separated list of Selectors. https://drafts.csswg.org/selectors/#grouping",20,{"inputs":[{"name":"p"},{"name":"cssparser"}],"output":{"name":"result"}}],[11,"from_vec","","Creates a SelectorList from a Vec of selectors. Used in tests.",20,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"ancestorhashes"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size_of","","",21,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"ancestorhashes"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"ancestorhashes"}],"output":{"name":"bool"}}],[11,"new","","",21,{"inputs":[{"name":"selector"},{"name":"quirksmode"}],"output":{"name":"self"}}],[11,"fourth_hash","","Returns the fourth hash, reassembled from parts.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"visit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"selector"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"bool"}}],[11,"specificity","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"has_pseudo_element","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pseudo_element","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_universal","","Whether this selector (pseudo-element part excluded) matches every element.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over this selector in matching order (right-to-left). When a combinator is reached, the iterator will return None, and next_sequence() may be called to continue to the next sequence.",30,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"iter_from","","Returns an iterator over this selector in matching order (right-to-left), skipping the rightmost |offset| Components.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"selectoriter"}}],[11,"combinator_at","","Returns the combinator at index `index` (one-indexed from the right), or panics if the component is not a combinator.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinator"}}],[11,"iter_raw_match_order","","Returns an iterator over the entire sequence of simple selectors and combinators, in matching order (from right to left).",30,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_raw_parse_order_from","","Returns an iterator over the sequence of simple selectors and combinators, in parse order (from left to right), starting 'offset_from_right' entries from the past-the-end sentinel on the right. So \"0\" panics,. \"1\" iterates nothing, and \"len\" iterates the entire sequence.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"rev"}}],[11,"from_vec","","Creates a Selector from a vec of Components, specified in parse order. Used in tests.",30,{"inputs":[{"name":"vec"},{"name":"u32"}],"output":{"name":"self"}}],[11,"len","","Returns count of simple selectors and combinators in the Selector.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"thin_arc_heap_ptr","","Returns the address on the heap of the ThinArc for memory reporting.",30,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"next_sequence","","Prepares this iterator to point to the next sequence to the left, returning the combinator if the sequence was found.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"selector_length","","Returns remaining count of the simple selectors and combinators in the Selector.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"combinator"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"combinator"}],"output":{"name":"bool"}}],[11,"is_ancestor","","Returns true if this combinator is a child or descendant combinator.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pseudo_element","","Returns true if this combinator is a pseudo-element combinator.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sibling","","Returns true if this combinator is a next- or later-sibling combinator.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"is_combinator","","Returns true if this is a combinator.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_combinator","","Returns the value as a combinator if applicable, None otherwise.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"localname"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"localname"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"localname"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","selectors::attr","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","selectors::parser","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",24,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",25,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","selectors::attr","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","selectors::parser","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Parse a selector, without any pseudo-element.",30,{"inputs":[{"name":"p"},{"name":"cssparser"}],"output":{"name":"result"}}],[0,"sink","selectors","Small helpers to abstract over different containers.",null,null],[8,"Push","selectors::sink","A trait to abstract over a `push` method that may be implemented for different kind of types.",null,null],[10,"push","","Push a value into self.",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"visitor","selectors","Visitor traits for selectors.",null,null],[8,"SelectorVisitor","selectors::visitor","A trait to visit selector properties.",null,null],[16,"Impl","","The selector implementation this visitor wants to visit.",33,null],[11,"visit_attribute_selector","","Visit an attribute selector that may match (there are other selectors that may never match, like those containing whitespace or the empty string).",33,null],[11,"visit_simple_selector","","Visit a simple selector.",33,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"visit_complex_selector","","Visits a complex selector.",33,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[8,"Element","selectors","",null,null],[16,"Impl","","",34,null],[10,"parent_element","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pseudo_element_originating_element","","The parent of a given pseudo-element, after matching a pseudo-element selector.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"first_child_element","","Skips non-element nodes",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last_child_element","","Skips non-element nodes",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"prev_sibling_element","","Skips non-element nodes",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"next_sibling_element","","Skips non-element nodes",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_html_element_in_html_document","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_local_name","","",34,null],[10,"get_namespace","","Empty string for no namespace",34,null],[10,"attr_matches","","",34,null],[10,"match_non_ts_pseudo_class","","",34,null],[10,"match_pseudo_element","","",34,null],[10,"is_link","","Whether this element is a `link`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_id","","",34,null],[10,"has_class","","",34,null],[10,"is_empty","","Returns whether this element matches `:empty`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_root","","Returns whether this element matches `:root`, i.e. whether it is the root element of a document.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ignores_nth_child_selectors","","Returns whether this element should ignore matching nth child selector.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"blocks_ancestor_combinators","","Return true if we want to stop lookup ancestor of the current element while matching complex selectors with descendant/child combinator.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pseudo_element_originating_element","","The parent of a given pseudo-element, after matching a pseudo-element selector.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ignores_nth_child_selectors","","Returns whether this element should ignore matching nth child selector.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"blocks_ancestor_combinators","","Return true if we want to stop lookup ancestor of the current element while matching complex selectors with descendant/child combinator.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"AttrSelectorWithNamespace"],[4,"NamespaceConstraint"],[4,"ParsedAttrSelectorOperation"],[4,"AttrSelectorOperation"],[4,"AttrSelectorOperator"],[4,"ParsedCaseSensitivity"],[4,"CaseSensitivity"],[8,"BloomStorage"],[3,"CountingBloomFilter"],[3,"BloomStorageU8"],[3,"BloomStorageBool"],[3,"MatchingContext"],[4,"MatchingMode"],[4,"VisitedHandlingMode"],[4,"QuirksMode"],[3,"NthIndexCache"],[3,"LocalMatchingContext"],[4,"RelevantLinkStatus"],[4,"CompoundSelectorMatchingResult"],[3,"ElementSelectorFlags"],[3,"SelectorList"],[3,"AncestorHashes"],[3,"LocalName"],[4,"SelectorParseError"],[4,"Combinator"],[4,"Component"],[8,"PseudoElement"],[8,"SelectorImpl"],[8,"Parser"],[8,"SelectorMethods"],[3,"Selector"],[3,"SelectorIter"],[8,"Push"],[8,"SelectorVisitor"],[8,"Element"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"name":"option"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["servo_arc"] = {"doc":"Fork of Arc for Servo. This has the following advantages over std::Arc: * We don't waste storage on the weak reference count. * We don't do extra RMU operations to handle the possibility of weak references. * We can experiment with arena allocation (todo). * We can add methods to support our custom use cases [1]. * We have support for dynamically-sized types (see from_header_and_iter). * We have support for thin arcs to unsized types (see ThinArc).","items":[[3,"NonZeroPtrMut","servo_arc","Wrapper type for pointers to get the non-zero optimization. When NonZero/Shared/Unique are stabilized, we should just use Shared here to get the same effect. Gankro is working on this in [1].",null,null],[3,"Arc","","",null,null],[3,"UniqueArc","","An Arc that is known to be uniquely owned",null,null],[3,"HeaderSlice","","Structure to allow Arc-managing some fixed-sized data and a variably-sized slice in a single allocation.",null,null],[12,"header","","The fixed-sized data.",0,null],[12,"slice","","The dynamically-sized data.",0,null],[3,"HeaderWithLength","","Header data with an inline length. Consumers that use HeaderWithLength as the Header type in HeaderSlice can take advantage of ThinArc.",null,null],[12,"header","","The fixed-sized data.",1,null],[3,"ThinArc","","",null,null],[3,"RawOffsetArc","","An Arc, except it holds a pointer to the T instead of to the entire ArcInner.",null,null],[3,"ArcBorrow","","A \"borrowed Arc\". This is a pointer to a T that is known to have been allocated within an Arc.",null,null],[11,"new","","",2,null],[11,"ptr","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Construct a new UniqueArc",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"shareable","","Convert to a shareable Arc once we're done using it",3,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_raw","","",4,null],[11,"from_raw","","",4,null],[11,"borrow_arc","","Produce a pointer to the data that can be converted back to an arc",4,{"inputs":[{"name":"self"}],"output":{"name":"arcborrow"}}],[11,"with_raw_offset_arc","","Temporarily converts |self| into a bonafide RawOffsetArc and exposes it to the provided callback. The refcount is not modified.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"heap_ptr","","Returns the address on the heap of the Arc itself -- not the T within it -- for memory reporting.",4,null],[11,"ptr_eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_unique","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"borrow","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"headerslice"}],"output":{"name":"bool"}}],[11,"from_header_and_iter","","Creates an Arc for a HeaderSlice using the given header struct and iterator to generate the slice. The resulting Arc will be fat.",4,{"inputs":[{"name":"h"},{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"headerwithlength"}],"output":{"name":"bool"}}],[11,"new","","Creates a new HeaderWithLength.",1,{"inputs":[{"name":"h"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_arc","","Temporarily converts |self| into a bonafide Arc and exposes it to the provided callback. The refcount is not modified.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"heap_ptr","","Returns the address on the heap of the ThinArc itself -- not the T within it -- for memory reporting.",5,null],[11,"deref","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"into_thin","","Converts an Arc into a ThinArc. This consumes the Arc, so the refcount is not modified.",4,{"inputs":[{"name":"self"}],"output":{"name":"thinarc"}}],[11,"from_thin","","Converts a ThinArc into an Arc. This consumes the ThinArc, so the refcount is not modified.",4,{"inputs":[{"name":"thinarc"}],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"thinarc"}],"output":{"name":"bool"}}],[11,"deref","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"rawoffsetarc"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"rawoffsetarc"}],"output":{"name":"bool"}}],[11,"with_arc","","Temporarily converts |self| into a bonafide Arc and exposes it to the provided callback. The refcount is not modified.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"make_mut","","If uniquely owned, provide a mutable reference Else create a copy, and mutate that",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone_arc","","Clone it as an Arc",6,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"borrow_arc","","Produce a pointer to the data that can be converted back to an arc",6,{"inputs":[{"name":"self"}],"output":{"name":"arcborrow"}}],[11,"into_raw_offset","","Converts an Arc into a RawOffsetArc. This consumes the Arc, so the refcount is not modified.",4,{"inputs":[{"name":"self"}],"output":{"name":"rawoffsetarc"}}],[11,"from_raw_offset","","Converts a RawOffsetArc into an Arc. This consumes the RawOffsetArc, so the refcount is not modified.",4,{"inputs":[{"name":"rawoffsetarc"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"arcborrow"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"arcborrow"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_arc","","",7,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"from_ref","","For constructing from a reference known to be Arc-backed, e.g. if we obtain such a reference over FFI",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_arc","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"HeaderSlice"],[3,"HeaderWithLength"],[3,"NonZeroPtrMut"],[3,"UniqueArc"],[3,"Arc"],[3,"ThinArc"],[3,"RawOffsetArc"],[3,"ArcBorrow"]]};
searchIndex["servo_atoms"] = {"doc":"","items":[[3,"AtomStaticSet","servo_atoms","",null,null],[6,"Atom","","",null,null],[11,"get","","",0,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",0,{"inputs":[],"output":{"name":"u32"}}],[14,"atom","","",null,null]],"paths":[[3,"AtomStaticSet"]]};
searchIndex["servo_config"] = {"doc":"","items":[[5,"servo_version","servo_config","",null,{"inputs":[],"output":{"name":"string"}}],[0,"basedir","","Contains routines for retrieving default config directories. For linux based platforms, it uses the XDG base directory spec but provides similar abstractions for non-linux platforms.",null,null],[5,"default_config_dir","servo_config::basedir","",null,{"inputs":[],"output":{"name":"option"}}],[5,"default_data_dir","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"default_cache_dir","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"opts","servo_config","Configuration options for a single run of the servo application. Created from command line arguments.",null,null],[3,"Opts","servo_config::opts","Global flags for Servo, currently set on the command line.",null,null],[12,"is_running_problem_test","","",0,null],[12,"url","","The initial URL to load.",0,null],[12,"tile_size","","The maximum size of each tile in pixels (`-s`).",0,null],[12,"device_pixels_per_px","","The ratio of device pixels per px at the default scale. If unspecified, will use the platform default setting.",0,null],[12,"time_profiling","","`None` to disable the time profiler or `Some` to enable it with: - an interval in seconds to cause it to produce output on that interval.   (`i.e. -p 5`). - a file path to write profiling info to a TSV file upon Servo's termination.   (`i.e. -p out.tsv`). - an InfluxDB hostname to store profiling info upon Servo's termination.   (`i.e. -p http://localhost:8086`)",0,null],[12,"time_profiler_trace_path","","When the profiler is enabled, this is an optional path to dump a self-contained HTML file visualizing the traces as a timeline.",0,null],[12,"mem_profiler_period","","`None` to disable the memory profiler or `Some` with an interval in seconds to enable it and cause it to produce output on that interval (`-m`).",0,null],[12,"nonincremental_layout","","",0,null],[12,"userscripts","","Where to load userscripts from, if any. An empty string will load from the resources/user-agent-js directory, and if the option isn't passed userscripts won't be loaded",0,null],[12,"user_stylesheets","","",0,null],[12,"output_file","","",0,null],[12,"replace_surrogates","","Replace unpaires surrogates in DOM strings with U+FFFD. See https://github.com/servo/servo/issues/6564",0,null],[12,"gc_profile","","Log GC passes and their durations.",0,null],[12,"load_webfonts_synchronously","","Load web fonts synchronously to avoid non-deterministic network-driven reflows.",0,null],[12,"headless","","",0,null],[12,"hard_fail","","",0,null],[12,"bubble_inline_sizes_separately","","True if we should bubble intrinsic widths sequentially (`-b`). If this is true, then intrinsic widths are computed as a separate pass instead of during flow construction. You may wish to turn this flag on in order to benchmark style recalculation against other browser engines.",0,null],[12,"show_debug_fragment_borders","","True if we should show borders on all fragments for debugging purposes (`--show-debug-fragment-borders`).",0,null],[12,"show_debug_parallel_layout","","True if we should paint borders around flows based on which thread painted them.",0,null],[12,"enable_text_antialiasing","","If set with --disable-text-aa, disable antialiasing on fonts. This is primarily useful for reftests where pixel perfect results are required when using fonts such as the Ahem font for layout tests.",0,null],[12,"enable_subpixel_text_antialiasing","","If set with --disable-subpixel, use subpixel antialiasing for glyphs. In the future this will likely become the default, but for now it's opt-in while we work out any bugs and improve the implementation.",0,null],[12,"enable_canvas_antialiasing","","If set with --disable-canvas-aa, disable antialiasing on the HTML canvas element. Like --disable-text-aa, this is useful for reftests where pixel perfect results are required.",0,null],[12,"trace_layout","","True if each step of layout is traced to an external JSON file for debugging purposes. Settings this implies sequential layout and paint.",0,null],[12,"profile_script_events","","Periodically print out on which events script threads spend their processing time.",0,null],[12,"profile_heartbeats","","Enable all heartbeats for profiling.",0,null],[12,"debugger_port","","`None` to disable debugger or `Some` with a port number to start a server to listen to remote Firefox debugger connections.",0,null],[12,"devtools_port","","`None` to disable devtools or `Some` with a port number to start a server to listen to remote Firefox devtools connections.",0,null],[12,"webdriver_port","","`None` to disable WebDriver or `Some` with a port number to start a server to listen to remote WebDriver commands.",0,null],[12,"initial_window_size","","The initial requested size of the window.",0,null],[12,"user_agent","","An optional string allowing the user agent to be set for testing.",0,null],[12,"multiprocess","","Whether we're running in multiprocess mode.",0,null],[12,"sandbox","","Whether we're running inside the sandbox.",0,null],[12,"random_pipeline_closure_probability","","Probability of randomly closing a pipeline, used for testing the hardening of the constellation.",0,null],[12,"random_pipeline_closure_seed","","The seed for the RNG used to randomly close pipelines, used for testing the hardening of the constellation.",0,null],[12,"dump_style_tree","","Dumps the DOM after restyle.",0,null],[12,"dump_rule_tree","","Dumps the rule tree.",0,null],[12,"dump_flow_tree","","Dumps the flow tree after a layout.",0,null],[12,"dump_display_list","","Dumps the display list after a layout.",0,null],[12,"dump_display_list_json","","Dumps the display list in JSON form after a layout.",0,null],[12,"relayout_event","","Emits notifications when there is a relayout.",0,null],[12,"disable_share_style_cache","","Whether Style Sharing Cache is used",0,null],[12,"style_sharing_stats","","Whether to show in stdout style sharing cache stats after a restyle.",0,null],[12,"convert_mouse_to_touch","","Translate mouse input into touch events.",0,null],[12,"exit_after_load","","True to exit after the page load (`-x`).",0,null],[12,"no_native_titlebar","","Do not use native titlebar",0,null],[12,"enable_vsync","","Enable vsync in the compositor",0,null],[12,"webrender_stats","","True to show webrender profiling stats on screen.",0,null],[12,"webrender_debug","","True to show webrender debug on screen.",0,null],[12,"webrender_record","","True if webrender recording should be enabled.",0,null],[12,"webrender_batch","","True if webrender is allowed to batch draw calls as instances.",0,null],[12,"precache_shaders","","True to compile all webrender shaders at init time. This is mostly useful when modifying the shaders, to ensure they all compile after each change is made.",0,null],[12,"use_msaa","","True if WebRender should use multisample antialiasing.",0,null],[12,"config_dir","","Directory for a default config directory",0,null],[12,"full_backtraces","","",0,null],[12,"signpost","","True to use OS native signposting facilities. This makes profiling events (script activity, reflow, compositing, etc.) appear in Instruments.app on macOS.",0,null],[12,"is_printing_version","","Print the version and exit.",0,null],[12,"certificate_path","","Path to SSL certificates.",0,null],[12,"unminify_js","","Unminify Javascript.",0,null],[12,"print_pwm","","Print Progressive Web Metrics to console.",0,null],[3,"DebugOptions","","Debug options for Servo, currently set on the command line with -Z",null,null],[12,"help","","List all the debug options.",1,null],[12,"bubble_widths","","Bubble intrinsic widths separately like other engines.",1,null],[12,"disable_text_aa","","Disable antialiasing of rendered text.",1,null],[12,"disable_subpixel_aa","","Disable subpixel antialiasing of rendered text.",1,null],[12,"disable_canvas_aa","","Disable antialiasing of rendered text on the HTML canvas element.",1,null],[12,"dump_style_tree","","Print the DOM after each restyle.",1,null],[12,"dump_rule_tree","","Dumps the rule tree.",1,null],[12,"dump_flow_tree","","Print the flow tree after each layout.",1,null],[12,"dump_display_list","","Print the display list after each layout.",1,null],[12,"dump_display_list_json","","Print the display list in JSON form.",1,null],[12,"relayout_event","","Print notifications when there is a relayout.",1,null],[12,"profile_script_events","","Profile which events script threads spend their time on.",1,null],[12,"profile_heartbeats","","Enable all heartbeats for profiling.",1,null],[12,"show_fragment_borders","","Paint borders along fragment boundaries.",1,null],[12,"show_parallel_layout","","Mark which thread laid each flow out with colors.",1,null],[12,"trace_layout","","Write layout trace to an external file for debugging.",1,null],[12,"disable_share_style_cache","","Disable the style sharing cache.",1,null],[12,"style_sharing_stats","","Whether to show in stdout style sharing cache stats after a restyle.",1,null],[12,"convert_mouse_to_touch","","Translate mouse input into touch events.",1,null],[12,"replace_surrogates","","Replace unpaires surrogates in DOM strings with U+FFFD. See https://github.com/servo/servo/issues/6564",1,null],[12,"gc_profile","","Log GC passes and their durations.",1,null],[12,"load_webfonts_synchronously","","Load web fonts synchronously to avoid non-deterministic network-driven reflows.",1,null],[12,"disable_vsync","","Disable vsync in the compositor",1,null],[12,"webrender_stats","","Show webrender profiling stats on screen.",1,null],[12,"webrender_debug","","Show webrender debug on screen.",1,null],[12,"webrender_record","","Enable webrender recording.",1,null],[12,"webrender_disable_batch","","Enable webrender instanced draw call batching.",1,null],[12,"use_msaa","","Use multisample antialiasing in WebRender.",1,null],[12,"full_backtraces","","",1,null],[12,"precache_shaders","","True to compile all webrender shaders at init time. This is mostly useful when modifying the shaders, to ensure they all compile after each change is made.",1,null],[12,"signpost","","True to use OS native signposting facilities. This makes profiling events (script activity, reflow, compositing, etc.) appear in Instruments.app on macOS.",1,null],[4,"OutputOptions","","",null,null],[13,"DB","","Database connection config (hostname, name, user, pass)",2,null],[13,"FileName","","",2,null],[13,"Stdout","","",2,null],[4,"ArgumentParsingResult","","",null,null],[13,"ChromeProcess","","",3,null],[13,"ContentProcess","","",3,null],[5,"multiprocess","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"default_opts","","",null,{"inputs":[],"output":{"name":"opts"}}],[5,"from_cmdline_args","","",null,null],[5,"set_defaults","","",null,{"inputs":[{"name":"opts"}],"output":null}],[5,"parse_pref_from_command_line","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"get","","",null,{"inputs":[],"output":{"name":"opts"}}],[5,"parse_url_or_filename","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opts"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"debugoptions"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"outputoptions"}}],[11,"should_use_osmesa","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prefs","servo_config","",null,null],[3,"PREFS","servo_config::prefs","",null,null],[3,"Preferences","","",null,null],[4,"PrefValue","","",null,null],[13,"Boolean","","",4,null],[13,"String","","",4,null],[13,"Number","","",4,null],[13,"Missing","","",4,null],[4,"Pref","","",null,null],[13,"NoDefault","","",5,null],[13,"WithDefault","","",5,null],[5,"default_prefs","","",null,{"inputs":[],"output":{"name":"preferences"}}],[5,"read_prefs_from_file","","",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"add_user_prefs","","",null,{"inputs":[],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"preferences"}}],[11,"initialize","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"prefvalue"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"prefvalue"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"prefvalue"}],"output":{"name":"bool"}}],[11,"from_json","","",4,{"inputs":[{"name":"json"}],"output":{"name":"result"}}],[11,"as_boolean","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_json","","",4,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"prefvalue"}],"output":{"name":"pref"}}],[11,"value","","",5,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"to_json","","",5,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"get","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"arc"}}],[11,"cloned","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"is_mozbrowser_enabled","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"prefvalue"}],"output":null}],[11,"reset","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"arc"}}],[11,"reset_all","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[11,"is_webvr_enabled","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"resource_files","servo_config","",null,null],[5,"set_resources_path","servo_config::resource_files","",null,{"inputs":[{"name":"option"}],"output":null}],[5,"resources_dir_path","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"read_resource_file","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}]],"paths":[[3,"Opts"],[3,"DebugOptions"],[4,"OutputOptions"],[4,"ArgumentParsingResult"],[4,"PrefValue"],[4,"Pref"],[3,"PREFS"],[3,"Preferences"]]};
searchIndex["servo_css_parser"] = {"doc":"","items":[[5,"parse","servo_css_parser","",null,{"inputs":[{"name":"str"},{"name":"url"},{"name":"origin"},{"name":"quirksmode"},{"name":"medialist"}],"output":{"name":"servostylesheet"}}],[0,"types","","",null,null],[3,"Url","servo_css_parser::types","",null,null],[4,"QuirksMode","","Which quirks mode is this document in.",null,null],[13,"Quirks","","Quirks mode.",0,null],[13,"LimitedQuirks","","Limited quirks mode.",0,null],[13,"NoQuirks","","No quirks mode.",0,null],[3,"MediaList","","A type that encapsulates a media query list.",null,null],[12,"media_queries","","The list of media queries.",1,null],[3,"ServoStylesheet","","The structure servo uses to represent a stylesheet.",null,null],[12,"contents","","The contents of this stylesheet.",2,null],[12,"shared_lock","","The lock used for objects inside this stylesheet",2,null],[12,"media","","List of media associated with the Stylesheet.",2,null],[12,"disabled","","Whether this stylesheet should be disabled.",2,null],[4,"Origin","","Each style rule has an origin, which determines where it enters the cascade.",null,null],[13,"UserAgent","","https://drafts.csswg.org/css-cascade/#cascade-origin-user-agent",3,null],[13,"User","","https://drafts.csswg.org/css-cascade/#cascade-origin-user",3,null],[13,"Author","","https://drafts.csswg.org/css-cascade/#cascade-origin-author",3,null],[11,"from_url","","",4,{"inputs":[{"name":"url"}],"output":{"name":"servourl"}}],[11,"parse_with_base","","",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"as_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"parse","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cannot_be_a_base","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"domain","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fragment","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"origin","","",4,{"inputs":[{"name":"self"}],"output":{"name":"immutableorigin"}}],[11,"scheme","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_secure_scheme","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_chrome","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"set_username","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_ip_host","","",4,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_fragment","","",4,null],[11,"username","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_file_path","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"host","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"path_segments","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_file_path","","",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"contents","","",2,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"stylesheetcontents"}}],[11,"media","","",2,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"enabled","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"medialist"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"stylesheet"}}],[11,"to_css","","",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"url"}],"output":{"name":"servourl"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"servourl"}}],[11,"classes_and_ids_case_sensitivity","","",0,{"inputs":[{"name":"self"}],"output":{"name":"casesensitivity"}}],[11,"empty","","Create an empty MediaList.",1,{"inputs":[],"output":{"name":"medialist"}}],[11,"evaluate","","Evaluate a whole `MediaList` against `Device`.",1,{"inputs":[{"name":"self"},{"name":"device"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"is_empty","","Whether this `MediaList` contains no media queries.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"append_medium","","Append a new media query item to the media list. https://drafts.csswg.org/cssom/#dom-medialist-appendmedium",1,{"inputs":[{"name":"self"},{"name":"parsercontext"},{"name":"str"}],"output":{"name":"bool"}}],[11,"delete_medium","","Delete a media query from the media list. https://drafts.csswg.org/cssom/#dom-medialist-deletemedium",1,{"inputs":[{"name":"self"},{"name":"parsercontext"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_bytes","","Parse a stylesheet from a set of bytes, potentially received over the network.",2,null],[11,"update_from_bytes","","Updates an empty stylesheet with a set of bytes that reached over the network.",2,null],[11,"update_from_str","","Updates an empty stylesheet from a given string of text.",2,null],[11,"from_str","","Creates an empty stylesheet and parses it with a given base url, origin and media.",2,{"inputs":[{"name":"str"},{"name":"servourl"},{"name":"origin"},{"name":"arc"},{"name":"sharedrwlock"},{"name":"option"},{"name":"r"},{"name":"quirksmode"},{"name":"u32"}],"output":{"name":"stylesheet"}}],[11,"disabled","","Returns whether the stylesheet has been explicitly disabled through the CSSOM.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_disabled","","Records that the stylesheet has been explicitly disabled through the CSSOM.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}]],"paths":[[4,"QuirksMode"],[3,"MediaList"],[3,"ServoStylesheet"],[4,"Origin"],[3,"Url"]]};
searchIndex["servo_geometry"] = {"doc":"","items":[[4,"DeviceIndependentPixel","servo_geometry","A normalized \"pixel\" at the default resolution for the display.",null,null],[5,"max_rect","","",null,{"inputs":[],"output":{"name":"rect"}}],[5,"f32_rect_to_au_rect","","A helper function to convert a rect of `f32` pixels to a rect of app units.",null,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[5,"au_rect_to_f32_rect","","A helper function to convert a rect of `Au` pixels to a rect of f32 units.",null,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"deviceindependentpixel"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[4,"DeviceIndependentPixel"]]};
searchIndex["servo_rand"] = {"doc":"","items":[[8,"Rand","servo_rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",0,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",1,null],[11,"gen","","Return a random value of a `Rand` type.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",1,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",1,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",1,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",1,null],[11,"shuffle","","Shuffle a mutable slice in place.",1,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",2,null],[10,"from_seed","","Create a new RNG with the given seed.",2,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[3,"ServoRng","","",null,null],[3,"ServoThreadRng","","",null,null],[5,"thread_rng","","",null,{"inputs":[],"output":{"name":"servothreadrng"}}],[5,"random","","",null,{"inputs":[],"output":{"name":"t"}}],[11,"next_u32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_seed","","Create a manually-reseeding instane of `ServoRng`.",3,null],[11,"reseed","","Reseed the RNG.",3,null],[11,"new","","Create an auto-reseeding instance of `ServoRng`.",3,{"inputs":[],"output":{"name":"servorng"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"servothreadrng"}}],[11,"next_u32","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",4,null]],"paths":[[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"ServoRng"],[3,"ServoThreadRng"]]};
searchIndex["servo_url"] = {"doc":"","items":[[4,"Host","servo_url","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",0,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",0,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",0,null],[3,"ServoUrl","","",null,null],[0,"origin","","",null,null],[3,"OpaqueOrigin","servo_url::origin","Opaque identifier for URLs that have file or other schemes",null,null],[3,"MutableOrigin","","A representation of an origin.",null,null],[4,"ImmutableOrigin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"immutableorigin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"immutableorigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"immutableorigin"}],"output":{"name":"bool"}}],[11,"new","","",1,{"inputs":[{"name":"origin"}],"output":{"name":"immutableorigin"}}],[11,"same_origin","","",1,{"inputs":[{"name":"self"},{"name":"mutableorigin"}],"output":{"name":"bool"}}],[11,"same_origin_domain","","",1,{"inputs":[{"name":"self"},{"name":"mutableorigin"}],"output":{"name":"bool"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"immutableorigin"}}],[11,"scheme","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_url_origin","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mutableorigin"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",3,{"inputs":[{"name":"immutableorigin"}],"output":{"name":"mutableorigin"}}],[11,"immutable","","",3,{"inputs":[{"name":"self"}],"output":{"name":"immutableorigin"}}],[11,"is_tuple","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"same_origin","","",3,{"inputs":[{"name":"self"},{"name":"mutableorigin"}],"output":{"name":"bool"}}],[11,"same_origin_domain","","",3,{"inputs":[{"name":"self"},{"name":"mutableorigin"}],"output":{"name":"bool"}}],[11,"domain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_domain","","",3,{"inputs":[{"name":"self"},{"name":"host"}],"output":null}],[11,"has_domain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"effective_domain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","servo_url","",4,{"inputs":[{"name":"self"}],"output":{"name":"servourl"}}],[11,"hash","","",4,null],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"servourl"}],"output":{"name":"bool"}}],[11,"from_url","","",4,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"parse_with_base","","",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"as_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"parse","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cannot_be_a_base","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"domain","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fragment","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"origin","","",4,{"inputs":[{"name":"self"}],"output":{"name":"immutableorigin"}}],[11,"scheme","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_secure_scheme","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_chrome","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_url","","",4,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"set_username","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_ip_host","","",4,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_fragment","","",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"username","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_file_path","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"host","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"path_segments","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_file_path","","",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"host"}}]],"paths":[[4,"Host"],[4,"ImmutableOrigin"],[3,"OpaqueOrigin"],[3,"MutableOrigin"],[3,"ServoUrl"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["smallbitvec"] = {"doc":"[`SmallBitVec`] is a bit vector, a vector of single-bit values stored compactly in memory.","items":[[3,"SmallBitVec","smallbitvec","A resizable bit vector, optimized for size and inline storage.",null,null],[3,"IntoIter","","An iterator that owns a SmallBitVec and yields its bits as `bool` values.",null,null],[3,"Iter","","An iterator that borrows a SmallBitVec and yields its bits as `bool` values.",null,null],[11,"new","","Create an empty vector.",0,{"inputs":[],"output":{"name":"smallbitvec"}}],[11,"from_elem","","Create a vector containing `len` bits, each set to `val`.",0,{"inputs":[{"name":"u32"},{"name":"bool"}],"output":{"name":"smallbitvec"}}],[11,"with_capacity","","Create an empty vector with enough storage pre-allocated to store at least `cap` bits without resizing.",0,{"inputs":[{"name":"u32"}],"output":{"name":"smallbitvec"}}],[11,"len","","The number of bits stored in this bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_empty","","Returns `true` if this vector contains no bits.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of bits that can be stored in this bit vector without re-allocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get","","Get the nth bit in this bit vector.  Panics if the index is out of bounds.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"get_unchecked","","Get the nth bit in this bit vector, without bounds checks.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"set","","Set the nth bit in this bit vector to `val`.  Panics if the index is out of bounds.",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"set_unchecked","","Set the nth bit in this bit vector to `val`, without bounds checks.",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"push","","Append a bit to the end of the vector.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"pop","","Remove the last bit from the vector and return it, if there is one.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Remove the bit at index `idx`, shifting all later bits toward the front.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"clear","","Remove all elements from the vector, without deallocating its buffer.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","Reserve capacity for at least `additional` more elements to be inserted.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"iter","","Returns an iterator that yields the bits of the vector in order, as `bool` values.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"all_false","","Returns true if all the bits in the vec are set to zero/false.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all_true","","Returns true if all the bits in the vec are set to one/true.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_ptr","","If the vector owns a heap allocation, returns a pointer to the start of the allocation.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"SmallBitVec"],[3,"IntoIter"],[3,"Iter"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",3,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",3,null],[11,"push_all_move","","Append elements from an iterator.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",3,null],[11,"clear","","Remove all elements from the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",3,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",3,null],[11,"insert_many","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_slice","","",3,null],[11,"insert_from_slice","","",3,null],[11,"extend_from_slice","","",3,null],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"StringCacheHeap","string_cache::atom","A token that represents the heap used by the dynamic string cache.",null,null],[3,"PhfStrSet","","",null,null],[12,"key","","",0,null],[12,"disps","","",0,null],[12,"atoms","","",0,null],[12,"hashes","","",0,null],[3,"EmptyStaticAtomSet","","",null,null],[3,"Atom","","",null,null],[6,"DefaultAtom","","Use this if you don’t care about static atoms.",null,null],[8,"StaticAtomSet","","",null,null],[10,"get","","",1,{"inputs":[],"output":{"name":"phfstrset"}}],[10,"empty_string_index","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","",3,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"precomputed_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_ascii_uppercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_ascii_lowercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_str_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}]],"paths":[[3,"PhfStrSet"],[8,"StaticAtomSet"],[3,"StringCacheHeap"],[3,"EmptyStaticAtomSet"],[3,"Atom"]]};
searchIndex["string_cache_shared"] = {"doc":"","items":[[5,"pack_static","string_cache_shared","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null]],"paths":[]};
searchIndex["style"] = {"doc":"Calculate [specified][specified] and [computed values][computed] from a tree of DOM nodes and a set of stylesheets.","items":[[6,"Atom","style","",null,null],[6,"Prefix","","",null,null],[6,"LocalName","","",null,null],[6,"Namespace","","",null,null],[5,"serialize_comma_separated_list","","Serializes as CSS a comma-separated list of any `T` that supports being serialized as CSS.",null,null],[0,"animation","","CSS transitions and animations.",null,null],[3,"KeyframesAnimationState","style::animation","This structure represents the current keyframe animation state, i.e., the duration, the current and maximum iteration count, and the state (either playing or paused).",null,null],[12,"started_at","","The time this animation started at.",0,null],[12,"duration","","The duration of this animation.",0,null],[12,"delay","","The delay of the animation.",0,null],[12,"iteration_state","","The current iteration state for the animation.",0,null],[12,"running_state","","Werther this animation is paused.",0,null],[12,"direction","","The declared animation direction of this animation.",0,null],[12,"current_direction","","The current animation direction. This can only be `normal` or `reverse`.",0,null],[12,"expired","","Werther this keyframe animation is outdated due to a restyle.",0,null],[12,"cascade_style","","The original cascade style, needed to compute the generated keyframes of the animation.",0,null],[3,"AnimationFrame","","A single animation frame of a single property.",null,null],[12,"property_animation","","A description of the property animation that is occurring.",1,null],[12,"duration","","The duration of the animation. This is either relative in the keyframes case (a number between 0 and 1), or absolute in the transition case.",1,null],[3,"PropertyAnimation","","Represents an animation for a given property.",null,null],[4,"KeyframesIterationState","","This structure represents a keyframes animation current iteration state.",null,null],[13,"Infinite","","Infinite iterations, so no need to track a state.",2,null],[13,"Finite","","Current and max iterations.",2,null],[4,"KeyframesRunningState","","This structure represents wether an animation is actually running.",null,null],[13,"Paused","","This animation is paused. The inner field is the percentage of progress when it was paused, from 0 to 1.",3,null],[13,"Running","","This animation is actually running.",3,null],[4,"Animation","","State relating to an animation.",null,null],[13,"Transition","","A transition is just a single frame triggered at a time, with a reflow.",4,null],[13,"Keyframes","","A keyframes animation is identified by a name, and can have a node-dependent state (i.e. iteration count, etc.).",4,null],[5,"start_transitions_if_applicable","","Inserts transitions into the queue of running animations as applicable for the given style difference. This is called from the layout worker threads. Returns true if any animations were kicked off and false otherwise.",null,null],[5,"maybe_start_animations","","Triggers animations for a given node looking at the animation property values.",null,{"inputs":[{"name":"sharedstylecontext"},{"name":"sender"},{"name":"opaquenode"},{"name":"arc"}],"output":{"name":"bool"}}],[5,"update_style_for_animation_frame","","Updates a given computed style for a given animation frame. Returns a bool representing if the style was indeed updated.",null,{"inputs":[{"name":"arc"},{"name":"f64"},{"name":"f64"},{"name":"animationframe"}],"output":{"name":"bool"}}],[5,"update_style_for_animation","","Updates a single animation and associated style based on the current time. If `damage` is provided, inserts the appropriate restyle damage.",null,{"inputs":[{"name":"sharedstylecontext"},{"name":"animation"},{"name":"arc"},{"name":"fontmetricsprovider"}],"output":null}],[5,"complete_expired_transitions","","Update the style in the node when it finishes.",null,{"inputs":[{"name":"opaquenode"},{"name":"arc"},{"name":"sharedstylecontext"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"keyframesiterationstate"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"keyframesrunningstate"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"keyframesanimationstate"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"tick","","Performs a tick in the animation state, i.e., increments the counter of the current iteration count, updates times and then toggles the direction if appropriate.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update_from_other","","Updates the appropiate state from other animation.",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"timer"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"animation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mark_as_expired","","Mark this animation as expired.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"is_expired","","Whether this animation is expired.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"node","","The opaque node that owns the animation.",4,{"inputs":[{"name":"self"}],"output":{"name":"opaquenode"}}],[11,"is_paused","","Whether this animation is paused. A transition can never be paused.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_transition","","Whether this animation is a transition.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"animationframe"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"propertyanimation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"property_name","","Returns the given property name.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_transition","","Creates a new property animation for the given transition index and old and new styles.  Any number of animations may be returned, from zero (if the property did not animate) to one (for a single transition property) to arbitrarily many (for `all`).",5,{"inputs":[{"name":"usize"},{"name":"computedvalues"},{"name":"computedvalues"}],"output":{"name":"vec"}}],[11,"update","","Update the given animation at a given point of progress.",5,{"inputs":[{"name":"self"},{"name":"computedvalues"},{"name":"f64"}],"output":null}],[11,"has_the_same_end_value_as","","Whether this animation has the same end value as another one.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"applicable_declarations","style","Applicable declarations management.",null,null],[3,"ApplicableDeclarationBlock","style::applicable_declarations","A property declaration together with its precedence among rules of equal specificity so that we can sort them.",null,null],[12,"source","","The style source, either a style rule, or a property declaration block.",6,null],[12,"specificity","","The specificity of the selector this block is represented by.",6,null],[6,"ApplicableDeclarationList","","List of applicable declarations. This is a transient structure that shuttles declarations between selector matching and inserting into the rule tree, and therefore we want to avoid heap-allocation where possible.",null,null],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"applicabledeclarationblock"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"applicabledeclarationblock"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"applicabledeclarationblock"}],"output":{"name":"bool"}}],[11,"from_declarations","","Constructs an applicable declaration block from a given property declaration block and importance.",6,{"inputs":[{"name":"arc"},{"name":"cascadelevel"}],"output":{"name":"self"}}],[11,"new","","Constructs an applicable declaration block from the given components",6,{"inputs":[{"name":"stylesource"},{"name":"u32"},{"name":"cascadelevel"},{"name":"u32"}],"output":{"name":"self"}}],[11,"source_order","","Returns the source order of the block.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"level","","Returns the cascade level of the block.",6,{"inputs":[{"name":"self"}],"output":{"name":"cascadelevel"}}],[11,"order_and_level","","Convenience method to consume self and return the source alongside the level.",6,null],[0,"attr","style","Parsed representations of [DOM attributes][attr].",null,null],[3,"AttrIdentifier","style::attr","A struct that uniquely identifies an element's attribute.",null,null],[12,"local_name","","",7,null],[12,"name","","",7,null],[12,"namespace","","",7,null],[12,"prefix","","",7,null],[4,"LengthOrPercentageOrAuto","","",null,null],[13,"Auto","","",8,null],[13,"Percentage","","",8,null],[13,"Length","","",8,null],[4,"AttrValue","","",null,null],[13,"String","","",9,null],[13,"TokenList","","",9,null],[13,"UInt","","",9,null],[13,"Int","","",9,null],[13,"Double","","",9,null],[13,"Atom","","",9,null],[13,"Length","","",9,null],[13,"Color","","",9,null],[13,"Dimension","","",9,null],[13,"Url","","",9,null],[13,"Declaration","","Note that this variant is only used transitively as a fast path to set the property declaration block relevant to the style of an element when set from the inline declaration of that element (that is, `element.style`).",9,null],[5,"parse_integer","","Parse an integer according to https://html.spec.whatwg.org/multipage/#rules-for-parsing-integers.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"parse_unsigned_integer","","Parse an integer according to https://html.spec.whatwg.org/multipage/#rules-for-parsing-non-negative-integers",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"parse_double","","Parse a floating-point number according to https://html.spec.whatwg.org/multipage/#rules-for-parsing-floating-point-number-values",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_nonzero_length","","https://html.spec.whatwg.org/multipage/#rules-for-parsing-non-zero-dimension-values",null,{"inputs":[{"name":"str"}],"output":{"name":"lengthorpercentageorauto"}}],[5,"parse_legacy_color","","Parses a [legacy color][color]. If unparseable, `Err` is returned.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_length","","Parses a [dimension value][dim]. If unparseable, `Auto` is returned.",null,{"inputs":[{"name":"str"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"attrvalue"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_serialized_tokenlist","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_comma_separated_tokenlist","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_atomic_tokens","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"attrvalue"}}],[11,"from_u32","","",9,{"inputs":[{"name":"string"},{"name":"u32"}],"output":{"name":"attrvalue"}}],[11,"from_i32","","",9,{"inputs":[{"name":"string"},{"name":"i32"}],"output":{"name":"attrvalue"}}],[11,"from_double","","",9,{"inputs":[{"name":"string"},{"name":"f64"}],"output":{"name":"attrvalue"}}],[11,"from_limited_i32","","",9,{"inputs":[{"name":"string"},{"name":"i32"}],"output":{"name":"attrvalue"}}],[11,"from_limited_u32","","",9,{"inputs":[{"name":"string"},{"name":"u32"}],"output":{"name":"attrvalue"}}],[11,"from_atomic","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_url","","",9,{"inputs":[{"name":"servourl"},{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_legacy_color","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_dimension","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"from_nonzero_dimension","","",9,{"inputs":[{"name":"string"}],"output":{"name":"attrvalue"}}],[11,"as_tokens","","Assumes the `AttrValue` is a `TokenList` and returns its tokens",9,null],[11,"as_atom","","Assumes the `AttrValue` is an `Atom` and returns its value",9,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"as_color","","Assumes the `AttrValue` is a `Color` and returns its value",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_length","","Assumes the `AttrValue` is a `Length` and returns its value",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_dimension","","Assumes the `AttrValue` is a `Dimension` and returns its value",9,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"as_url","","Assumes the `AttrValue` is a `Url` and returns its value",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_uint","","Return the AttrValue as its integer representation, if any. This corresponds to attribute values returned as `AttrValue::UInt(_)` by `VirtualMethods::parse_plain_attribute()`.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_uint_px_dimension","","Return the AttrValue as a dimension computed from its integer representation, assuming that integer representation specifies pixels.",9,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"eval_selector","","",9,{"inputs":[{"name":"self"},{"name":"attrselectoroperation"}],"output":{"name":"bool"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"attridentifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"bezier","style","Parametric Bézier curves.",null,null],[3,"Bezier","style::bezier","A unit cubic Bézier curve, used for timing functions in CSS transitions and animations.",null,null],[11,"new","","Create a unit cubic Bézier curve from the two middle control points.",10,{"inputs":[{"name":"cssfloat"},{"name":"cssfloat"},{"name":"cssfloat"},{"name":"cssfloat"}],"output":{"name":"bezier"}}],[11,"solve","","Solve the bezier curve for a given `x` and an `epsilon`, that should be between zero and one.",10,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[0,"bloom","style","The style bloom filter is used as an optimization when matching deep descendant selectors.",null,null],[3,"StyleBloom","style::bloom","A struct that allows us to fast-reject deep descendant selectors avoiding selector-matching.",null,null],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create an empty `StyleBloom`. Because StyleBloom acquires the thread- local filter buffer, creating multiple live StyleBloom instances at the same time on the same thread will panic.",11,{"inputs":[],"output":{"name":"self"}}],[11,"filter","","Return the bloom filter used properly by the `selectors` crate.",11,{"inputs":[{"name":"self"}],"output":{"name":"bloomfilter"}}],[11,"push","","Push an element to the bloom filter, knowing that it's a child of the last element parent.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"is_empty","","Returns true if the bloom filter is empty.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matching_depth","","Returns the DOM depth of elements that can be correctly matched against the bloom filter (that is, the number of elements in our list).",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Clears the bloom filter.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"rebuild","","Rebuilds the bloom filter up to the parent of the given element.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"assert_complete","","In debug builds, asserts that all the parents of `element` are in the bloom filter.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"current_parent","","Get the element that represents the chain of things inserted into the filter right now.  That chain is the given element (if any) and its ancestors.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert_parents_recovering","","Insert the parents of an element in the bloom filter, trying to recover the filter if the last element inserted doesn't match.",11,{"inputs":[{"name":"self"},{"name":"e"},{"name":"usize"}],"output":null}],[0,"context","style","The context within which style is calculated.",null,null],[4,"QuirksMode","style::context","Which quirks mode is this document in.",null,null],[13,"Quirks","","Quirks mode.",12,null],[13,"LimitedQuirks","","Limited quirks mode.",12,null],[13,"NoQuirks","","No quirks mode.",12,null],[3,"ThreadLocalStyleContextCreationInfo","","This structure is used to create a local style context from a shared one.",null,null],[3,"StyleSystemOptions","","A global options structure for the style system. We use this instead of opts to abstract across Gecko and Servo.",null,null],[12,"disable_style_sharing_cache","","Whether the style sharing cache is disabled.",13,null],[12,"dump_style_statistics","","Whether we should dump statistics about the style system.",13,null],[12,"style_statistics_threshold","","The minimum number of elements that must be traversed to trigger a dump of style statistics.",13,null],[3,"SharedStyleContext","","A shared style context.",null,null],[12,"stylist","","The CSS selector stylist.",14,null],[12,"visited_styles_enabled","","Whether visited styles are enabled.",14,null],[12,"options","","Configuration options.",14,null],[12,"guards","","Guards for pre-acquired locks",14,null],[12,"timer","","The current timer for transitions and animations. This is needed to test them.",14,null],[12,"traversal_flags","","Flags controlling how we traverse the tree.",14,null],[12,"snapshot_map","","A map with our snapshots in order to handle restyle hints.",14,null],[12,"running_animations","","The animations that are currently running.",14,null],[12,"expired_animations","","The list of animations that have expired since the last style recalculation.",14,null],[12,"registered_speculative_painters","","Paint worklets",14,null],[12,"local_context_creation_data","","Data needed to create the thread-local style context from the shared one.",14,null],[3,"CascadeInputs","","The structure holds various intermediate inputs that are eventually used by by the cascade.",null,null],[12,"rules","","The rule node representing the ordered list of rules matched for this node.",15,null],[12,"visited_rules","","The rule node representing the ordered list of rules matched for this node if visited, only computed if there's a relevant link for this element. A element's \"relevant link\" is the element being matched if it is a link or the nearest ancestor link.",15,null],[3,"EagerPseudoCascadeInputs","","A list of cascade inputs for eagerly-cascaded pseudo-elements. The list is stored inline.",null,null],[3,"ElementCascadeInputs","","The cascade inputs associated with a node, including those for any pseudo-elements.",null,null],[12,"primary","","The element's cascade inputs.",16,null],[12,"pseudos","","A list of the inputs for the element's eagerly-cascaded pseudo-elements.",16,null],[3,"CurrentElementInfo","","Information about the current element being processed. We group this together into a single struct within ThreadLocalStyleContext so that we can instantiate and destroy it easily at the beginning and end of element processing.",null,null],[12,"possibly_expired_animations","","A Vec of possibly expired animations. Used only by Servo.",17,null],[3,"TraversalStatistics","","Statistics gathered during the traversal. We gather statistics on each thread and then combine them after the threads join via the Add implementation below.",null,null],[12,"elements_traversed","","The total number of elements traversed.",18,null],[12,"elements_styled","","The number of elements where has_styles() went from false to true.",18,null],[12,"elements_matched","","The number of elements for which we performed selector matching.",18,null],[12,"styles_shared","","The number of cache hits from the StyleSharingCache.",18,null],[12,"styles_reused","","The number of styles reused via rule node comparison from the StyleSharingCache.",18,null],[12,"selectors","","The number of selectors in the stylist.",18,null],[12,"revalidation_selectors","","The number of revalidation selectors.",18,null],[12,"dependency_selectors","","The number of state/attr dependencies in the dependency set.",18,null],[12,"declarations","","The number of declarations in the stylist.",18,null],[12,"stylist_rebuilds","","The number of times the stylist was rebuilt.",18,null],[12,"traversal_time_ms","","Time spent in the traversal, in milliseconds.",18,null],[12,"is_parallel","","Whether this was a parallel traversal.",18,null],[12,"is_large","","Whether this is a \"large\" traversal.",18,null],[3,"SelectorFlagsMap","","Map from Elements to ElementSelectorFlags. Used to defer applying selector flags until after the traversal.",null,null],[3,"SequentialTaskList","","A list of SequentialTasks that get executed on Drop.",null,null],[3,"StackLimitChecker","","A helper type for stack limit checking.  This assumes that stacks grow down, which is true for all non-ancient CPU architectures.",null,null],[3,"ThreadLocalStyleContext","","A thread-local style context.",null,null],[12,"sharing_cache","","A cache to share style among siblings.",19,null],[12,"rule_cache","","A cache from matched properties to elements that match those.",19,null],[12,"bloom_filter","","The bloom filter used to fast-reject selector-matching.",19,null],[12,"new_animations_sender","","A channel on which new animations that have been triggered by style recalculation can be sent.",19,null],[12,"tasks","","A set of tasks to be run (on the parent thread) in sequential mode after the rest of the styling is complete. This is useful for infrequently-needed non-threadsafe operations.",19,null],[12,"selector_flags","","ElementSelectorFlags that need to be applied after the traversal is complete. This map is used in cases where the matching algorithm needs to set flags on elements it doesn't have exclusive access to (i.e. other than the current element).",19,null],[12,"statistics","","Statistics about the traversal.",19,null],[12,"current_element_info","","Information related to the current element, non-None during processing.",19,null],[12,"font_metrics_provider","","The struct used to compute and cache font metrics from style for evaluation of the font-relative em/ch units and font-size",19,null],[12,"stack_limit_checker","","A checker used to ensure that parallel.rs does not recurse indefinitely even on arbitrarily deep trees.  See Gecko bug 1376883.",19,null],[12,"nth_index_cache","","A cache for nth-index-like selectors.",19,null],[3,"StyleContext","","A `StyleContext` is just a simple container for a immutable reference to a shared style context, and a mutable reference to a local one.",null,null],[12,"shared","","The shared style context reference.",20,null],[12,"thread_local","","The thread-local style context (mutable) reference.",20,null],[4,"SequentialTask","","A task to be run in sequential mode on the parent (non-worker) thread. This is used by the style system to queue up work which is not safe to do during the parallel traversal.",null,null],[13,"Unused","","Entry to avoid an unused type parameter error on servo.",21,null],[4,"ReflowGoal","","Why we're doing reflow.",null,null],[13,"ForDisplay","","We're reflowing in order to send a display list to the screen.",22,null],[13,"ForScriptQuery","","We're reflowing in order to satisfy a script query. No display list will be created.",22,null],[8,"RegisteredSpeculativePainter","","A registered painter",null,null],[10,"name","","The name it was registered with",23,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[10,"properties","","The properties it was registered with",23,{"inputs":[{"name":"self"}],"output":{"name":"fnvhashmap"}}],[8,"RegisteredSpeculativePainters","","A set of registered painters",null,null],[10,"get","","Look up a speculative painter",24,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"option"}}],[11,"new","","Trivially constructs a `ThreadLocalStyleContextCreationInfo`.",25,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"stylesystemoptions"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"viewport_size","","Return a suitable viewport size in order to be used for viewport units.",14,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"device_pixel_ratio","","The device pixel ratio",14,{"inputs":[{"name":"self"}],"output":{"name":"scalefactor"}}],[11,"quirks_mode","","The quirks mode of the document.",14,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cascadeinputs"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"cascadeinputs"}}],[11,"new_from_style","","Construct inputs from previous cascade results, if any.",15,{"inputs":[{"name":"computedvalues"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_array","","Returns the list of rules, if they exist.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"elementcascadeinputs"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_from_element_data","","Construct inputs from previous cascade results, if any.",16,{"inputs":[{"name":"elementdata"}],"output":{"name":"self"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"traversalstatistics"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"finish","","Computes the traversal time given the start time in seconds.",18,{"inputs":[{"name":"self"},{"name":"d"},{"name":"bool"},{"name":"f64"}],"output":null}],[11,"is_large_traversal","","Returns whether this traversal is 'large' in order to avoid console spam from lots of tiny traversals.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"execute","","Executes this task.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty SelectorFlagsMap.",27,{"inputs":[],"output":{"name":"self"}}],[11,"insert_flags","","Inserts some flags into the map for a given element.",27,{"inputs":[{"name":"self"},{"name":"e"},{"name":"elementselectorflags"}],"output":null}],[11,"apply_flags","","Applies the flags. Must be called on the main thread.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",28,null],[11,"deref_mut","","",28,null],[11,"drop","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new limit checker, for this thread, allowing further use of up to |stack_size| bytes beyond (below) the current stack pointer.",29,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"limit_exceeded","","Checks whether the previously stored stack limit has now been exceeded.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ThreadLocalStyleContext` from a shared one.",19,{"inputs":[{"name":"sharedstylecontext"}],"output":{"name":"self"}}],[11,"begin_element","","Notes when the style system starts traversing an element.",19,{"inputs":[{"name":"self"},{"name":"e"},{"name":"elementdata"}],"output":null}],[11,"end_element","","Notes when the style system finishes traversing an element.",19,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"is_initial_style","","Returns true if the current element being traversed is being styled for the first time.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"reflowgoal"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"reflowgoal"}],"output":{"name":"bool"}}],[0,"counter_style","style","The [`@counter-style`][counter-style] at-rule.",null,null],[3,"CounterStyleRuleData","style::counter_style","An @counter-style rule",null,null],[3,"Negative","","https://drafts.csswg.org/css-counter-styles/#counter-style-negative",null,null],[12,"0","","",30,null],[12,"1","","",30,null],[3,"Ranges","","https://drafts.csswg.org/css-counter-styles/#counter-style-range",null,null],[12,"0","","",31,null],[3,"Pad","","https://drafts.csswg.org/css-counter-styles/#counter-style-pad",null,null],[12,"0","","",32,null],[12,"1","","",32,null],[3,"Fallback","","https://drafts.csswg.org/css-counter-styles/#counter-style-fallback",null,null],[12,"0","","",33,null],[3,"Symbols","","https://drafts.csswg.org/css-counter-styles/#descdef-counter-style-symbols",null,null],[12,"0","","",34,null],[3,"AdditiveSymbols","","https://drafts.csswg.org/css-counter-styles/#descdef-counter-style-additive-symbols",null,null],[12,"0","","",35,null],[3,"AdditiveTuple",""," && ",null,null],[12,"weight","","",36,null],[12,"symbol","","",36,null],[4,"System","","https://drafts.csswg.org/css-counter-styles/#counter-style-system",null,null],[13,"Cyclic","","'cyclic'",37,null],[13,"Numeric","","'numeric'",37,null],[13,"Alphabetic","","'alphabetic'",37,null],[13,"Symbolic","","'symbolic'",37,null],[13,"Additive","","'additive'",37,null],[13,"Fixed","","'fixed ?'",37,null],[12,"first_symbol_value","style::counter_style::System","'?'",37,null],[13,"Extends","style::counter_style","'extends <counter-style-name>'",37,null],[4,"Symbol","","https://drafts.csswg.org/css-counter-styles/#typedef-symbol",null,null],[13,"String","","",38,null],[13,"Ident","","",38,null],[4,"SpeakAs","","https://drafts.csswg.org/css-counter-styles/#counter-style-speak-as",null,null],[13,"Auto","","auto",39,null],[13,"Bullets","","bullets",39,null],[13,"Numbers","","numbers",39,null],[13,"Words","","words",39,null],[13,"Other","","<counter-style-name>",39,null],[5,"parse_counter_style_name","","Parse the prelude of an @counter-style rule",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_counter_style_body","","Parse the body (inside `{}`) of an @counter-style rule",null,{"inputs":[{"name":"customident"},{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"counterstyleruledata"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Get the name of the counter style rule.",40,{"inputs":[{"name":"self"}],"output":{"name":"customident"}}],[11,"system","","https://drafts.csswg.org/css-counter-styles/#counter-style-system",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"negative","","https://drafts.csswg.org/css-counter-styles/#counter-style-negative",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"prefix","","https://drafts.csswg.org/css-counter-styles/#counter-style-prefix",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"suffix","","https://drafts.csswg.org/css-counter-styles/#counter-style-suffix",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"range","","https://drafts.csswg.org/css-counter-styles/#counter-style-range",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"pad","","https://drafts.csswg.org/css-counter-styles/#counter-style-pad",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fallback","","https://drafts.csswg.org/css-counter-styles/#counter-style-fallback",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"symbols","","https://drafts.csswg.org/css-counter-styles/#descdef-counter-style-symbols",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"additive_symbols","","https://drafts.csswg.org/css-counter-styles/#descdef-counter-style-additive-symbols",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"speak_as","","https://drafts.csswg.org/css-counter-styles/#counter-style-speak-as",40,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_css","","",40,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"system"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",37,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",37,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",38,null],[11,"from_computed_value","","",38,null],[11,"parse","","",38,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"is_allowed_in_symbols","","Returns whether this symbol is allowed in symbols() function.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"negative"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",30,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"ranges"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",31,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",31,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",32,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",32,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"fallback"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",33,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"symbols"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"symbols"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"symbols"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",34,null],[11,"from_computed_value","","",34,null],[11,"parse","","",34,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",34,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"additivesymbols"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",35,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",35,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"additivetuple"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",36,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",36,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"speakas"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",39,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",39,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"custom_properties","style","Support for [custom properties for cascading variables][custom].",null,null],[3,"SpecifiedValue","style::custom_properties","A specified value for a custom property is just a set of tokens.",null,null],[3,"BorrowedSpecifiedValue","","This struct is a cheap borrowed version of a `SpecifiedValue`.",null,null],[3,"ComputedValue","","A computed value is just a set of tokens as well, until we resolve variables properly.",null,null],[3,"OrderedMap","","A map that preserves order for the keys, and that is easily indexable.",null,null],[3,"OrderedMapIterator","","An iterator for OrderedMap.",null,null],[5,"parse_name","","Parse a custom property name.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_non_custom_with_var","","Parse the value of a non-custom property that contains `var()` references.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade","","Add one custom property declaration to a map, unless another with the same name was already there.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"hashset"},{"name":"name"},{"name":"declaredvalue"}],"output":null}],[5,"finish_cascade","","Returns the final map of applicable custom properties.",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[5,"substitute","","Replace `var()` functions for a non-custom property. Return `Err(())` for invalid at computed time.",null,{"inputs":[{"name":"str"},{"name":"tokenserializationtype"},{"name":"option"}],"output":{"name":"result"}}],[6,"Name","","A custom property name is just an `Atom`.",null,null],[6,"CustomPropertiesMap","","A map from CSS variable names to CSS variable computed values, used for resolving.",null,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"computedvalue"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"computedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"computedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",41,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",42,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"orderedmap"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"orderedmap"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"orderedmap"}],"output":{"name":"bool"}}],[11,"new","","Creates a new ordered map.",43,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert a new key-value pair.",43,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"get","","Get a value given its key.",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_key_at","","Get the key located at the given index.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"iter","","Get an ordered map iterator.",43,{"inputs":[{"name":"self"}],"output":{"name":"orderedmapiterator"}}],[11,"len","","Get the count of items in the map.",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse","","Parse a custom property SpecifiedValue.",41,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"data","style","Per-node data used in style calculation.",null,null],[3,"ElementDataFlags","style::data","Various flags stored on ElementData.",null,null],[3,"EagerPseudoStyles","","A lazily-allocated list of styles for eagerly-cascaded pseudo-elements.",null,null],[3,"ElementStyles","","The styles associated with a node, including the styles for any pseudo-elements.",null,null],[12,"primary","","The element's style.",45,null],[12,"pseudos","","A list of the styles for the element's eagerly-cascaded pseudo-elements.",45,null],[3,"ElementData","","Style system data associated with an Element.",null,null],[12,"styles","","The styles for the element and its pseudo-elements.",46,null],[12,"damage","","The restyle damage, indicating what kind of layout changes are required afte restyling.",46,null],[12,"hint","","The restyle hint, which indicates whether selectors need to be rematched for this element, its children, and its descendants.",46,null],[12,"flags","","Flags.",46,null],[4,"RestyleKind","","The kind of restyle that a single element should do.",null,null],[13,"MatchAndCascade","","We need to run selector matching plus re-cascade, that is, a full restyle.",47,null],[13,"CascadeWithReplacements","","We need to recascade with some replacement rule, such as the style attribute, or animation rules.",47,null],[13,"CascadeOnly","","We only need to recascade, for example, because only inherited properties in the parent changed.",47,null],[17,"WAS_RESTYLED","","Whether the styles changed for this restyle.",null,null],[17,"TRAVERSED_WITHOUT_STYLING","","Whether the last traversal of this element did not do any style computation. This is not true during the initial styling pass, nor is it true when we restyle (in which case WAS_RESTYLED is set).",null,null],[17,"ANCESTOR_WAS_RECONSTRUCTED","","Whether we reframed/reconstructed any ancestor or self.",null,null],[17,"PRIMARY_STYLE_REUSED_VIA_RULE_NODE","","Whether the primary style of this element data was reused from another element via a rule node comparison. This allows us to differentiate between elements that shared styles because they met all the criteria of the style sharing cache, compared to elements that reused style structs via rule node identity. The former gives us stronger transitive guarantees that allows us to apply the style sharing cache to cousins.",null,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"elementdataflags"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"ordering"}}],[11,"hash","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"elementdataflags"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",48,{"inputs":[],"output":{"name":"elementdataflags"}}],[11,"all","","Returns the set containing all flags.",48,{"inputs":[],"output":{"name":"elementdataflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",48,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",48,{"inputs":[{"name":"u8"}],"output":{"name":"elementdataflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"elementdataflags"}}],[11,"bitor_assign","","Adds the set of flags.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"elementdataflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"elementdataflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":{"name":"elementdataflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",48,{"inputs":[{"name":"self"},{"name":"elementdataflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",48,{"inputs":[{"name":"self"}],"output":{"name":"elementdataflags"}}],[11,"extend","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",48,{"inputs":[{"name":"t"}],"output":{"name":"elementdataflags"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"eagerpseudostyles"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"eagerpseudostyles"}}],[11,"is_empty","","Returns whether there are any pseudo styles.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_optional_array","","Grabs a reference to the list of styles, if they exist.",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array","","Grabs a reference to the list of styles or a list of None if there are no styles to be had.",49,null],[11,"get","","Returns a reference to the style for a given eager pseudo, if it exists.",49,{"inputs":[{"name":"self"},{"name":"pseudoelement"}],"output":{"name":"option"}}],[11,"set","","Sets the style for the eager pseudo.",49,{"inputs":[{"name":"self"},{"name":"pseudoelement"},{"name":"arc"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"elementstyles"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"elementstyles"}}],[11,"get_primary","","Returns the primary style.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"primary","","Returns the primary style.  Panic if no style available.",45,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"is_display_none","","Whether this element `display` value is `none`.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"elementdata"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalidate_style_if_needed","","Invalidates style for this element, its descendants, and later siblings, based on the snapshot of the element that we took when attributes or state changed.",46,{"inputs":[{"name":"self"},{"name":"e"},{"name":"sharedstylecontext"},{"name":"option"}],"output":{"name":"invalidationresult"}}],[11,"has_styles","","Returns true if this element has styles.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"share_styles","","Returns this element's styles as resolved styles to use for sharing.",46,{"inputs":[{"name":"self"}],"output":{"name":"resolvedelementstyles"}}],[11,"share_primary_style","","Returns this element's primary style as a resolved style to use for sharing.",46,{"inputs":[{"name":"self"}],"output":{"name":"primarystyle"}}],[11,"set_styles","","Sets a new set of styles, returning the old ones.",46,{"inputs":[{"name":"self"},{"name":"resolvedelementstyles"}],"output":{"name":"elementstyles"}}],[11,"restyle_kind","","Returns the kind of restyling that we're going to need to do on this element, based of the stored restyle hint.",46,{"inputs":[{"name":"self"},{"name":"sharedstylecontext"}],"output":{"name":"restylekind"}}],[11,"important_rules_are_different","","Return true if important rules are different. We use this to make sure the cascade of off-main thread animations is correct. Note: Ignore custom properties for now because we only support opacity and transform       properties for animations running on compositor. Actually, we only care about opacity       and transform for now, but it's fine to compare all properties and let the user       the check which properties do they want.       If it costs too much, get_properties_overriding_animations() should return a set       containing only opacity and transform properties.",46,{"inputs":[{"name":"self"},{"name":"strongrulenode"},{"name":"stylesheetguards"}],"output":{"name":"bool"}}],[11,"clear_restyle_state","","Drops any restyle state from the element.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_restyle_flags_and_damage","","Drops restyle flags and damage from the element.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"reconstructed_self_or_ancestor","","Returns whether this element or any ancestor is going to be reconstructed.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reconstructed_self","","Returns whether this element is going to be reconstructed.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_reconstructed_ancestor","","Sets the flag that tells us whether we've reconstructed an ancestor.",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_restyled","","Mark this element as restyled, which is useful to know whether we need to do a post-traversal.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"is_restyle","","Returns true if this element was restyled.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_traversed_without_styling","","Mark that we traversed this element without computing any style for it.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"traversed_without_styling","","Returns whether the element was traversed without computing any style for it.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_restyle_data","","Returns whether this element has been part of a restyle.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_applying_damage","","N/A in Servo.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"safe_for_cousin_sharing","","Returns whether it is safe to perform cousin sharing based on the ComputedValues identity of the primary style in this ElementData. There are a few subtle things to check.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"dom","style","Types and traits used to access the DOM from style calculation.",null,null],[6,"UnsafeNode","style::dom","Opaque type stored in type-unsafe work queues for parallel layout. Must be transmutable to and from `TNode`.",null,null],[3,"OpaqueNode","","An opaque handle to a node, which, unlike UnsafeNode, cannot be transformed back into a non-opaque representation. The only safe operation that can be performed on this node is to compare it to another opaque handle or to another OpaqueNode.",null,null],[12,"0","","",50,null],[3,"LayoutIterator","","A node iterator that only returns node that don't need layout.",null,null],[12,"0","","",51,null],[3,"ShowData","","Wrapper to output the ElementData along with the node when formatting for Debug.",null,null],[12,"0","","",52,null],[3,"ShowDataAndPrimaryValues","","Wrapper to output the primary computed values along with the node when formatting for Debug. This is very verbose.",null,null],[12,"0","","",53,null],[3,"ShowSubtree","","Wrapper to output the subtree rather than the single node when formatting for Debug.",null,null],[12,"0","","",54,null],[3,"ShowSubtreeData","","Wrapper to output the subtree along with the ElementData when formatting for Debug.",null,null],[12,"0","","",55,null],[3,"ShowSubtreeDataAndPrimaryValues","","Wrapper to output the subtree along with the ElementData and primary ComputedValues when formatting for Debug. This is extremely verbose.",null,null],[12,"0","","",56,null],[3,"SendNode","","TNode and TElement aren't Send because we want to be careful and explicit about our parallel traversal. However, there are certain situations (including but not limited to the traversal) where we need to send DOM objects to other threads.",null,null],[3,"SendElement","","Same reason as for the existence of SendNode, SendElement does the proper things for a given `TElement`.",null,null],[8,"NodeInfo","","Simple trait to provide basic information about the type of an element.",null,null],[10,"is_element","","Whether this node is an element.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_text_node","","Whether this node is a text node.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_layout","","Whether this node needs layout.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TNode","","The `TNode` trait. This is the main generic trait over which the style system can be implemented.",null,null],[16,"ConcreteElement","","The concrete `TElement` type.",58,null],[16,"ConcreteChildrenIterator","","A concrete children iterator type in order to iterate over the `Node`s.",58,null],[10,"to_unsafe","","Convert this node in an `UnsafeNode`.",58,{"inputs":[{"name":"self"}],"output":{"name":"unsafenode"}}],[10,"from_unsafe","","Get a node back from an `UnsafeNode`.",58,{"inputs":[{"name":"unsafenode"}],"output":{"name":"self"}}],[10,"parent_node","","Get this node's parent node.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parent_element","","Get this node's parent element if present.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"children","","Returns an iterator over this node's children.",58,{"inputs":[{"name":"self"}],"output":{"name":"layoutiterator"}}],[10,"traversal_parent","","Get this node's parent element from the perspective of a restyle traversal.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"traversal_children","","Get this node's children from the perspective of a restyle traversal.",58,{"inputs":[{"name":"self"}],"output":{"name":"layoutiterator"}}],[10,"opaque","","Converts self into an `OpaqueNode`.",58,{"inputs":[{"name":"self"}],"output":{"name":"opaquenode"}}],[10,"debug_id","","A debug id, only useful, mm... for debugging.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"as_element","","Get this node as an element, if it's one.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"can_be_fragmented","","Whether this node can be fragmented. This is used for multicol, and only for Servo.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_can_be_fragmented","","Set whether this node can be fragmented.",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"is_in_doc","","Whether this node is in the document right now needed to clear the restyle data appropriately on some forced restyles.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"PresentationalHintsSynthesizer","","A trait used to synthesize presentational hints for HTML element attributes.",null,null],[10,"synthesize_presentational_hints_for_legacy_attributes","","Generate the proper applicable declarations due to presentational hints, and insert them into `hints`.",59,{"inputs":[{"name":"self"},{"name":"visitedhandlingmode"},{"name":"v"}],"output":null}],[8,"TElement","","The element trait, the main abstraction the style crate acts over.",null,null],[16,"ConcreteNode","","The concrete node type.",60,null],[16,"FontMetricsProvider","","Type of the font metrics provider",60,null],[10,"as_node","","Get this element as a node.",60,null],[11,"owner_doc_matches_for_testing","","A debug-only check that the device's owner doc matches the actual doc we're the root of.",60,{"inputs":[{"name":"self"},{"name":"device"}],"output":{"name":"bool"}}],[11,"depth","","Returns the depth of this element in the DOM.",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"traversal_parent","","Get this node's parent element from the perspective of a restyle traversal.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inheritance_parent","","Returns the parent element we should inherit from.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"before_pseudo_element","","The ::before pseudo-element of this element, if it exists.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"after_pseudo_element","","The ::after pseudo-element of this element, if it exists.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"each_anonymous_content_child","","Execute `f` for each anonymous content child (apart from ::before and ::after) whose originating element is `self`.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"closest_non_native_anonymous_ancestor","","For a given NAC element, return the closest non-NAC ancestor, which is guaranteed to exist.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"style_attribute","","Get this element's style attribute.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unset_dirty_style_attribute","","Unset the style attribute's dirty bit. Servo doesn't need to manage ditry bit for style attribute.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"get_smil_override","","Get this element's SMIL override declarations.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_animation_rule_by_cascade","","Get this element's animation rule by the cascade level.",60,{"inputs":[{"name":"self"},{"name":"cascadelevel"}],"output":{"name":"option"}}],[11,"get_animation_rules","","Get the combined animation and transition rules.",60,{"inputs":[{"name":"self"}],"output":{"name":"animationrules"}}],[11,"get_animation_rule","","Get this element's animation rule.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_transition_rule","","Get this element's transition rule.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_state","","Get this element's state, for non-tree-structural pseudos.",60,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[10,"has_attr","","Whether this element has an attribute with a given namespace.",60,{"inputs":[{"name":"self"},{"name":"namespace"},{"name":"localname"}],"output":{"name":"bool"}}],[10,"get_id","","The ID for this element.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"each_class","","Internal iterator for the classes of this element.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"may_generate_pseudo","","Whether a given element may generate a pseudo-element.",60,{"inputs":[{"name":"self"},{"name":"pseudoelement"},{"name":"computedvalues"}],"output":{"name":"bool"}}],[10,"has_dirty_descendants","","Returns true if this element may have a descendant needing style processing.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_snapshot","","Returns whether state or attributes that may change style have changed on the element, and thus whether the element has been snapshotted to do restyle hint computation.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handled_snapshot","","Returns whether the current snapshot if present has been handled.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_handled_snapshot","","Flags this element as having handled already its snapshot.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"has_current_styles_for_traversal","","Returns whether the element's styles are up-to-date for |traversal_flags|.",60,{"inputs":[{"name":"self"},{"name":"elementdata"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"has_current_styles","","Returns whether the element's styles are up-to-date after traversal (i.e. in post traversal).",60,{"inputs":[{"name":"self"},{"name":"elementdata"}],"output":{"name":"bool"}}],[10,"set_dirty_descendants","","Flag that this element has a descendant for style processing.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"unset_dirty_descendants","","Flag that this element has no descendant for style processing.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"has_animation_only_dirty_descendants","","Similar to the dirty_descendants but for representing a descendant of the element needs to be updated in animation-only traversal.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_animation_only_dirty_descendants","","Flag that this element has a descendant for animation-only restyle processing.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"unset_animation_only_dirty_descendants","","Flag that this element has no descendant for animation-only restyle processing.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_descendant_bits","","Clear all bits related describing the dirtiness of descendants.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_dirty_bits","","Clear all element flags related to dirtiness.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"is_visited_link","","Returns true if this element is a visited link.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_native_anonymous","","Returns true if this element is native anonymous (only Gecko has native anonymous content).",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"implemented_pseudo_element","","Returns the pseudo-element implemented by this element, if any.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"store_children_to_process","","Atomically stores the number of children of this node that we will need to process during bottom-up traversal.",60,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[10,"did_process_child","","Atomically notes that a child has been processed during bottom-up traversal. Returns the number of children left to process.",60,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[10,"ensure_data","","Gets a reference to the ElementData container, or creates one.",60,{"inputs":[{"name":"self"}],"output":{"name":"atomicrefmut"}}],[10,"clear_data","","Clears the element data reference, if any.",60,{"inputs":[{"name":"self"}],"output":null}],[10,"get_data","","Gets a reference to the ElementData container.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_data","","Immutably borrows the ElementData.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mutate_data","","Mutably borrows the ElementData.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"skip_root_and_item_based_display_fixup","","Whether we should skip any root- or item-based display property blockification on this element.  (This function exists so that Gecko native anonymous content can opt out of this style fixup.)",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_selector_flags","","Sets selector flags, which indicate what kinds of selectors may have matched on this element and therefore what kind of work may need to be performed when DOM state changes.",60,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[10,"has_selector_flags","","Returns true if the element has all the specified selector flags.",60,{"inputs":[{"name":"self"},{"name":"elementselectorflags"}],"output":{"name":"bool"}}],[11,"may_have_animations","","In Gecko, element has a flag that represents the element may have any type of animations or not to bail out animation stuff early. Whereas Servo doesn't have such flag.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_animations","","Returns true if the element has relevant animations. Relevant animations are those animations that are affecting the element's style or are scheduled to do so in the future.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_css_animations","","Returns true if the element has a CSS animation.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"has_css_transitions","","Returns true if the element has a CSS transition (including running transitions and completed transitions).",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animation_restyle_hints","","Returns true if the element has animation restyle hints.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"xbl_binding_anonymous_content","","Returns the anonymous content for the current element's XBL binding, given if any.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rule_hash_target","","Returns the rule hash target given an element.",60,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"each_xbl_stylist","","Implements Gecko's `nsBindingManager::WalkRules`.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"get_declarations_from_xbl_bindings","","Gets declarations from XBL bindings from the element.",60,{"inputs":[{"name":"self"},{"name":"option"},{"name":"v"}],"output":{"name":"bool"}}],[10,"lang_attr","","Returns the value of the `xml:lang=\"\"` attribute (or, if appropriate, the `lang=\"\"` attribute) on this element.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"match_element_lang","","Returns whether this element's language matches the language tag `value`.  If `override_lang` is not `None`, it specifies the value of the `xml:lang=\"\"` or `lang=\"\"` attribute to use in place of looking at the element and its ancestors.  (This argument is used to implement matching of `:lang()` against snapshots.)",60,{"inputs":[{"name":"self"},{"name":"option"},{"name":"pseudoclassstringarg"}],"output":{"name":"bool"}}],[10,"is_html_document_body_element","","Returns whether this element is the main body element of the HTML document it is on.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"opaquenode"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"opaquenode"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"opaquenode"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","Returns the address of this node, for debugging purposes.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"sendnode"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"sendnode"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"sendnode"}],"output":{"name":"bool"}}],[11,"new","","Unsafely construct a SendNode.",61,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"sendelement"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"sendelement"}],"output":{"name":"bool"}}],[11,"new","","Unsafely construct a SendElement.",62,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"driver","style","Implements traversal over the DOM tree. The traversal starts in sequential mode, and optionally parallelizes as it discovers work.",null,null],[5,"traverse_dom","style::driver","Do a DOM traversal for top-down and (optionally) bottom-up processing, generic over `D`.",null,{"inputs":[{"name":"d"},{"name":"e"},{"name":"pretraversetoken"},{"name":"option"}],"output":null}],[0,"element_state","style","States elements can be in.",null,null],[3,"ElementState","style::element_state","Event-based element states.",null,null],[3,"DocumentState","","Event-based document states.",null,null],[17,"IN_ACTIVE_STATE","","The mouse is down on this element. https://html.spec.whatwg.org/multipage/#selector-active FIXME(#7333): set/unset this when appropriate",null,null],[17,"IN_FOCUS_STATE","","This element has focus. https://html.spec.whatwg.org/multipage/#selector-focus",null,null],[17,"IN_HOVER_STATE","","The mouse is hovering over this element. https://html.spec.whatwg.org/multipage/#selector-hover",null,null],[17,"IN_ENABLED_STATE","","Content is enabled (and can be disabled). http://www.whatwg.org/html/#selector-enabled",null,null],[17,"IN_DISABLED_STATE","","Content is disabled. http://www.whatwg.org/html/#selector-disabled",null,null],[17,"IN_CHECKED_STATE","","Content is checked. https://html.spec.whatwg.org/multipage/#selector-checked",null,null],[17,"IN_INDETERMINATE_STATE","","https://html.spec.whatwg.org/multipage/#selector-indeterminate",null,null],[17,"IN_PLACEHOLDER_SHOWN_STATE","","https://html.spec.whatwg.org/multipage/#selector-placeholder-shown",null,null],[17,"IN_TARGET_STATE","","https://html.spec.whatwg.org/multipage/#selector-target",null,null],[17,"IN_FULLSCREEN_STATE","","https://fullscreen.spec.whatwg.org/#%3Afullscreen-pseudo-class",null,null],[17,"IN_VALID_STATE","","https://html.spec.whatwg.org/multipage/#selector-valid",null,null],[17,"IN_INVALID_STATE","","https://html.spec.whatwg.org/multipage/#selector-invalid",null,null],[17,"IN_MOZ_UI_VALID_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-valid",null,null],[17,"IN_MOZ_UI_INVALID_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid",null,null],[17,"IN_BROKEN_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-broken",null,null],[17,"IN_USER_DISABLED_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-user-disabled",null,null],[17,"IN_SUPPRESSED_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-suppressed",null,null],[17,"IN_LOADING_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-loading",null,null],[17,"IN_HANDLER_BLOCKED_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-handler-blocked",null,null],[17,"IN_HANDLER_DISABLED_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-handler-disabled",null,null],[17,"IN_HANDLER_CRASHED_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-handler-crashed",null,null],[17,"IN_REQUIRED_STATE","","https://html.spec.whatwg.org/multipage/#selector-required",null,null],[17,"IN_OPTIONAL_STATE","","https://html.spec.whatwg.org/multipage/#selector-optional",null,null],[17,"IN_READ_WRITE_STATE","","https://html.spec.whatwg.org/multipage/#selector-read-write",null,null],[17,"IN_UNRESOLVED_STATE","","Non-standard: Older custom-elements spec.",null,null],[17,"IN_VISITED_STATE","","https://html.spec.whatwg.org/multipage/#selector-visited",null,null],[17,"IN_UNVISITED_STATE","","https://html.spec.whatwg.org/multipage/#selector-link",null,null],[17,"IN_VISITED_OR_UNVISITED_STATE","","https://drafts.csswg.org/selectors-4/#the-any-link-pseudo",null,null],[17,"IN_DRAGOVER_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-drag-over",null,null],[17,"IN_INRANGE_STATE","","https://html.spec.whatwg.org/multipage/#selector-in-range",null,null],[17,"IN_OUTOFRANGE_STATE","","https://html.spec.whatwg.org/multipage/#selector-out-of-range",null,null],[17,"IN_MOZ_READONLY_STATE","","https://html.spec.whatwg.org/multipage/#selector-read-only",null,null],[17,"IN_MOZ_READWRITE_STATE","","https://html.spec.whatwg.org/multipage/#selector-read-write",null,null],[17,"IN_DEFAULT_STATE","","https://html.spec.whatwg.org/multipage/#selector-default",null,null],[17,"IN_MOZ_SUBMITINVALID_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-submit-invalid",null,null],[17,"IN_OPTIMUM_STATE","","Non-standard & undocumented.",null,null],[17,"IN_SUB_OPTIMUM_STATE","","Non-standard & undocumented.",null,null],[17,"IN_SUB_SUB_OPTIMUM_STATE","","Non-standard & undocumented.",null,null],[17,"IN_DEVTOOLS_HIGHLIGHTED_STATE","","Non-standard & undocumented.",null,null],[17,"IN_STYLEEDITOR_TRANSITIONING_STATE","","Non-standard & undocumented.",null,null],[17,"IN_INCREMENT_SCRIPT_LEVEL_STATE","","Non-standard & undocumented.",null,null],[17,"IN_FOCUSRING_STATE","","Non-standard: https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-focusring",null,null],[17,"IN_HANDLER_CLICK_TO_PLAY_STATE","","Non-standard & undocumented.",null,null],[17,"IN_HANDLER_VULNERABLE_UPDATABLE_STATE","","Non-standard & undocumented.",null,null],[17,"IN_HANDLER_VULNERABLE_NO_UPDATE_STATE","","Non-standard & undocumented.",null,null],[17,"IN_FOCUS_WITHIN_STATE","","https://drafts.csswg.org/selectors-4/#the-focus-within-pseudo",null,null],[17,"IN_LTR_STATE","",":dir matching; the states are used for dynamic change detection. State that elements that match :dir(ltr) are in.",null,null],[17,"IN_RTL_STATE","","State that elements that match :dir(rtl) are in.",null,null],[17,"IN_HAS_DIR_ATTR_STATE","","State that HTML elements that have a \"dir\" attr are in.",null,null],[17,"IN_HAS_DIR_ATTR_LTR_STATE","","State that HTML elements with dir=\"ltr\" (or something case-insensitively equal to \"ltr\") are in.",null,null],[17,"IN_HAS_DIR_ATTR_RTL_STATE","","State that HTML elements with dir=\"rtl\" (or something case-insensitively equal to \"rtl\") are in.",null,null],[17,"IN_HAS_DIR_ATTR_LIKE_AUTO_STATE","","State that HTML  elements without a valid-valued \"dir\" attr or any HTML elements (including ) with dir=\"auto\" (or something case-insensitively equal to \"auto\") are in.",null,null],[17,"IN_AUTOFILL_STATE","","Non-standard & undocumented.",null,null],[17,"IN_AUTOFILL_PREVIEW_STATE","","Non-standard & undocumented.",null,null],[17,"NS_DOCUMENT_STATE_RTL_LOCALE","","RTL locale: specific to the XUL localedir attribute",null,null],[17,"NS_DOCUMENT_STATE_WINDOW_INACTIVE","","Window activation status",null,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"ordering"}}],[11,"hash","","",63,null],[11,"heap_size_of_children","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",63,{"inputs":[],"output":{"name":"elementstate"}}],[11,"all","","Returns the set containing all flags.",63,{"inputs":[],"output":{"name":"elementstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",63,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",63,{"inputs":[{"name":"u64"}],"output":{"name":"elementstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"bitor_assign","","Adds the set of flags.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",63,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",63,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"extend","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",63,{"inputs":[{"name":"t"}],"output":{"name":"elementstate"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"documentstate"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"option"}}],[11,"lt","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"le","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"gt","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"ge","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"ordering"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",64,{"inputs":[],"output":{"name":"documentstate"}}],[11,"all","","Returns the set containing all flags.",64,{"inputs":[],"output":{"name":"documentstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",64,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",64,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",64,{"inputs":[{"name":"u64"}],"output":{"name":"documentstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"documentstate"}}],[11,"bitor_assign","","Adds the set of flags.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"documentstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"documentstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":{"name":"documentstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",64,{"inputs":[{"name":"self"},{"name":"documentstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",64,{"inputs":[{"name":"self"}],"output":{"name":"documentstate"}}],[11,"extend","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",64,{"inputs":[{"name":"t"}],"output":{"name":"documentstate"}}],[0,"error_reporting","style","Types used to report parsing errors.",null,null],[3,"RustLogReporter","style::error_reporting","An error reporter that uses the `log` crate at `info` level.",null,null],[3,"NullReporter","","Error reporter which silently forgets errors",null,null],[4,"ContextualParseError","","Errors that can be encountered while parsing CSS.",null,null],[13,"UnsupportedPropertyDeclaration","","A property declaration was not recognized.",65,null],[13,"UnsupportedFontFaceDescriptor","","A font face descriptor was not recognized.",65,null],[13,"UnsupportedFontFeatureValuesDescriptor","","A font feature values descriptor was not recognized.",65,null],[13,"InvalidKeyframeRule","","A keyframe rule was not valid.",65,null],[13,"InvalidFontFeatureValuesRule","","A font feature values rule was not valid.",65,null],[13,"UnsupportedKeyframePropertyDeclaration","","A keyframe property declaration was not recognized.",65,null],[13,"InvalidRule","","A rule was invalid for some reason.",65,null],[13,"UnsupportedRule","","A rule was not recognized.",65,null],[13,"UnsupportedViewportDescriptorDeclaration","","A viewport descriptor declaration was not recognized.",65,null],[13,"UnsupportedCounterStyleDescriptorDeclaration","","A counter style descriptor declaration was not recognized.",65,null],[13,"InvalidCounterStyleWithoutSymbols","","A counter style rule had no symbols.",65,null],[13,"InvalidCounterStyleNotEnoughSymbols","","A counter style rule had less than two symbols.",65,null],[13,"InvalidCounterStyleWithoutAdditiveSymbols","","A counter style rule did not have additive-symbols.",65,null],[13,"InvalidCounterStyleExtendsWithSymbols","","A counter style rule had extends with symbols.",65,null],[13,"InvalidCounterStyleExtendsWithAdditiveSymbols","","A counter style rule had extends with additive-symbols.",65,null],[13,"InvalidMediaRule","","A media rule was invalid for some reason.",65,null],[8,"ParseErrorReporter","","A generic trait for an error reporter.",null,null],[10,"report_error","","Called when the style engine detects an error.",66,{"inputs":[{"name":"self"},{"name":"urlextradata"},{"name":"sourcelocation"},{"name":"contextualparseerror"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"report_error","","",67,{"inputs":[{"name":"self"},{"name":"urlextradata"},{"name":"sourcelocation"},{"name":"contextualparseerror"}],"output":null}],[11,"report_error","","",68,{"inputs":[{"name":"self"},{"name":"urlextradata"},{"name":"sourcelocation"},{"name":"contextualparseerror"}],"output":null}],[0,"font_face","style","The [`@font-face`][ff] at-rule.",null,null],[3,"UrlSource","style::font_face","A `UrlSource` represents a font-face source that has been specified with a `url()` function.",null,null],[12,"url","","The specified url.",69,null],[12,"format_hints","","The format hints specified with the `format()` function.",69,null],[3,"FontFace","","A @font-face rule that is known to have font-family and src declarations.",null,null],[3,"EffectiveSources","","A list of effective sources that we send over through IPC to the font cache.",null,null],[3,"FontFaceRuleData","","Data inside a `@font-face` rule.",null,null],[12,"family","","The name of this font face",70,null],[12,"sources","","The alternative sources for this font face.",70,null],[12,"source_location","","Line and column of the @font-face rule source code.",70,null],[4,"Source","","A source for a font-face rule.",null,null],[13,"Url","","A `url()` source.",71,null],[13,"Local","","A `local()` source.",71,null],[4,"FontDisplay","","",null,null],[13,"Auto","","",72,null],[13,"Block","","",72,null],[13,"Swap","","",72,null],[13,"Fallback","","",72,null],[13,"Optional","","",72,null],[5,"parse_font_face_block","","Parse the block inside a `@font-face` rule.",null,{"inputs":[{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"},{"name":"sourcelocation"}],"output":{"name":"fontfaceruledata"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"to_css","","",71,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"urlsource"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"urlsource"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"urlsource"}],"output":{"name":"bool"}}],[11,"to_css","","",69,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"fontdisplay"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"fontdisplay"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",72,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",72,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",72,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",72,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",72,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"effectivesources"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"effective_sources","","Returns the list of effective sources for that font-face, that is the sources which don't list any format hint, or the ones which list at least \"truetype\" or \"opentype\".",74,{"inputs":[{"name":"self"}],"output":{"name":"effectivesources"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"parse","","",71,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"fontfaceruledata"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"fontfaceruledata"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"fontfaceruledata"}],"output":{"name":"bool"}}],[11,"to_css","","",70,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"font_face","","Per https://github.com/w3c/csswg-drafts/issues/1133 an @font-face rule is valid as far as the CSS parser is concerned even if it doesn’t have a font-family or src declaration.",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"family","","The name of this font face",74,{"inputs":[{"name":"self"}],"output":{"name":"familyname"}}],[11,"sources","","The alternative sources for this font face.",74,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"font_metrics","style","Access to font metrics from the style system.",null,null],[3,"FontMetrics","style::font_metrics","Represents the font metrics that style needs from a font to compute the value of certain CSS units like `ex`.",null,null],[12,"x_height","","The x-height of the font.",75,null],[12,"zero_advance_measure","","The zero advance. This is usually writing mode dependent",75,null],[3,"ServoMetricsProvider","","Dummy metrics provider for Servo. Knows nothing about fonts and does not provide any metrics.",null,null],[4,"FontMetricsQueryResult","","The result for querying font metrics for a given font family.",null,null],[13,"Available","","The font is available, but we may or may not have found any font metrics for it.",76,null],[13,"NotAvailable","","The font is not available.",76,null],[5,"get_metrics_provider_for_product","","Construct a font metrics provider for the current product",null,{"inputs":[],"output":{"name":"servometricsprovider"}}],[8,"FontMetricsProvider","","A trait used to represent something capable of providing us font metrics.",null,null],[11,"query","","Obtain the metrics for given font family.",77,{"inputs":[{"name":"self"},{"name":"font"},{"name":"au"},{"name":"writingmode"},{"name":"bool"},{"name":"device"}],"output":{"name":"fontmetricsqueryresult"}}],[10,"get_size","","Get default size of a given language and generic family",77,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"u8"}],"output":{"name":"au"}}],[10,"create_from","","Construct from a shared style context",77,{"inputs":[{"name":"sharedstylecontext"}],"output":{"name":"self"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"fontmetrics"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"fontmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"fontmetrics"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"fontmetricsqueryresult"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"fontmetricsqueryresult"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"fontmetricsqueryresult"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_from","","",78,{"inputs":[{"name":"sharedstylecontext"}],"output":{"name":"self"}}],[11,"get_size","","",78,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"u8"}],"output":{"name":"au"}}],[0,"hash","style","Reexports of hashglobe types in Gecko mode, and stdlib hashmap shims in Servo mode",null,null],[3,"HashMap","style::hash","",null,null],[3,"HashSet","","",null,null],[0,"map","","Appropriate reexports of hash_map types",null,null],[4,"Entry","style::hash::map","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",79,null],[13,"Vacant","","A vacant entry.",79,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[6,"FnvHashMap","style::hash","Hash map that uses the FNV hasher",null,null],[6,"FnvHashSet","","Hash set that uses the FNV hasher",null,null],[0,"invalidation","style","Different bits of code related to invalidating style.",null,null],[0,"element","style::invalidation","Invalidation of element styles due to attribute or style changes.",null,null],[0,"element_wrapper","style::invalidation::element","A wrapper over an element and a snapshot, that allows us to selector-match against a past state of the element.",null,null],[3,"ElementWrapper","style::invalidation::element::element_wrapper","A simple wrapper over an element and a snapshot, that allows us to selector-match against a past state of the element.",null,null],[8,"ElementSnapshot","","In order to compute restyle hints, we perform a selector match against a list of partial selectors whose rightmost simple selector may be sensitive to the thing being changed. We do this matching twice, once for the element as it exists now and once for the element as it existed at the time of the last restyle. If the results of the selector match differ, that means that the given partial selector is sensitive to the change, and we compute a restyle hint based on its combinator.",null,null],[10,"state","","The state of the snapshot, if any.",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"has_attrs","","If this snapshot contains attribute information.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"id_attr","","The ID attribute per this snapshot. Should only be called if `has_attrs()` returns true.",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"has_class","","Whether this snapshot contains the class `name`. Should only be called if `has_attrs()` returns true.",80,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[10,"each_class","","A callback that should be called for each class of the snapshot. Should only be called if `has_attrs()` returns true.",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"lang_attr","","The `xml:lang=\"\"` or `lang=\"\"` attribute value per this snapshot.",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"elementwrapper"}}],[11,"new","","Trivially constructs an `ElementWrapper`.",81,{"inputs":[{"name":"e"},{"name":"snapshotmap"}],"output":{"name":"self"}}],[11,"snapshot","","Gets the snapshot associated with this element, if any.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"state_changes","","Returns the states that have changed since the element was snapshotted.",81,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"match_non_ts_pseudo_class","","",81,{"inputs":[{"name":"self"},{"name":"nontspseudoclass"},{"name":"localmatchingcontext"},{"name":"relevantlinkstatus"},{"name":"f"}],"output":{"name":"bool"}}],[11,"match_pseudo_element","","",81,{"inputs":[{"name":"self"},{"name":"pseudoelement"},{"name":"matchingcontext"}],"output":{"name":"bool"}}],[11,"is_link","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_child_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_child_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"prev_sibling_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_sibling_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_html_element_in_html_document","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_local_name","","",81,null],[11,"get_namespace","","",81,null],[11,"attr_matches","","",81,{"inputs":[{"name":"self"},{"name":"namespaceconstraint"},{"name":"localname"},{"name":"attrselectoroperation"}],"output":{"name":"bool"}}],[11,"has_id","","",81,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[11,"has_class","","",81,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[11,"is_empty","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_root","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pseudo_element_originating_element","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"invalidation_map","style::invalidation::element","Code for invalidations due to state or attribute changes.",null,null],[3,"Dependency","style::invalidation::element::invalidation_map","Mapping between (partial) CompoundSelectors (and the combinator to their right) and the states and attributes they depend on.",null,null],[12,"selector","","The dependency selector.",82,null],[12,"selector_offset","","The offset into the selector that we should match on.",82,null],[3,"StateDependency","","The same, but for state selectors, which can track more exactly what state do they track.",null,null],[12,"dep","","The other dependency fields.",83,null],[12,"state","","The state this dependency is affected by.",83,null],[3,"InvalidationMap","","A map where we store invalidations.",null,null],[12,"class_to_selector","","A map from a given class name to all the selectors with that class selector.",84,null],[12,"id_to_selector","","A map from a given id to all the selectors with that ID in the stylesheets currently applying to the document.",84,null],[12,"state_affecting_selectors","","A map of all the state dependencies.",84,null],[12,"other_attribute_affecting_selectors","","A map of other attribute affecting selectors.",84,null],[12,"has_class_attribute_selectors","","Whether there are attribute rules of the form `[class~=\"foo\"]` that may match. In that case, we need to look at `other_attribute_affecting_selectors` too even if only the `class` has changed.",84,null],[12,"has_id_attribute_selectors","","Whether there are attribute rules of the form `[id|=\"foo\"]` that may match. In that case, we need to look at `other_attribute_affecting_selectors` too even if only the `id` has changed.",84,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"dependency"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"combinator","","Returns the combinator to the right of the partial selector this dependency represents.",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"affects_self","","Whether this dependency affects the style of the element.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"affects_descendants","","Whether this dependency may affect style of any of our descendants.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"affects_later_siblings","","Whether this dependency may affect style of any of our later siblings.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"selector","","",82,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"statedependency"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"selector","","",83,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates an empty `InvalidationMap`.",84,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Returns the number of dependencies stored in the invalidation map.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"note_selector","","Adds a selector to this `InvalidationMap`.  Returns Err(..) to signify OOM.",84,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"quirksmode"}],"output":{"name":"result"}}],[11,"clear","","Clears this map, leaving it empty.",84,{"inputs":[{"name":"self"}],"output":null}],[0,"invalidator","style::invalidation::element","The struct that takes care of encapsulating all the logic on where and how element styles need to be invalidated.",null,null],[3,"TreeStyleInvalidator","style::invalidation::element::invalidator","The struct that takes care of encapsulating all the logic on where and how element styles need to be invalidated.",null,null],[3,"InvalidationResult","","The result of a whole invalidation process for a given element.",null,null],[11,"empty","","Create an emtpy result.",85,{"inputs":[],"output":{"name":"self"}}],[11,"has_invalidated_self","","Whether the invalidation has invalidate the element itself.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_invalidated_descendants","","Whether the invalidation has invalidate desendants.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_invalidated_siblings","","Whether the invalidation has invalidate siblings.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Trivially constructs a new `TreeStyleInvalidator`.",86,{"inputs":[{"name":"e"},{"name":"option"},{"name":"sharedstylecontext"},{"name":"option"}],"output":{"name":"self"}}],[11,"invalidate","","Perform the invalidation pass.",86,{"inputs":[{"name":"self"}],"output":{"name":"invalidationresult"}}],[0,"restyle_hints","style::invalidation::element","Restyle hints: an optimization to avoid unnecessarily matching selectors.",null,null],[3,"RestyleHint","style::invalidation::element::restyle_hints","The kind of restyle we need to do for a given element.",null,null],[17,"RESTYLE_SELF","","Do a selector match of the element.",null,null],[17,"RESTYLE_DESCENDANTS","","Do a selector match of the element's descendants.",null,null],[17,"RECASCADE_SELF","","Recascade the current element.",null,null],[17,"RECASCADE_DESCENDANTS","","Recascade all descendant elements.",null,null],[17,"RESTYLE_CSS_TRANSITIONS","","Replace the style data coming from CSS transitions without updating any other style data. This hint is only processed in animation-only traversal which is prior to normal traversal.",null,null],[17,"RESTYLE_CSS_ANIMATIONS","","Replace the style data coming from CSS animations without updating any other style data. This hint is only processed in animation-only traversal which is prior to normal traversal.",null,null],[17,"RESTYLE_STYLE_ATTRIBUTE","","Don't re-run selector-matching on the element, only the style attribute has changed, and this change didn't have any other dependencies.",null,null],[17,"RESTYLE_SMIL","","Replace the style data coming from SMIL animations without updating any other style data. This hint is only processed in animation-only traversal which is prior to normal traversal.",null,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"restylehint"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"restylehint"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"restylehint"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"inputs":[{"name":"u8"}],"output":{"name":"restylehint"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"restylehint"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"restylehint"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"restylehint"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":{"name":"restylehint"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"inputs":[{"name":"self"},{"name":"restylehint"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"self"}],"output":{"name":"restylehint"}}],[11,"extend","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"restylehint"}}],[11,"restyle_subtree","","Creates a new `RestyleHint` indicating that the current element and all its descendants must be fully restyled.",87,{"inputs":[],"output":{"name":"self"}}],[11,"recascade_subtree","","Creates a new `RestyleHint` indicating that the current element and all its descendants must be recascaded.",87,{"inputs":[],"output":{"name":"self"}}],[11,"contains_subtree","","Returns whether this hint invalidates the element and all its descendants.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_non_animation_invalidations","","Returns whether we need to restyle this element.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"propagate","","Propagates this restyle hint to a child element.",87,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"self"}}],[11,"recascade_self","","Creates a new `RestyleHint` that indicates the element must be recascaded.",87,{"inputs":[],"output":{"name":"self"}}],[11,"replacements","","Returns a hint that contains all the replacement hints.",87,{"inputs":[],"output":{"name":"self"}}],[11,"for_animations","","The replacements for the animation cascade levels.",87,{"inputs":[],"output":{"name":"self"}}],[11,"has_recascade_self","","Returns whether the hint specifies that the currently element must be recascaded.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animation_hint","","Returns whether the hint specifies that an animation cascade level must be replaced.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animation_hint_or_recascade","","Returns whether the hint specifies that an animation cascade level must be replaced.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_non_animation_hint","","Returns whether the hint specifies some restyle work other than an animation cascade level replacement.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"match_self","","Returns whether the hint specifies that selector matching must be re-run for the element.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_replacements","","Returns whether the hint specifies that some cascade levels must be replaced.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove_animation_hints","","Removes all of the animation-related hints.",87,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"media_queries","style::invalidation","Code related to the invalidation of media-query-affected rules.",null,null],[3,"MediaListKey","style::invalidation::media_queries","A key for a given media query result.",null,null],[3,"EffectiveMediaQueryResults","","A struct that holds the result of a media query evaluation pass for the media queries that evaluated successfully.",null,null],[3,"PotentiallyEffectiveMediaRules","","A filter that filters over effective rules, but allowing all potentially effective `@media` rules.",null,null],[8,"ToMediaListKey","","A trait to get a given `MediaListKey` for a given item that can hold a `MediaList`.",null,null],[11,"to_media_list_key","","Get a `MediaListKey` for this item. This key needs to uniquely identify the item.",88,{"inputs":[{"name":"self"}],"output":{"name":"medialistkey"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"medialistkey"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"medialistkey"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"medialistkey"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_raw","","Create a MediaListKey from a raw usize.",89,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"effectivemediaqueryresults"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"effectivemediaqueryresults"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Trivially constructs an empty `EffectiveMediaQueryResults`.",90,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","Resets the results, using an empty key.",90,{"inputs":[{"name":"self"}],"output":null}],[11,"was_effective","","Returns whether a given item was known to be effective when the results were cached.",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"saw_effective","","Notices that an effective item has been seen, and caches it as matching.",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"process_import","","",91,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"importrule"}],"output":{"name":"bool"}}],[11,"process_media","","",91,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"mediarule"}],"output":{"name":"bool"}}],[11,"process_document","","Whether we should process the nested rules in a given `@-moz-document` rule.",91,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"documentrule"}],"output":{"name":"bool"}}],[11,"process_supports","","Whether we should process the nested rules in a given `@supports` rule.",91,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"supportsrule"}],"output":{"name":"bool"}}],[0,"stylesheets","style::invalidation","A collection of invalidations due to changes in which stylesheets affect a document.",null,null],[3,"StylesheetInvalidationSet","style::invalidation::stylesheets","A set of invalidations due to stylesheet additions.",null,null],[11,"heap_size_of_children","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create an empty `StylesheetInvalidationSet`.",92,{"inputs":[],"output":{"name":"self"}}],[11,"invalidate_fully","","Mark the DOM tree styles' as fully invalid.",92,{"inputs":[{"name":"self"}],"output":null}],[11,"collect_invalidations_for","","Analyze the given stylesheet, and collect invalidations from their rules, in order to avoid doing a full restyle when we style the document next time.",92,{"inputs":[{"name":"self"},{"name":"device"},{"name":"s"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"flush","","Clears the invalidation set, invalidating elements as needed if `document_element` is provided.",92,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clear","","Clears the invalidation set without processing.",92,{"inputs":[{"name":"self"}],"output":null}],[0,"logical_geometry","style","Geometry in flow-relative space.",null,null],[3,"WritingMode","style::logical_geometry","",null,null],[3,"LogicalSize","","A 2D size in flow-relative dimensions",null,null],[12,"inline","","",93,null],[12,"block","","",93,null],[3,"LogicalPoint","","A 2D point in flow-relative dimensions",null,null],[12,"i","","inline-axis coordinate",94,null],[12,"b","","block-axis coordinate",94,null],[3,"LogicalMargin","","A \"margin\" in flow-relative dimensions Represents the four sides of the margins, borders, or padding of a CSS box, or a combination of those. A positive \"margin\" can be added to a rectangle to obtain a bigger rectangle.",null,null],[12,"block_start","","",95,null],[12,"inline_end","","",95,null],[12,"block_end","","",95,null],[12,"inline_start","","",95,null],[3,"LogicalRect","","A rectangle in flow-relative dimensions",null,null],[12,"start","","",96,null],[12,"size","","",96,null],[4,"BlockFlowDirection","","",null,null],[13,"TopToBottom","","",97,null],[13,"RightToLeft","","",97,null],[13,"LeftToRight","","",97,null],[4,"InlineBaseDirection","","",null,null],[13,"LeftToRight","","",98,null],[13,"RightToLeft","","",98,null],[4,"Direction","","",null,null],[13,"Inline","","",99,null],[13,"Block","","",99,null],[4,"PhysicalSide","","",null,null],[13,"Top","","",100,null],[13,"Right","","",100,null],[13,"Bottom","","",100,null],[13,"Left","","",100,null],[17,"FLAG_RTL","","",null,null],[17,"FLAG_VERTICAL","","",null,null],[17,"FLAG_VERTICAL_LR","","",null,null],[17,"FLAG_LINE_INVERTED","","For vertical writing modes only.  When set, line-over/line-under sides are inverted from block-start/block-end.  This flag is set when sideways-lr is used.",null,null],[17,"FLAG_SIDEWAYS","","",null,null],[17,"FLAG_UPRIGHT","","",null,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"writingmode"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"ordering"}}],[11,"hash","","",101,null],[11,"heap_size_of_children","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"writingmode"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"writingmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"inputs":[{"name":"u8"}],"output":{"name":"writingmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"writingmode"}}],[11,"bitor_assign","","Adds the set of flags.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"writingmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"writingmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"writingmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",101,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"self"}],"output":{"name":"writingmode"}}],[11,"extend","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"writingmode"}}],[11,"is_vertical","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vertical_lr","","Assuming .is_vertical(), does the block direction go left to right?",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_inline_tb","","Assuming .is_vertical(), does the inline direction go top to bottom?",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bidi_ltr","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sideways","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_upright","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inline_start_physical_side","","",101,{"inputs":[{"name":"self"}],"output":{"name":"physicalside"}}],[11,"inline_end_physical_side","","",101,{"inputs":[{"name":"self"}],"output":{"name":"physicalside"}}],[11,"block_start_physical_side","","",101,{"inputs":[{"name":"self"}],"output":{"name":"physicalside"}}],[11,"block_end_physical_side","","",101,{"inputs":[{"name":"self"}],"output":{"name":"physicalside"}}],[11,"block_flow_direction","","",101,{"inputs":[{"name":"self"}],"output":{"name":"blockflowdirection"}}],[11,"inline_base_direction","","",101,{"inputs":[{"name":"self"}],"output":{"name":"inlinebasedirection"}}],[11,"to_bidi_level","","The default bidirectional embedding level for this writing mode.",101,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"logicalsize"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",93,{"inputs":[{"name":"writingmode"}],"output":{"name":"logicalsize"}}],[11,"new","","",93,{"inputs":[{"name":"writingmode"},{"name":"t"},{"name":"t"}],"output":{"name":"logicalsize"}}],[11,"from_physical","","",93,{"inputs":[{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"logicalsize"}}],[11,"width","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_width","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"height","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_height","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"to_physical","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"size2d"}}],[11,"convert","","",93,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"writingmode"}],"output":{"name":"logicalsize"}}],[11,"add","","",93,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"logicalsize"}}],[11,"sub","","",93,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"logicalsize"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"logicalpoint"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"logicalpoint"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"logicalpoint"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",94,{"inputs":[{"name":"writingmode"}],"output":{"name":"logicalpoint"}}],[11,"new","","",94,{"inputs":[{"name":"writingmode"},{"name":"t"},{"name":"t"}],"output":{"name":"logicalpoint"}}],[11,"from_physical","","",94,{"inputs":[{"name":"writingmode"},{"name":"point2d"},{"name":"size2d"}],"output":{"name":"logicalpoint"}}],[11,"x","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"t"}}],[11,"set_x","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"},{"name":"size2d"}],"output":null}],[11,"y","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"t"}}],[11,"set_y","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"},{"name":"size2d"}],"output":null}],[11,"to_physical","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"point2d"}}],[11,"convert","","",94,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"logicalpoint"}}],[11,"add_point","","This doesn’t really makes sense, but happens when dealing with multiple origins.",94,{"inputs":[{"name":"self"},{"name":"logicalpoint"}],"output":{"name":"logicalpoint"}}],[11,"add","","",94,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"logicalpoint"}}],[11,"sub","","",94,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"logicalpoint"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"logicalmargin"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",95,{"inputs":[{"name":"writingmode"}],"output":{"name":"logicalmargin"}}],[11,"new","","",95,{"inputs":[{"name":"writingmode"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"logicalmargin"}}],[11,"new_all_same","","",95,{"inputs":[{"name":"writingmode"},{"name":"t"}],"output":{"name":"logicalmargin"}}],[11,"from_physical","","",95,{"inputs":[{"name":"writingmode"},{"name":"sideoffsets2d"}],"output":{"name":"logicalmargin"}}],[11,"top","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_top","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"right","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_right","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"bottom","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_bottom","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"left","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_left","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"t"}],"output":null}],[11,"to_physical","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"sideoffsets2d"}}],[11,"convert","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"writingmode"}],"output":{"name":"logicalmargin"}}],[11,"is_zero","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inline_start_end","","",95,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"block_start_end","","",95,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_end","","",95,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"t"}}],[11,"top_bottom","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"left_right","","",95,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"add","","",95,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"logicalmargin"}}],[11,"sub","","",95,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"logicalmargin"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"logicalrect"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"logicalrect"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"logicalrect"}],"output":{"name":"bool"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",96,{"inputs":[{"name":"writingmode"}],"output":{"name":"logicalrect"}}],[11,"new","","",96,{"inputs":[{"name":"writingmode"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"logicalrect"}}],[11,"from_point_size","","",96,{"inputs":[{"name":"writingmode"},{"name":"logicalpoint"},{"name":"logicalsize"}],"output":{"name":"logicalrect"}}],[11,"from_physical","","",96,{"inputs":[{"name":"writingmode"},{"name":"rect"},{"name":"size2d"}],"output":{"name":"logicalrect"}}],[11,"inline_end","","",96,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"block_end","","",96,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_physical","","",96,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"rect"}}],[11,"convert","","",96,{"inputs":[{"name":"self"},{"name":"writingmode"},{"name":"writingmode"},{"name":"size2d"}],"output":{"name":"logicalrect"}}],[11,"translate_by_size","","",96,{"inputs":[{"name":"self"},{"name":"logicalsize"}],"output":{"name":"logicalrect"}}],[11,"translate","","",96,{"inputs":[{"name":"self"},{"name":"logicalpoint"}],"output":{"name":"logicalrect"}}],[11,"union","","",96,{"inputs":[{"name":"self"},{"name":"logicalrect"}],"output":{"name":"logicalrect"}}],[11,"add","","",96,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"logicalrect"}}],[11,"sub","","",96,{"inputs":[{"name":"self"},{"name":"logicalmargin"}],"output":{"name":"logicalrect"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"physicalside"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"physicalside"}],"output":{"name":"bool"}}],[0,"matching","style","High-level interface to CSS selector matching.",null,null],[3,"StyleDifference","style::matching","Represents the result of comparing an element's old and new style.",null,null],[12,"damage","","The resulting damage.",102,null],[12,"change","","Whether any styles changed.",102,null],[4,"StyleChange","","Represents whether or not the style of an element has changed.",null,null],[13,"Unchanged","","The style hasn't changed.",103,null],[13,"Changed","","The style has changed.",103,null],[12,"reset_only","style::matching::StyleChange","Whether only reset structs changed.",103,null],[4,"ChildCascadeRequirement","style::matching","Whether or not newly computed values for an element need to be cascade to children.",null,null],[13,"CanSkipCascade","","Old and new computed values were the same, or we otherwise know that we won't bother recomputing style for children, so we can skip cascading the new values into child elements.",104,null],[13,"MustCascadeChildrenIfInheritResetStyle","","The same as `MustCascadeChildren`, but we only need to actually recascade if the child inherits any explicit reset style.",104,null],[13,"MustCascadeChildren","","Old and new computed values were different, so we must cascade the new values to children.",104,null],[13,"MustCascadeDescendants","","The same as `MustCascadeChildren`, but for the entire subtree.  This is used to handle root font-size updates needing to recascade the whole document.",104,null],[4,"CascadeVisitedMode","","Determines which styles are being cascaded currently.",null,null],[13,"Unvisited","","Cascade the regular, unvisited styles.",105,null],[13,"Visited","","Cascade the styles used when an element's relevant link is visited.  A \"relevant link\" is the element being matched if it is a link or the nearest ancestor link.",105,null],[8,"MatchMethods","","The public API that elements expose for selector matching.",null,null],[11,"layout_parent","","Returns the closest parent element that doesn't have a display: contents style (and thus generates a box).",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"finish_restyle","","Updates the styles with the new ones, diffs them, and stores the restyle damage.",106,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"elementdata"},{"name":"resolvedelementstyles"},{"name":"bool"}],"output":{"name":"childcascaderequirement"}}],[11,"apply_selector_flags","","Applies selector flags to an element, deferring mutations of the parent until after the traversal.",106,{"inputs":[{"name":"self"},{"name":"selectorflagsmap"},{"name":"self"},{"name":"elementselectorflags"}],"output":null}],[11,"replace_rules","","Updates the rule nodes without re-running selector matching, using just the rule tree.",106,{"inputs":[{"name":"self"},{"name":"restylehint"},{"name":"stylecontext"},{"name":"elementcascadeinputs"}],"output":{"name":"bool"}}],[11,"replace_rules_internal","","Updates the rule nodes without re-running selector matching, using just the rule tree, for a specific visited mode.",106,{"inputs":[{"name":"self"},{"name":"restylehint"},{"name":"stylecontext"},{"name":"cascadevisitedmode"},{"name":"elementcascadeinputs"}],"output":{"name":"bool"}}],[11,"compute_style_difference","","Given the old and new style of this element, and whether it's a pseudo-element, compute the restyle damage used to determine which kind of layout or painting operations we'll need.",106,{"inputs":[{"name":"self"},{"name":"computedvalues"},{"name":"computedvalues"},{"name":"option"}],"output":{"name":"styledifference"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `StyleDifference`.",102,{"inputs":[{"name":"restyledamage"},{"name":"stylechange"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stylechange"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"childcascaderequirement"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"childcascaderequirement"}],"output":{"name":"ordering"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"childcascaderequirement"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"childcascaderequirement"}],"output":{"name":"option"}}],[11,"can_skip_cascade","","Whether we can unconditionally skip the cascade.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"cascadevisitedmode"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"cascadevisitedmode"}],"output":{"name":"bool"}}],[11,"visited_dependent_only","","Returns whether the cascade should filter to only visited dependent properties based on the cascade mode.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"media_queries","style","[Media queries][mq].",null,null],[3,"MediaList","style::media_queries","A type that encapsulates a media query list.",null,null],[12,"media_queries","","The list of media queries.",107,null],[3,"MediaQuery","","A [media query][mq].",null,null],[12,"qualifier","","The qualifier for this query.",108,null],[12,"media_type","","The media type for this query, that can be known, unknown, or \"all\".",108,null],[12,"expressions","","The set of expressions that this media query contains.",108,null],[3,"MediaType","","https://drafts.csswg.org/mediaqueries/#media-types",null,null],[12,"0","","",109,null],[4,"Qualifier","","https://drafts.csswg.org/mediaqueries/#mq-prefix",null,null],[13,"Only","","Hide a media query from legacy UAs: https://drafts.csswg.org/mediaqueries/#mq-only",110,null],[13,"Not","","Negate a media query: https://drafts.csswg.org/mediaqueries/#mq-not",110,null],[4,"MediaQueryType","","http://dev.w3.org/csswg/mediaqueries-3/#media0",null,null],[13,"All","","A media type that matches every device.",111,null],[13,"Concrete","","A specific media type.",111,null],[5,"parse_media_query_list","","Parse a media query list from CSS.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"r"}],"output":{"name":"medialist"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"medialist"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",107,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"empty","","Create an empty MediaList.",107,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"qualifier"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"qualifier"}],"output":{"name":"bool"}}],[11,"to_css","","",110,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"mediaquery"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"mediaquery"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"mediaquery"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Trivially constructs a new media query.",108,{"inputs":[{"name":"option"},{"name":"mediaquerytype"},{"name":"vec"}],"output":{"name":"mediaquery"}}],[11,"to_css","","",108,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"mediaquerytype"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"mediaquerytype"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"mediaquerytype"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"screen","","The `screen` media type.",109,{"inputs":[],"output":{"name":"self"}}],[11,"print","","The `print` media type.",109,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","Parse a media query given css input.",108,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"evaluate","","Evaluate a whole `MediaList` against `Device`.",107,{"inputs":[{"name":"self"},{"name":"device"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"is_empty","","Whether this `MediaList` contains no media queries.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"append_medium","","Append a new media query item to the media list. https://drafts.csswg.org/cssom/#dom-medialist-appendmedium",107,{"inputs":[{"name":"self"},{"name":"parsercontext"},{"name":"str"}],"output":{"name":"bool"}}],[11,"delete_medium","","Delete a media query from the media list. https://drafts.csswg.org/cssom/#dom-medialist-deletemedium",107,{"inputs":[{"name":"self"},{"name":"parsercontext"},{"name":"str"}],"output":{"name":"bool"}}],[0,"parallel","style","Implements parallel traversal over the DOM tree.",null,null],[4,"DispatchMode","style::parallel","Controls whether traverse_nodes may make a recursive call to continue doing work, or whether it should always dispatch work asynchronously.",null,null],[13,"TailCall","","This is the last operation by the caller.",112,null],[13,"NotTailCall","","This is not the last operation by the caller.",112,null],[5,"traverse_nodes","","Enqueues |nodes| for processing, possibly on this thread if the tail call conditions are met.",null,{"inputs":[{"name":"i"},{"name":"dispatchmode"},{"name":"bool"},{"name":"opaquenode"},{"name":"perleveltraversaldata"},{"name":"scope"},{"name":"threadpool"},{"name":"d"},{"name":"scopedtls"}],"output":null}],[17,"STYLE_THREAD_STACK_SIZE_KB","","The minimum stack size for a thread in the styling pool, in kilobytes.",null,null],[17,"STACK_SAFETY_MARGIN_KB","","The stack margin. If we get this deep in the stack, we will skip recursive optimizations to ensure that there is sufficient room for non-recursive work.",null,null],[17,"WORK_UNIT_MAX","","The maximum number of child nodes that we will process as a single unit.",null,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"dispatchmode"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"dispatchmode"}],"output":{"name":"bool"}}],[0,"parser","style","The context within which CSS code is parsed.",null,null],[3,"ParserErrorContext","style::parser","The context required to report a parse error.",null,null],[12,"error_reporter","","An error reporter to report syntax errors.",113,null],[3,"ParserContext","","The data that the parser needs from outside in order to parse a stylesheet.",null,null],[12,"stylesheet_origin","","The `Origin` of the stylesheet, whether it's a user, author or user-agent stylesheet.",114,null],[12,"url_data","","The extra data we need for resolving url values.",114,null],[12,"rule_type","","The current rule type, if any.",114,null],[12,"parsing_mode","","The mode to use when parsing.",114,null],[12,"quirks_mode","","The quirks mode of this stylesheet.",114,null],[12,"namespaces","","The currently active namespaces.",114,null],[8,"Parse","","A trait to abstract parsing of a specified value given a `ParserContext` and CSS input.",null,null],[10,"parse","","Parse a value of this type.",115,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"new","","Create a parser context.",114,{"inputs":[{"name":"origin"},{"name":"urlextradata"},{"name":"option"},{"name":"parsingmode"},{"name":"quirksmode"}],"output":{"name":"parsercontext"}}],[11,"new_for_cssom","","Create a parser context for on-the-fly parsing in CSSOM",114,{"inputs":[{"name":"urlextradata"},{"name":"option"},{"name":"parsingmode"},{"name":"quirksmode"}],"output":{"name":"parsercontext"}}],[11,"new_with_rule_type","","Create a parser context based on a previous context, but with a modified rule type.",114,{"inputs":[{"name":"parsercontext"},{"name":"cssruletype"},{"name":"namespaces"}],"output":{"name":"parsercontext"}}],[11,"rule_type","","Get the rule type, which assumes that one is available.",114,{"inputs":[{"name":"self"}],"output":{"name":"cssruletype"}}],[11,"log_css_error","","Record a CSS parse error with this context’s error reporting.",114,{"inputs":[{"name":"self"},{"name":"parsererrorcontext"},{"name":"sourcelocation"},{"name":"contextualparseerror"}],"output":null}],[0,"rule_cache","style","A cache from rule node to computed values, in order to cache reset properties.",null,null],[3,"RuleCacheConditions","style::rule_cache","The conditions for caching and matching a style in the rule cache.",null,null],[3,"RuleCache","","A TLS cache from rules matched to computed values.",null,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"rulecacheconditions"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"rulecacheconditions"}}],[11,"set_font_size_dependency","","Sets the style as depending in the font-size value.",116,{"inputs":[{"name":"self"},{"name":"nonnegativelength"}],"output":null}],[11,"set_uncacheable","","Sets the style as uncacheable.",116,{"inputs":[{"name":"self"}],"output":null}],[11,"set_writing_mode_dependency","","Sets the style as depending in the writing-mode value `writing_mode`.",116,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"new","","Creates an empty `RuleCache`.",117,{"inputs":[],"output":{"name":"self"}}],[11,"find","","Finds a node in the properties matched cache.",117,{"inputs":[{"name":"self"},{"name":"stylebuilder"}],"output":{"name":"option"}}],[11,"insert_if_possible","","Inserts a node into the rules cache if possible.",117,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"option"},{"name":"rulecacheconditions"}],"output":{"name":"bool"}}],[0,"rule_tree","style","The rule tree.",null,null],[3,"RuleTree","style::rule_tree","The rule tree, the structure servo uses to preserve the results of selector matching.",null,null],[3,"RuleNode","","A node in the rule tree.",null,null],[3,"StrongRuleNode","","A strong reference to a rule node.",null,null],[3,"SelfAndAncestors","","An iterator over a rule node and its ancestors.",null,null],[4,"StyleSource","","A style source for the rule node. It can either be a CSS style rule or a declaration block.",null,null],[13,"Style","","A style rule stable pointer.",118,null],[13,"Declarations","","A declaration block stable pointer.",118,null],[13,"None","","Indicates no style source. Used to save an Option wrapper around the stylesource in RuleNode",118,null],[4,"CascadeLevel","","The cascade level these rules are relevant at, as per[1].",null,null],[13,"UANormal","","Normal User-Agent rules.",119,null],[13,"PresHints","","Presentational hints.",119,null],[13,"UserNormal","","User normal rules.",119,null],[13,"XBL","","XBL  rules.",119,null],[13,"AuthorNormal","","Author normal rules.",119,null],[13,"StyleAttributeNormal","","Style attribute normal rules.",119,null],[13,"SMILOverride","","SVG SMIL animations.",119,null],[13,"Animations","","CSS animations and script-generated animations.",119,null],[13,"AuthorImportant","","Author-supplied important rules.",119,null],[13,"StyleAttributeImportant","","Style attribute important rules.",119,null],[13,"UserImportant","","User important rules.",119,null],[13,"UAImportant","","User-agent important rules.",119,null],[13,"Transitions","","Transitions",119,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"stylesource"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"read","","Read the style source guard, and obtain thus read access to the underlying property declaration block.",118,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"propertydeclarationblock"}}],[11,"is_some","","Indicates if this StyleSource has a value",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Construct a new rule tree.",120,{"inputs":[],"output":{"name":"self"}}],[11,"root","","Get the root rule node.",120,{"inputs":[{"name":"self"}],"output":{"name":"strongrulenode"}}],[11,"dump_stdout","","Dump the rule tree to stdout.",120,{"inputs":[{"name":"self"},{"name":"stylesheetguards"}],"output":null}],[11,"insert_ordered_rules_with_important","","Inserts the given rules, that must be in proper order by specifity, and returns the corresponding rule node representing the last inserted one.",120,{"inputs":[{"name":"self"},{"name":"i"},{"name":"stylesheetguards"}],"output":{"name":"strongrulenode"}}],[11,"compute_rule_node","","Given a list of applicable declarations, insert the rules and return the corresponding rule node.",120,{"inputs":[{"name":"self"},{"name":"applicabledeclarationlist"},{"name":"stylesheetguards"}],"output":{"name":"strongrulenode"}}],[11,"insert_ordered_rules","","Insert the given rules, that must be in proper order by specifity, and return the corresponding rule node representing the last inserted one.",120,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"strongrulenode"}}],[11,"gc","","This can only be called when no other threads is accessing this tree.",120,{"inputs":[{"name":"self"}],"output":null}],[11,"maybe_gc","","This can only be called when no other threads is accessing this tree.",120,{"inputs":[{"name":"self"}],"output":null}],[11,"update_rule_at_level","","Replaces a rule in a given level (if present) for another rule.",120,{"inputs":[{"name":"self"},{"name":"cascadelevel"},{"name":"option"},{"name":"strongrulenode"},{"name":"stylesheetguards"},{"name":"bool"}],"output":{"name":"option"}}],[11,"remove_transition_rule_if_applicable","","Returns new rule nodes without Transitions level rule.",120,{"inputs":[{"name":"self"},{"name":"strongrulenode"}],"output":{"name":"strongrulenode"}}],[11,"remove_animation_rules","","Returns new rule node without rules from declarative animations.",120,{"inputs":[{"name":"self"},{"name":"strongrulenode"}],"output":{"name":"strongrulenode"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"cascadelevel"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"cascadelevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"cascadelevel"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_byte","","Converts a raw byte to a CascadeLevel.",119,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"guard","","Select a lock guard for this level",119,{"inputs":[{"name":"self"},{"name":"stylesheetguards"}],"output":{"name":"sharedrwlockreadguard"}}],[11,"is_unique_per_element","","Returns whether this cascade level is unique per element, in which case we can replace the path in the cascade without fear.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_important","","Returns whether this cascade level represents important rules of some sort.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"importance","","Returns the importance relevant for this rule. Pretty similar to `is_important`.",119,{"inputs":[{"name":"self"}],"output":{"name":"importance"}}],[11,"is_animation","","Returns whether this cascade level represents an animation rules.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"strongrulenode"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"strongrulenode"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Raw pointer to the RuleNode",121,null],[11,"style_source","","Get the style source corresponding to this rule node. May return `None` if it's the root node, which means that the node hasn't matched any rules.",121,{"inputs":[{"name":"self"}],"output":{"name":"stylesource"}}],[11,"cascade_level","","The cascade level for this node",121,{"inputs":[{"name":"self"}],"output":{"name":"cascadelevel"}}],[11,"importance","","Get the importance that this rule node represents.",121,{"inputs":[{"name":"self"}],"output":{"name":"importance"}}],[11,"self_and_ancestors","","Get an iterator for this rule node and its ancestors.",121,{"inputs":[{"name":"self"}],"output":{"name":"selfandancestors"}}],[11,"has_children_for_testing","","Returns whether this node has any child, only intended for testing purposes, and called on a single-threaded fashion only.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animation_or_transition_rules","","Returns true if there is either animation or transition level rule.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_properties_overriding_animations","","Get a set of properties whose CascadeLevel are higher than Animations but not equal to Transitions.",121,null],[11,"get_smil_animation_rule","","Returns SMIL override declaration block if exists.",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"selfandancestors"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[0,"scoped_tls","style","Stack-scoped thread-local storage for rayon thread pools.",null,null],[3,"ScopedTLS","style::scoped_tls","A scoped TLS set, that is alive during the `'scope` lifetime.",null,null],[11,"new","","Create a new scoped TLS that will last as long as this rayon threadpool reference.",123,{"inputs":[{"name":"threadpool"}],"output":{"name":"self"}}],[11,"borrow","","Return an immutable reference to the `Option<T>` that this thread owns.",123,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Return a mutable reference to the `Option<T>` that this thread owns.",123,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"ensure","","Ensure that the current data this thread owns is initialized, or initialize it using `f`.  We want ensure() to be fast and inline, and we want to inline the memmove that initializes the Option.  But we don't want to inline space for the entire large T struct in our stack frame. That's why we hand `f` a mutable borrow to write to instead of just having it return a T.",123,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"unsafe_get","","Unsafe access to the slots. This can be used to access the TLS when the caller knows that the pool does not have access to the TLS.",123,null],[0,"selector_map","style","A data structure to efficiently index structs containing selectors by local name, ids and hash.",null,null],[3,"PrecomputedHasher","style::selector_map","A hasher implementation that doesn't hash anything, because it expects its input to be a suitable u32 hash.",null,null],[3,"SelectorMap","","Map element data to selector-providing objects for which the last simple selector starts with them.",null,null],[12,"id_hash","","A hash from an ID to rules which contain that ID selector.",124,null],[12,"class_hash","","A hash from a class name to rules which contain that class selector.",124,null],[12,"local_name_hash","","A hash from local name to rules which contain that local name selector.",124,null],[12,"other","","Rules that don't have ID, class, or element selectors.",124,null],[12,"count","","The number of entries in this map.",124,null],[3,"MaybeCaseInsensitiveHashMap","","Wrapper for PrecomputedHashMap that does ASCII-case-insensitive lookup in quirks mode.",null,null],[6,"PrecomputedHashMap","","A simple alias for a hashmap using PrecomputedHasher.",null,null],[6,"PrecomputedHashSet","","A simple alias for a hashset using PrecomputedHasher.",null,null],[8,"SelectorMapEntry","","A trait to abstract over a given selector map entry.",null,null],[10,"selector","","Gets the selector we should use to index in the selector map.",125,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"write","","",126,null],[11,"write_u32","","",126,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"finish","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Trivially constructs an empty `SelectorMap`.",124,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","Clears the hashmap retaining storage.",124,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","Returns whether there are any entries in the map.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries.",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_all_matching_rules","","Append to `rule_list` all Rules in `self` that match element.",124,{"inputs":[{"name":"self"},{"name":"e"},{"name":"e"},{"name":"v"},{"name":"matchingcontext"},{"name":"quirksmode"},{"name":"f"},{"name":"cascadelevel"}],"output":null}],[11,"insert","","Inserts into the correct hash, trying id, class, and localname.",124,{"inputs":[{"name":"self"},{"name":"t"},{"name":"quirksmode"}],"output":{"name":"result"}}],[11,"lookup","","Looks up entries by id, class, local name, and other (in order).",124,{"inputs":[{"name":"self"},{"name":"e"},{"name":"quirksmode"},{"name":"f"}],"output":{"name":"bool"}}],[11,"lookup_with_additional","","Performs a normal lookup, and also looks up entries for the passed-in id and classes.",124,null],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Empty map",127,{"inputs":[],"output":{"name":"self"}}],[11,"entry","","HashMap::entry",127,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"quirksmode"}],"output":{"name":"entry"}}],[11,"try_entry","","HashMap::try_entry",127,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"quirksmode"}],"output":{"name":"result"}}],[11,"iter","","HashMap::iter",127,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","HashMap::clear",127,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","HashMap::get",127,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"quirksmode"}],"output":{"name":"option"}}],[0,"selector_parser","style","The pseudo-classes and pseudo-elements supported by the style system.",null,null],[3,"SelectorParser","style::selector_parser","Servo's selector parser.",null,null],[12,"stylesheet_origin","","The origin of the stylesheet we're parsing.",128,null],[12,"namespaces","","The namespace set of the stylesheet.",128,null],[12,"url_data","","The extra URL data of the stylesheet, which is used to look up whether we are parsing a chrome:// URL style sheet.",128,null],[3,"PerPseudoElementMap","","A per-functional-pseudo map, from a given pseudo to a `T`.",null,null],[4,"PseudoElementCascadeType","","This enumeration determines if a pseudo-element is eagerly cascaded or not.",null,null],[13,"Eager","","Eagerly cascaded pseudo-elements are \"normal\" pseudo-elements (i.e. `::before` and `::after`). They inherit styles normally as another selector would do, and they're computed as part of the cascade.",129,null],[13,"Lazy","","Lazy pseudo-elements are affected by selector matching, but they're only computed when needed, and not before. They're useful for general pseudo-elements that are not very common.",129,null],[13,"Precomputed","","Precomputed pseudo-elements skip the cascade process entirely, mostly as an optimisation since they are private pseudo-elements (like `::-servo-details-content`).",129,null],[6,"AttrValue","","A convenient alias for the type that represents an attribute value used for selector parser implementation.",null,null],[8,"ElementExt","","An extension to rust-selector's `Element` trait.",null,null],[10,"matches_user_and_author_rules","","Whether this element should match user and author rules.",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_author_origin_no_namespace","","Parse a selector list with an author origin and without taking into account namespaces.",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"in_user_agent_stylesheet","","Whether we're parsing selectors in a user-agent stylesheet.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"in_chrome_stylesheet","","Whether we're parsing selectors in a stylesheet that has chrome privilege.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"pseudoelementcascadetype"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"pseudoelementcascadetype"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Get an entry in the map.",131,{"inputs":[{"name":"self"},{"name":"pseudoelement"}],"output":{"name":"option"}}],[11,"clear","","Clear this enumerated array.",131,{"inputs":[{"name":"self"}],"output":null}],[11,"set","","Set an entry value.",131,{"inputs":[{"name":"self"},{"name":"pseudoelement"},{"name":"t"}],"output":{"name":"result"}}],[11,"get_or_insert_with","","Get an entry for `pseudo`, or create it with calling `f`.",131,{"inputs":[{"name":"self"},{"name":"pseudoelement"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Get an iterator for the entries.",131,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[0,"shared_lock","style","Different objects protected by the same lock",null,null],[3,"SharedRwLock","style::shared_lock","A shared read/write lock that can protect multiple objects.",null,null],[3,"SharedRwLockReadGuard","","Proof that a shared lock was obtained for reading (servo).",null,null],[3,"SharedRwLockWriteGuard","","Proof that a shared lock was obtained for writing (servo).",null,null],[3,"Locked","","Data protect by a shared lock.",null,null],[3,"DeepCloneParams","","Parameters needed for deep clones.",null,null],[3,"StylesheetGuards","","Guards for a document",null,null],[12,"author","","For author-origin stylesheets.",132,null],[12,"ua_or_user","","For user-agent-origin and user-origin stylesheets",132,null],[8,"ToCssWithGuard","","Like ToCss, but with a lock guard given by the caller.",null,null],[10,"to_css","","Serialize `self` in CSS syntax, writing to `dest`, using the given lock guard.",133,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css_string","","Serialize `self` in CSS syntax using the given lock guard and return a string.",133,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"string"}}],[8,"DeepCloneWithLock","","A trait to do a deep clone of a given CSS type. Gets a lock and a read guard, in order to be able to read and clone nested structures.",null,null],[10,"deep_clone_with_lock","","Deep clones this object.",134,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"sharedrwlock"}}],[11,"heap_size_of_children","","",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new shared lock (servo).",135,{"inputs":[],"output":{"name":"self"}}],[11,"wrap","","Wrap the given data to make its access protected by this lock.",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"locked"}}],[11,"read","","Obtain the lock for reading (servo).",135,{"inputs":[{"name":"self"}],"output":{"name":"sharedrwlockreadguard"}}],[11,"write","","Obtain the lock for writing (servo).",135,{"inputs":[{"name":"self"}],"output":{"name":"sharedrwlockwriteguard"}}],[11,"drop","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read_with","","Access the data for reading.",138,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"t"}}],[11,"write_with","","Access the data for writing.",138,{"inputs":[{"name":"self"},{"name":"sharedrwlockwriteguard"}],"output":{"name":"t"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"stylesheetguards"}}],[11,"for_origin","","Get the guard for a given stylesheet origin.",132,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"sharedrwlockreadguard"}}],[11,"same","","Same guard for all origins",132,{"inputs":[{"name":"sharedrwlockreadguard"}],"output":{"name":"self"}}],[0,"sharing","style","Code related to the style sharing cache, an optimization that allows similar nodes to share style without having to run selector matching twice.",null,null],[3,"OpaqueComputedValues","style::sharing","Opaque pointer type to compare ComputedValues identities.",null,null],[3,"ValidationData","","Some data we want to avoid recomputing all the time while trying to share style.",null,null],[3,"StyleSharingCandidate","","Information regarding a style sharing candidate, that is, an entry in the style sharing cache.",null,null],[3,"StyleSharingTarget","","An element we want to test against the style sharing cache.",null,null],[3,"StyleSharingCache","","An LRU cache of the last few nodes seen, so that we can aggressively try to reuse their styles.",null,null],[4,"StyleSharingBehavior","","Controls whether the style sharing cache is used.",null,null],[13,"Allow","","Style sharing allowed.",139,null],[13,"Disallow","","Style sharing disallowed.",139,null],[17,"SHARING_CACHE_SIZE","","The amount of nodes that the style sharing candidate cache should hold at most.  We'd somewhat like 32, but ArrayDeque only implements certain backing store sizes.  A cache size of 32 would mean a backing store of 33, but that's not an implemented size: we can do 32 or 40.",null,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"stylesharingbehavior"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"stylesharingbehavior"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"opaquecomputedvalues"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"opaquecomputedvalues"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"opaquecomputedvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"validationdata"}}],[11,"take","","Move the cached data to a new instance, and return it.",141,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pres_hints","","Get or compute the list of presentational attributes associated with this element.",141,null],[11,"class_list","","Get or compute the class-list associated with this element.",141,null],[11,"parent_style_identity","","Get or compute the parent style identity.",141,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"opaquecomputedvalues"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",143,null],[11,"new","","Trivially construct a new StyleSharingTarget to test against the cache.",143,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"share_style_if_possible","","Attempts to share a style with another node.",143,{"inputs":[{"name":"self"},{"name":"stylecontext"}],"output":{"name":"option"}}],[11,"take_validation_data","","Gets the validation data used to match against this target, if any.",143,{"inputs":[{"name":"self"}],"output":{"name":"validationdata"}}],[11,"drop","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new style sharing candidate cache.",144,{"inputs":[],"output":{"name":"self"}}],[11,"insert_if_possible","","Tries to insert an element in the style sharing cache.",144,{"inputs":[{"name":"self"},{"name":"e"},{"name":"primarystyle"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"clear","","Clear the style sharing candidate cache.",144,{"inputs":[{"name":"self"}],"output":null}],[11,"lookup_by_rules","","Attempts to find an element in the cache with the given primary rule node and parent.",144,{"inputs":[{"name":"self"},{"name":"sharedstylecontext"},{"name":"computedvalues"},{"name":"strongrulenode"},{"name":"option"},{"name":"e"}],"output":{"name":"option"}}],[0,"style_resolver","style","Style resolution for a given element or pseudo-element.",null,null],[3,"StyleResolverForElement","style::style_resolver","A struct that takes care of resolving the style of a given element.",null,null],[3,"ResolvedStyle","","A style returned from the resolver machinery.",null,null],[12,"0","","",145,null],[3,"PrimaryStyle","","The primary style of an element or an element-backed pseudo-element.",null,null],[12,"style","","The style itself.",146,null],[12,"reused_via_rule_node","","Whether the style was reused from another element via the rule node (see `StyleSharingCache::lookup_by_rules`).",146,null],[3,"ResolvedElementStyles","","A set of style returned from the resolver machinery.",null,null],[12,"primary","","Primary style.",147,null],[12,"pseudos","","Pseudo styles.",147,null],[4,"PseudoElementResolution","","Whether pseudo-elements should be resolved or not.",null,null],[13,"IfApplicable","","Only resolve pseudo-styles if possibly applicable.",148,null],[13,"Force","","Force pseudo-element resolution.",148,null],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"pseudoelementresolution"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"pseudoelementresolution"}],"output":{"name":"bool"}}],[11,"style","","Convenience accessor for the style.",146,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"from","style::data","",45,{"inputs":[{"name":"resolvedelementstyles"}],"output":{"name":"elementstyles"}}],[11,"new","style::style_resolver","Trivially construct a new StyleResolverForElement.",149,{"inputs":[{"name":"e"},{"name":"stylecontext"},{"name":"ruleinclusion"},{"name":"pseudoelementresolution"}],"output":{"name":"self"}}],[11,"resolve_primary_style","","Resolve just the style of a given element.",149,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"primarystyle"}}],[11,"resolve_style","","Resolve the style of a given element, and all its eager pseudo-elements.",149,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"resolvedelementstyles"}}],[11,"resolve_style_with_default_parents","","Resolve an element's styles with the default inheritance parent/layout parents.",149,{"inputs":[{"name":"self"}],"output":{"name":"resolvedelementstyles"}}],[11,"cascade_style_and_visited_with_default_parents","","Cascade a set of rules, using the default parent for inheritance.",149,{"inputs":[{"name":"self"},{"name":"cascadeinputs"}],"output":{"name":"resolvedstyle"}}],[11,"cascade_styles_with_default_parents","","Cascade the element and pseudo-element styles with the default parents.",149,{"inputs":[{"name":"self"},{"name":"elementcascadeinputs"}],"output":{"name":"resolvedelementstyles"}}],[0,"stylist","style","Selector matching.",null,null],[3,"Stylist","style::stylist","This structure holds all the selectors and device characteristics for a given document. The selectors are converted into `Rule`s and sorted into `SelectorMap`s keyed off stylesheet origin and pseudo-element (see `CascadeData`).",null,null],[3,"ExtraStyleData","","This struct holds data which users of Stylist may want to extract from stylesheets which can be done at the same time as updating.",null,null],[3,"ExtraStyleDataIterator","","An iterator over the different ExtraStyleData.",null,null],[3,"Rule","","A rule, that wraps a style rule, but represents a single selector of the rule.",null,null],[12,"selector","","The selector this struct represents. We store this and the any_{important,normal} booleans inline in the Rule to avoid pointer-chasing when gathering applicable declarations, which can ruin performance when there are a lot of rules.",150,null],[12,"hashes","","The ancestor hashes associated with the selector.",150,null],[12,"source_order","","The source order this style rule appears in. Note that we only use three bytes to store this value in ApplicableDeclarationsBlock, so we could repurpose that storage here if we needed to.",150,null],[12,"style_rule","","The actual style rule.",150,null],[4,"RuleInclusion","","What cascade levels to include when styling elements.",null,null],[13,"All","","Include rules for style sheets at all cascade levels.  This is the normal rule inclusion mode.",151,null],[13,"DefaultOnly","","Only include rules from UA and user level sheets.  Used to implement `getDefaultComputedStyle`.",151,null],[5,"needs_revalidation_for_testing","","A function to be able to test the revalidation stuff.",null,{"inputs":[{"name":"selector"}],"output":{"name":"bool"}}],[6,"StylistSheet","","The type of the stylesheets that the stylist contains.",null,null],[11,"heap_size_of_children","","",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"ruleinclusion"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"ruleinclusion"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Stylist`, using given `Device` and `QuirksMode`. If more members are added here, think about whether they should be reset in clear().",152,{"inputs":[{"name":"device"},{"name":"quirksmode"}],"output":{"name":"self"}}],[11,"iter_extra_data_origins","","Iterate over the extra data in origin order.",152,{"inputs":[{"name":"self"}],"output":{"name":"extrastyledataiterator"}}],[11,"iter_extra_data_origins_rev","","Iterate over the extra data in reverse origin order.",152,{"inputs":[{"name":"self"}],"output":{"name":"extrastyledataiterator"}}],[11,"num_selectors","","Returns the number of selectors.",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_declarations","","Returns the number of declarations.",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_rebuilds","","Returns the number of times the stylist has been rebuilt.",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_revalidation_selectors","","Returns the number of revalidation_selectors.",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_invalidations","","Returns the number of entries in invalidation maps.",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"each_invalidation_map","","Invokes `f` with the `InvalidationMap` for each origin.",152,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Flush the list of stylesheets if they changed, ensuring the stylist is up-to-date.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"option"}],"output":{"name":"bool"}}],[11,"insert_stylesheet_before","","Insert a given stylesheet before another stylesheet in the document.",152,{"inputs":[{"name":"self"},{"name":"stylistsheet"},{"name":"stylistsheet"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"force_stylesheet_origins_dirty","","Marks a given stylesheet origin as dirty, due to, for example, changes in the declarations that affect a given rule.",152,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"set_author_style_disabled","","Sets whether author style is enabled or not.",152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"stylesheets_have_changed","","Returns whether we've recorded any stylesheet change so far.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"append_stylesheet","","Appends a new stylesheet to the current set.",152,{"inputs":[{"name":"self"},{"name":"stylistsheet"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"prepend_stylesheet","","Appends a new stylesheet to the current set.",152,{"inputs":[{"name":"self"},{"name":"stylistsheet"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"remove_stylesheet","","Remove a given stylesheet to the current set.",152,{"inputs":[{"name":"self"},{"name":"stylistsheet"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"might_have_attribute_dependency","","Returns whether the given attribute might appear in an attribute selector of some rule in the stylist.",152,{"inputs":[{"name":"self"},{"name":"localname"}],"output":{"name":"bool"}}],[11,"might_have_state_dependency","","Returns whether the given ElementState bit might be relied upon by a selector of some rule in the stylist.",152,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"has_state_dependency","","Returns whether the given ElementState bit is relied upon by a selector of some rule in the stylist.",152,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"precomputed_values_for_pseudo","","Computes the style for a given \"precomputed\" pseudo-element, taking the universal rules and applying them.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"pseudoelement"},{"name":"option"},{"name":"cascadeflags"},{"name":"fontmetricsprovider"}],"output":{"name":"arc"}}],[11,"precomputed_values_for_pseudo_with_rule_node","","Computes the style for a given \"precomputed\" pseudo-element with given rule node.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"pseudoelement"},{"name":"option"},{"name":"cascadeflags"},{"name":"fontmetricsprovider"},{"name":"strongrulenode"}],"output":{"name":"arc"}}],[11,"rule_node_for_precomputed_pseudo","","Returns the rule node for given precomputed pseudo-element.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"pseudoelement"},{"name":"option"}],"output":{"name":"strongrulenode"}}],[11,"style_for_anonymous","","Returns the style for an anonymous box of the given type.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"pseudoelement"},{"name":"computedvalues"}],"output":{"name":"arc"}}],[11,"lazily_compute_pseudo_element_style","","Computes a pseudo-element style lazily during layout.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"e"},{"name":"pseudoelement"},{"name":"ruleinclusion"},{"name":"computedvalues"},{"name":"bool"},{"name":"fontmetricsprovider"}],"output":{"name":"option"}}],[11,"compute_pseudo_element_style_with_inputs","","Computes a pseudo-element style lazily using the given CascadeInputs. This can be used for truly lazy pseudo-elements or to avoid redoing selector matching for eager pseudo-elements when we need to recompute their style with a new parent style.",152,{"inputs":[{"name":"self"},{"name":"cascadeinputs"},{"name":"pseudoelement"},{"name":"stylesheetguards"},{"name":"computedvalues"},{"name":"fontmetricsprovider"}],"output":{"name":"option"}}],[11,"compute_style_with_inputs","","Computes a style using the given CascadeInputs.  This can be used to compute a style any time we know what rules apply and just need to use the given parent styles.",152,{"inputs":[{"name":"self"},{"name":"cascadeinputs"},{"name":"option"},{"name":"stylesheetguards"},{"name":"computedvalues"},{"name":"computedvalues"},{"name":"computedvalues"},{"name":"fontmetricsprovider"},{"name":"cascadeflags"}],"output":{"name":"arc"}}],[11,"lazy_pseudo_rules","","Computes the cascade inputs for a lazily-cascaded pseudo-element.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"e"},{"name":"pseudoelement"},{"name":"bool"},{"name":"ruleinclusion"}],"output":{"name":"cascadeinputs"}}],[11,"set_device","","Set a given device, which may change the styles that apply to the document.",152,{"inputs":[{"name":"self"},{"name":"device"},{"name":"stylesheetguards"}],"output":{"name":"originset"}}],[11,"media_features_change_changed_style","","Returns whether, given a media feature change, any previously-applicable style has become non-applicable, or vice-versa for each origin.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"}],"output":{"name":"originset"}}],[11,"viewport_constraints","","Returns the viewport constraints that apply to this document because of a @viewport rule.",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"quirks_mode","","Returns the Quirks Mode of the document.",152,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"set_quirks_mode","","Sets the quirks mode of the document.",152,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":null}],[11,"push_applicable_declarations_as_xbl_only_stylist","","Returns the applicable CSS declarations for the given element by treating us as an XBL stylesheet-only stylist.",152,{"inputs":[{"name":"self"},{"name":"e"},{"name":"option"},{"name":"v"}],"output":null}],[11,"push_applicable_declarations","","Returns the applicable CSS declarations for the given element.",152,{"inputs":[{"name":"self"},{"name":"e"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"animationrules"},{"name":"ruleinclusion"},{"name":"v"},{"name":"matchingcontext"},{"name":"f"}],"output":null}],[11,"may_have_rules_for_id","","Given an id, returns whether there might be any rules for that id in any of our rule maps.",152,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"get_animation","","Returns the registered `@keyframes` animation for the specified name.",152,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"option"}}],[11,"match_revalidation_selectors","","Computes the match results of a given element against the set of revalidation selectors.",152,{"inputs":[{"name":"self"},{"name":"e"},{"name":"option"},{"name":"nthindexcache"},{"name":"f"}],"output":{"name":"smallbitvec"}}],[11,"compute_for_declarations","","Computes styles for a given declaration with parent_style.",152,{"inputs":[{"name":"self"},{"name":"stylesheetguards"},{"name":"computedvalues"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"device","","Accessor for a shared reference to the device.",152,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"device_mut","","Accessor for a mutable reference to the device.",152,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"rule_tree","","Accessor for a shared reference to the rule tree.",152,{"inputs":[{"name":"self"}],"output":{"name":"ruletree"}}],[11,"shutdown","","Shutdown the static data that this module stores.",152,{"inputs":[],"output":null}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"extrastyledata"}}],[11,"heap_size_of_children","","",153,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"rule"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"selector","","",150,{"inputs":[{"name":"self"}],"output":{"name":"selectoriter"}}],[11,"specificity","","Returns the specificity of the rule.",150,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_applicable_declaration_block","","Turns this rule into an `ApplicableDeclarationBlock` for the given cascade level.",150,{"inputs":[{"name":"self"},{"name":"cascadelevel"}],"output":{"name":"applicabledeclarationblock"}}],[11,"new","","Creates a new Rule.",150,{"inputs":[{"name":"selector"},{"name":"ancestorhashes"},{"name":"arc"},{"name":"u32"}],"output":{"name":"self"}}],[0,"servo","style","Servo-specific bits of the style system.",null,null],[0,"media_queries","style::servo","Servo's media-query device and expression representation.",null,null],[3,"Device","style::servo::media_queries","A device is a structure that represents the current media a given document is displayed in.",null,null],[3,"Expression","","A single expression a per:",null,null],[4,"ExpressionKind","","A expression kind servo understands and parses.",null,null],[13,"Width","","http://dev.w3.org/csswg/mediaqueries-3/#width",155,null],[4,"Range","","An enumeration that represents a ranged value.",null,null],[13,"Min","","At least the inner value.",156,null],[13,"Max","","At most the inner value.",156,null],[13,"Eq","","Exactly the inner value.",156,null],[11,"heap_size_of_children","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Trivially construct a new `Device`.",157,{"inputs":[{"name":"mediatype"},{"name":"typedsize2d"},{"name":"scalefactor"}],"output":{"name":"device"}}],[11,"default_computed_values","","Return the default computed values for this device.",157,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"root_font_size","","Get the font size of the root element (for rem)",157,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"set_root_font_size","","Set the font size of the root element (for rem)",157,{"inputs":[{"name":"self"},{"name":"au"}],"output":null}],[11,"set_body_text_color","","Sets the body text color for the \"inherit color from body\" quirk.",157,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"used_root_font_size","","Returns whether we ever looked up the root font size of the Device.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"au_viewport_size","","Returns the viewport size of the current device in app units, needed, among other things, to resolve viewport units.",157,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"au_viewport_size_for_viewport_unit_resolution","","Like the above, but records that we've used viewport units.",157,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"used_viewport_units","","Whether viewport units were used since the last device change.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"device_pixel_ratio","","Returns the device pixel ratio.",157,{"inputs":[{"name":"self"}],"output":{"name":"scalefactor"}}],[11,"account_for_viewport_rule","","Take into account a viewport rule taken from the stylesheets.",157,{"inputs":[{"name":"self"},{"name":"viewportconstraints"}],"output":null}],[11,"media_type","","Return the media type of the current device.",157,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"use_document_colors","","Returns whether document colors are enabled.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default_background_color","","Returns the default background color.",157,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"expressionkind"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"expressionkind"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"expressionkind"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",155,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"expression"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",158,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind_for_testing","","The kind of expression we're, just for unit testing.",158,{"inputs":[{"name":"self"}],"output":{"name":"expressionkind"}}],[11,"parse","","Parse a media expression of the form:",158,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"matches","","Evaluate this expression and return whether it matches the current device.",158,{"inputs":[{"name":"self"},{"name":"device"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"to_css","","",158,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"restyle_damage","style::servo","The restyle damage is a hint that tells layout which kind of operations may be needed in presence of incremental style changes.",null,null],[3,"ServoRestyleDamage","style::servo::restyle_damage","Individual layout actions that may be necessary after restyling.",null,null],[17,"REPAINT","","Repaint the node itself. Currently unused; need to decide how this propagates.",null,null],[17,"REPOSITION","","The stacking-context-relative position of this node or its descendants has changed. Propagates both up and down the flow tree.",null,null],[17,"STORE_OVERFLOW","","Recompute the overflow regions (bounding box of object and all descendants). Propagates down the flow tree because the computation is bottom-up.",null,null],[17,"BUBBLE_ISIZES","","Recompute intrinsic inline_sizes (minimum and preferred). Propagates down the flow tree because the computation is bottom-up.",null,null],[17,"REFLOW_OUT_OF_FLOW","","Recompute actual inline-sizes and block-sizes, only taking out-of-flow children into account. Propagates up the flow tree because the computation is top-down.",null,null],[17,"REFLOW","","Recompute actual inline_sizes and block_sizes. Propagates up the flow tree because the computation is top-down.",null,null],[17,"RESOLVE_GENERATED_CONTENT","","Re-resolve generated content. Propagates up the flow tree because the computation is inorder.",null,null],[17,"RECONSTRUCT_FLOW","","The entire flow needs to be reconstructed.",null,null],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"servorestyledamage"}}],[11,"partial_cmp","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"option"}}],[11,"lt","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"le","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"gt","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"ge","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"cmp","","",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"ordering"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",159,{"inputs":[],"output":{"name":"servorestyledamage"}}],[11,"all","","Returns the set containing all flags.",159,{"inputs":[],"output":{"name":"servorestyledamage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",159,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",159,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",159,{"inputs":[{"name":"u8"}],"output":{"name":"servorestyledamage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"servorestyledamage"}}],[11,"bitor_assign","","Adds the set of flags.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"servorestyledamage"}}],[11,"bitxor_assign","","Toggles the set of flags.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"servorestyledamage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":{"name":"servorestyledamage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",159,{"inputs":[{"name":"self"},{"name":"servorestyledamage"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",159,{"inputs":[{"name":"self"}],"output":{"name":"servorestyledamage"}}],[11,"extend","","",159,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"servorestyledamage"}}],[11,"heap_size_of_children","","",159,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compute_style_difference","","Compute the `StyleDifference` (including the appropriate restyle damage) for a given style change between `old` and `new`.",159,{"inputs":[{"name":"computedvalues"},{"name":"computedvalues"}],"output":{"name":"styledifference"}}],[11,"rebuild_and_reflow","","Returns a bitmask that represents a flow that needs to be rebuilt and reflowed.",159,{"inputs":[],"output":{"name":"servorestyledamage"}}],[11,"reconstruct","","Returns a bitmask indicating that the frame needs to be reconstructed.",159,{"inputs":[],"output":{"name":"servorestyledamage"}}],[11,"damage_for_parent","","Supposing a flow has the given `position` property and this damage, returns the damage that we should add to the parent of this flow.",159,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"servorestyledamage"}}],[11,"damage_for_child","","Supposing the parent of a flow with the given `position` property has this damage, returns the damage that we should add to this flow.",159,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"servorestyledamage"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"selector_parser","style::servo","Servo's selector parser.",null,null],[3,"SelectorImpl","style::servo::selector_parser","The abstract struct we implement the selector parser implementation on top of.",null,null],[3,"SnapshotMap","","A map from elements to snapshots for the Servo style back-end.",null,null],[3,"ServoElementSnapshot","","Servo's version of an element snapshot.",null,null],[12,"state","","The stored state of the element.",160,null],[12,"attrs","","The set of stored attributes and its values.",160,null],[12,"is_html_element_in_html_document","","Whether this element is an HTML element in an HTML document.",160,null],[12,"class_changed","","Whether the class attribute changed or not.",160,null],[12,"id_changed","","Whether the id attribute changed or not.",160,null],[12,"other_attributes_changed","","Whether other attributes other than id or class changed or not.",160,null],[4,"PseudoElement","","A pseudo-element, both public and private.",null,null],[13,"After","","",161,null],[13,"Before","","",161,null],[13,"Selection","","",161,null],[13,"DetailsSummary","","",161,null],[13,"DetailsContent","","",161,null],[13,"ServoText","","",161,null],[13,"ServoInputText","","",161,null],[13,"ServoTableWrapper","","",161,null],[13,"ServoAnonymousTableWrapper","","",161,null],[13,"ServoAnonymousTable","","",161,null],[13,"ServoAnonymousTableRow","","",161,null],[13,"ServoAnonymousTableCell","","",161,null],[13,"ServoAnonymousBlock","","",161,null],[13,"ServoInlineBlockWrapper","","",161,null],[13,"ServoInlineAbsolute","","",161,null],[4,"NonTSPseudoClass","","A non tree-structural pseudo-class. See https://drafts.csswg.org/selectors-4/#structural-pseudos",null,null],[13,"Active","","",162,null],[13,"AnyLink","","",162,null],[13,"Checked","","",162,null],[13,"Disabled","","",162,null],[13,"Enabled","","",162,null],[13,"Focus","","",162,null],[13,"Fullscreen","","",162,null],[13,"Hover","","",162,null],[13,"Indeterminate","","",162,null],[13,"Lang","","",162,null],[13,"Link","","",162,null],[13,"PlaceholderShown","","",162,null],[13,"ReadWrite","","",162,null],[13,"ReadOnly","","",162,null],[13,"ServoNonZeroBorder","","",162,null],[13,"ServoCaseSensitiveTypeAttr","","",162,null],[13,"Target","","",162,null],[13,"Visited","","",162,null],[5,"extended_filtering","","Returns whether the language is matched, as defined by RFC 4647.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[6,"PseudoClassStringArg","","The type used for storing pseudo-class string arguments.",null,null],[17,"SIMPLE_PSEUDO_COUNT","","The count of simple (non-functional) pseudo-elements (that is, all pseudo-elements for now).",null,null],[17,"EAGER_PSEUDO_COUNT","","The number of eager pseudo-elements. Keep this in sync with cascade_type.",null,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"pseudoelement"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"pseudoelement"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",161,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"supports_pseudo_class","","",161,{"inputs":[{"name":"self"},{"name":"nontspseudoclass"}],"output":{"name":"bool"}}],[11,"to_css","","",161,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"eager_index","","Gets the canonical index of this eagerly-cascaded pseudo-element.",161,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"simple_index","","An index for this pseudo-element to be indexed in an enumerated array.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"simple_pseudo_none_array","","An array of `None`, one per simple pseudo-element.",161,null],[11,"from_eager_index","","Creates a pseudo-element from an eager index.",161,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"is_before_or_after","","Whether the current pseudo element is ::before or ::after.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_before","","Whether this pseudo-element is the ::before pseudo.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_after","","Whether this pseudo-element is the ::after pseudo.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_first_letter","","Whether the current pseudo element is :first-letter",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_first_line","","Whether the current pseudo element is :first-line",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eager","","Whether this pseudo-element is eagerly-cascaded.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lazy","","Whether this pseudo-element is lazily-cascaded.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anon_box","","Whether this pseudo-element is for an anonymous box.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_item_based_display_fixup","","Whether this pseudo-element skips flex/grid container display-based fixup.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_precomputed","","Whether this pseudo-element is precomputed.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cascade_type","","Returns which kind of cascade type has this pseudo.",161,{"inputs":[{"name":"self"}],"output":{"name":"pseudoelementcascadetype"}}],[11,"canonical","","Covert non-canonical pseudo-element to canonical one, and keep a canonical one as it is.",161,{"inputs":[{"name":"self"}],"output":{"name":"pseudoelement"}}],[11,"pseudo_info","","Stub, only Gecko needs this",161,{"inputs":[{"name":"self"}],"output":null}],[11,"property_restriction","","Property flag that properties must have to apply to this pseudo-element.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"should_exist","","Whether this pseudo-element should actually exist if it has the given styles.",161,{"inputs":[{"name":"self"},{"name":"computedvalues"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"nontspseudoclass"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"nontspseudoclass"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"nontspseudoclass"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",162,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",162,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"visit","","",162,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"state_flag","","Gets a given state flag for this pseudo-class. This is used to do selector matching, and it's set from the DOM.",162,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"needs_cache_revalidation","","Returns true if the given pseudoclass should trigger style sharing cache revalidation.",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_attr_based","","Returns true if the evaluation of the pseudo-class depends on the element's attributes.",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"selectorimpl"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"selectorimpl"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",163,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_active_or_hover","","",163,null],[11,"parse_non_ts_pseudo_class","style::selector_parser","",128,{"inputs":[{"name":"self"},{"name":"cowrcstr"}],"output":{"name":"result"}}],[11,"parse_non_ts_functional_pseudo_class","","",128,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"cssparser"}],"output":{"name":"result"}}],[11,"parse_pseudo_element","","",128,{"inputs":[{"name":"self"},{"name":"cowrcstr"}],"output":{"name":"result"}}],[11,"default_namespace","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"namespace_for_prefix","","",128,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"pseudo_element_cascade_type","style::servo::selector_parser","Returns the pseudo-element cascade type of the given `pseudo`.",163,{"inputs":[{"name":"pseudoelement"}],"output":{"name":"pseudoelementcascadetype"}}],[11,"each_eagerly_cascaded_pseudo_element","","A helper to traverse each eagerly cascaded pseudo-element, executing `fun` on it.",163,{"inputs":[{"name":"f"}],"output":null}],[11,"pseudo_class_state_flag","","Returns the pseudo-class state flag for selector matching.",163,{"inputs":[{"name":"nontspseudoclass"}],"output":{"name":"elementstate"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty `SnapshotMap`.",164,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Get a snapshot given an element.",164,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"deref","","",164,null],[11,"deref_mut","","",164,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",160,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create an empty element snapshot.",160,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"id_changed","","Returns whether the id attribute changed or not.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"class_changed","","Returns whether the class attribute changed or not.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other_attr_changed","","Returns whether other attributes other than id or class changed or not.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"state","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_attrs","","",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"id_attr","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_class","","",160,{"inputs":[{"name":"self"},{"name":"atom"},{"name":"casesensitivity"}],"output":{"name":"bool"}}],[11,"each_class","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"lang_attr","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"attr_matches","","selectors::Element::attr_matches",160,{"inputs":[{"name":"self"},{"name":"namespaceconstraint"},{"name":"localname"},{"name":"attrselectoroperation"}],"output":{"name":"bool"}}],[0,"url","style::servo","Common handling for the specified value CSS url() values.",null,null],[3,"SpecifiedUrl","style::servo::url","A specified url() value for servo.",null,null],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"specifiedurl"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_from_string","","Try to parse a URL from a string value that is a valid CSS token for a URL. Never fails - the API is only fallible to be compatible with the gecko version.",165,{"inputs":[{"name":"string"},{"name":"parsercontext"}],"output":{"name":"result"}}],[11,"is_invalid","","Returns true if the URL is definitely invalid. For Servo URLs, we can use its |resolved| status.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fragment","","Returns true if this URL looks like a fragment. See https://drafts.csswg.org/css-values/#local-urls",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"url","","Returns the resolved url if it was valid.",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","Return the resolved url as string, or the empty string if it's invalid.",165,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"for_cascade","","Creates an already specified url value from an already resolved URL for insertion in the cascade.",165,{"inputs":[{"name":"servourl"}],"output":{"name":"self"}}],[11,"new_for_testing","","Gets a new url from a string for unit tests.",165,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_css","","",165,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",165,null],[11,"from_computed_value","","",165,{"inputs":[{"name":"computedurl"}],"output":{"name":"self"}}],[0,"str","style","String utils for attributes and similar stuff.",null,null],[5,"char_is_whitespace","style::str","Whether a character is a HTML whitespace character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_whitespace","","Whether all the string is HTML whitespace.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"split_html_space_chars","","Split a string on HTML whitespace.",null,{"inputs":[{"name":"str"}],"output":{"name":"filter"}}],[5,"split_commas","","Split a string on commas.",null,{"inputs":[{"name":"str"}],"output":{"name":"filter"}}],[5,"read_numbers","","Read a set of ascii digits and read them into a number.",null,null],[5,"read_fraction","","Read a decimal fraction.",null,null],[5,"read_exponent","","Reads an exponent from an iterator over chars, for example `e100`.",null,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[5,"str_join","","Join a set of strings with a given delimiter `join`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"starts_with_ignore_ascii_case","","Returns true if a given string has a given prefix with case-insensitive match.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"string_as_ascii_lowercase","","Returns an ascii lowercase version of a string, only allocating if needed.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[6,"StaticCharVec","","A static slice of characters.",null,null],[6,"StaticStringVec","","A static slice of `str`s.",null,null],[7,"HTML_SPACE_CHARACTERS","","A \"space character\" according to:",null,null],[0,"style_adjuster","style","A struct to encapsulate all the style fixups and flags propagations a computed style needs in order for it to adhere to the CSS spec.",null,null],[3,"StyleAdjuster","style::style_adjuster","A struct that implements all the adjustment methods.",null,null],[11,"new","","Trivially constructs a new StyleAdjuster.",166,{"inputs":[{"name":"stylebuilder"}],"output":{"name":"self"}}],[11,"set_bits","","Compute a few common flags for both text and element's style.",166,{"inputs":[{"name":"self"}],"output":null}],[11,"adjust","","Adjusts the style to account for various fixups that don't fit naturally into the cascade.",166,{"inputs":[{"name":"self"},{"name":"computedvalues"},{"name":"cascadeflags"}],"output":null}],[0,"stylesheet_set","style","A centralized set of stylesheets for a document.",null,null],[3,"StylesheetCollectionIterator","style::stylesheet_set","A iterator over the stylesheets of a list of entries in the StylesheetSet.",null,null],[3,"StylesheetIterator","","An iterator over the flattened view of the stylesheet collections.",null,null],[3,"StylesheetFlusher","","A struct to iterate over the different stylesheets to be flushed.",null,null],[3,"PerOriginFlusher","","A flusher struct for a given origin, that takes care of returning the appropriate stylesheets that need work.",null,null],[3,"StylesheetSet","","The set of stylesheets effective for a given document.",null,null],[4,"OriginValidity","","The validity of the data in a given cascade origin.",null,null],[13,"Valid","","The origin is clean, all the data already there is valid, though we may have new sheets at the end.",167,null],[13,"CascadeInvalid","","The cascade data is invalid, but not the invalidation data (which is order-independent), and thus only the cascade data should be inserted.",167,null],[13,"FullyInvalid","","Everything needs to be rebuilt.",167,null],[4,"SheetRebuildKind","","The type of rebuild that we need to do for a given stylesheet.",null,null],[13,"Full","","A full rebuild, of both cascade data and invalidation data.",168,null],[13,"CascadeOnly","","A partial rebuild, of only the cascade data.",168,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"stylesheetiterator"}}],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"originvalidity"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",167,{"inputs":[{"name":"self"},{"name":"originvalidity"}],"output":{"name":"ordering"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"originvalidity"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"originvalidity"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"should_rebuild_invalidation","","Whether the stylesheet invalidation data should be rebuilt.",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"origin_validity","","The data validity for a given origin.",171,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"originvalidity"}}],[11,"origin_dirty","","Whether the origin data is dirty in any way.",171,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"manual_origin_sheets","","Returns an iterator over the stylesheets of a given origin, assuming all of them will be flushed.",171,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"stylesheetcollectioniterator"}}],[11,"origin_sheets","","Returns a flusher for the dirty origin `origin`.",171,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"peroriginflusher"}}],[11,"nothing_to_do","","Returns whether running the whole flushing process would be a no-op.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"had_invalidations","","Returns whether any DOM invalidations were processed as a result of the stylesheet flush.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new empty StylesheetSet.",173,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Returns the number of stylesheets in the set.",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Returns the `index`th stylesheet in the set for the given origin.",173,{"inputs":[{"name":"self"},{"name":"origin"},{"name":"usize"}],"output":{"name":"option"}}],[11,"author_style_disabled","","Returns whether author styles have been disabled for the current stylesheet set.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"append_stylesheet","","Appends a new stylesheet to the current set.",173,{"inputs":[{"name":"self"},{"name":"option"},{"name":"s"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"prepend_stylesheet","","Prepend a new stylesheet to the current set.",173,{"inputs":[{"name":"self"},{"name":"option"},{"name":"s"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"insert_stylesheet_before","","Insert a given stylesheet before another stylesheet in the document.",173,{"inputs":[{"name":"self"},{"name":"option"},{"name":"s"},{"name":"s"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"remove_stylesheet","","Remove a given stylesheet from the set.",173,{"inputs":[{"name":"self"},{"name":"option"},{"name":"s"},{"name":"sharedrwlockreadguard"}],"output":null}],[11,"set_author_style_disabled","","Notes that the author style has been disabled for this document.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"has_changed","","Returns whether the given set has changed from the last flush.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"flush","","Flush the current set, unmarking it as dirty, and returns a `StylesheetFlusher` in order to rebuild the stylist.",173,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"stylesheetflusher"}}],[11,"flush_without_invalidation","","Flush stylesheets, but without running any of the invalidation passes.",173,{"inputs":[{"name":"self"}],"output":{"name":"originset"}}],[11,"iter","","Return an iterator over the flattened view of all the stylesheets.",173,{"inputs":[{"name":"self"}],"output":{"name":"stylesheetiterator"}}],[11,"force_dirty","","Mark the stylesheets for the specified origin as dirty, because something external may have invalidated it.",173,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[0,"stylesheets","style","Style sheets and their CSS rules.",null,null],[3,"DocumentRule","style::stylesheets","A @-moz-document rule",null,null],[12,"condition","","The parsed condition",174,null],[12,"rules","","Child rules",174,null],[12,"source_location","","The line and column of the rule's source code.",174,null],[3,"MediaRule","","An [`@media`][media] urle.",null,null],[12,"media_queries","","The list of media queries used by this media rule.",175,null],[12,"rules","","The nested rules to this media rule.",175,null],[12,"source_location","","The source position where this media rule was found.",175,null],[3,"NamespaceRule","","A `@namespace` rule.",null,null],[12,"prefix","","The namespace prefix, and `None` if it's the default Namespace",176,null],[12,"url","","The actual namespace url.",176,null],[12,"source_location","","The source location this rule was found at.",176,null],[3,"PageRule","","A [`@page`][page] rule.",null,null],[12,"block","","The declaration block this page rule contains.",177,null],[12,"source_location","","The source position this rule was found at.",177,null],[3,"TopLevelRuleParser","","The parser for the top-level rules in a stylesheet.",null,null],[12,"stylesheet_origin","","The origin of the stylesheet we're parsing.",178,null],[12,"shared_lock","","A reference to the lock we need to use to create rules.",178,null],[12,"loader","","A reference to a stylesheet loader if applicable, for `@import` rules.",178,null],[12,"context","","The top-level parser context.",178,null],[12,"error_context","","The context required for reporting parse errors.",178,null],[12,"state","","The current state of the parser.",178,null],[12,"had_hierarchy_error","","Whether we have tried to parse was invalid due to being in the wrong place (e.g. an @import rule was found while in the `Body` state). Reset to `false` when `take_had_hierarchy_error` is called.",178,null],[12,"namespaces","","The namespace map we use for parsing. Needs to start as `Some()`, and will be taken out after parsing namespace rules, and that reference will be moved to `ParserContext`.",178,null],[3,"CssRules","","A list of CSS rules.",null,null],[12,"0","","",179,null],[3,"AllRules","","A filter that processes all the rules in a rule list.",null,null],[3,"EffectiveRules","","A struct that represents the condition that a rule applies to the document.",null,null],[3,"RulesIterator","","An iterator over a list of rules.",null,null],[3,"Namespaces","","A set of namespaces applying to a given stylesheet.",null,null],[12,"default","","",180,null],[12,"prefixes","","",180,null],[3,"Stylesheet","","The structure servo uses to represent a stylesheet.",null,null],[12,"contents","","The contents of this stylesheet.",181,null],[12,"shared_lock","","The lock used for objects inside this stylesheet",181,null],[12,"media","","List of media associated with the Stylesheet.",181,null],[12,"disabled","","Whether this stylesheet should be disabled.",181,null],[3,"DocumentStyleSheet","","A simple wrapper over an `Arc<Stylesheet>`, with pointer comparison, and suitable for its use in a `StylesheetSet`.",null,null],[12,"0","","",182,null],[3,"StylesheetContents","","The contents of a given stylesheet. This effectively maps to a StyleSheetInner in Gecko.",null,null],[12,"rules","","List of rules in the order they were found (important for cascading order)",183,null],[12,"origin","","The origin of this stylesheet.",183,null],[12,"url_data","","The url data this stylesheet should use.",183,null],[12,"namespaces","","The namespaces that apply to this stylesheet.",183,null],[12,"quirks_mode","","The quirks mode of this stylesheet.",183,null],[12,"source_map_url","","This stylesheet's source map URL.",183,null],[12,"source_url","","This stylesheet's source URL.",183,null],[3,"UserAgentStylesheets","","This structure holds the user-agent and user stylesheets.",null,null],[12,"shared_lock","","The lock used for user-agent stylesheets.",184,null],[12,"user_or_user_agent_stylesheets","","The user or user agent stylesheets.",184,null],[12,"quirks_mode_stylesheet","","The quirks mode stylesheet.",184,null],[3,"StyleRule","","A style rule, with selectors and declarations.",null,null],[12,"selectors","","The list of selectors in this rule.",185,null],[12,"block","","The declaration block with the properties it contains.",185,null],[12,"source_location","","The location in the sheet where it was found.",185,null],[4,"State","","The current state of the parser.",null,null],[13,"Start","","We haven't started parsing rules.",186,null],[13,"Imports","","We're parsing `@import` rules.",186,null],[13,"Namespaces","","We're parsing `@namespace` rules.",186,null],[13,"Body","","We're parsing the main body of the stylesheet.",186,null],[4,"CssRule","","A CSS rule.",null,null],[13,"Namespace","","",187,null],[13,"Import","","",187,null],[13,"Style","","",187,null],[13,"Media","","",187,null],[13,"FontFace","","",187,null],[13,"FontFeatureValues","","",187,null],[13,"CounterStyle","","",187,null],[13,"Viewport","","",187,null],[13,"Keyframes","","",187,null],[13,"Supports","","",187,null],[13,"Page","","",187,null],[13,"Document","","",187,null],[4,"CssRuleType","","",null,null],[13,"Style","","",188,null],[13,"Charset","","",188,null],[13,"Import","","",188,null],[13,"Media","","",188,null],[13,"FontFace","","",188,null],[13,"Page","","",188,null],[13,"Keyframes","","",188,null],[13,"Keyframe","","",188,null],[13,"Margin","","",188,null],[13,"Namespace","","",188,null],[13,"CounterStyle","","",188,null],[13,"Supports","","",188,null],[13,"Document","","",188,null],[13,"FontFeatureValues","","",188,null],[13,"Viewport","","",188,null],[4,"SingleRuleParseError","","",null,null],[13,"Syntax","","",189,null],[13,"Hierarchy","","",189,null],[4,"RulesMutateError","","",null,null],[13,"Syntax","","",190,null],[13,"IndexSize","","",190,null],[13,"HierarchyRequest","","",190,null],[13,"InvalidState","","",190,null],[11,"clone_conditionally_gecko_or_servo","style::counter_style","",40,{"inputs":[{"name":"self"}],"output":{"name":"counterstylerule"}}],[11,"fmt","style::stylesheets","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",174,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","Deep clones this DocumentRule.",174,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"clone_conditionally_gecko_or_servo","style::font_face","",70,{"inputs":[{"name":"self"}],"output":{"name":"fontfacerule"}}],[0,"font_feature_values_rule","style::stylesheets","The [`@font-feature-values`][font-feature-values] at-rule.",null,null],[3,"FFVDeclaration","style::stylesheets::font_feature_values_rule","A @font-feature-values block declaration. It is `<ident>: <integer>+`. This struct can take 3 value types. - `SingleValue` is to keep just one unsigned integer value. - `PairValues` is to keep one or two unsigned integer values. - `VectorValues` is to keep a list of unsigned integer values.",null,null],[12,"name","","An `<ident>` for declaration name.",191,null],[12,"value","","An `<integer>+` for declaration value.",191,null],[3,"SingleValue","","A @font-feature-values block declaration value that keeps one value.",null,null],[12,"0","","",192,null],[3,"PairValues","","A @font-feature-values block declaration value that keeps one or two values.",null,null],[12,"0","","",193,null],[12,"1","","",193,null],[3,"VectorValues","","A @font-feature-values block declaration value that keeps a list of values.",null,null],[12,"0","","",194,null],[3,"FontFeatureValuesRule","","The [`@font-feature-values`][font-feature-values] at-rule.",null,null],[12,"family_names","","Font family list for @font-feature-values rule. Family names cannot contain generic families. FamilyName also accepts only non-generic names.",195,null],[12,"swash","","A @swash blocksck. Specifies a feature name that will work with the swash() functional notation of font-variant-alternates.",195,null],[12,"stylistic","","A @stylistic block. Specifies a feature name that will work with the annotation() functional notation of font-variant-alternates.",195,null],[12,"ornaments","","A @ornaments block. Specifies a feature name that will work with the ornaments() ] functional notation of font-variant-alternates.",195,null],[12,"annotation","","A @annotation block. Specifies a feature name that will work with the stylistic() functional notation of font-variant-alternates.",195,null],[12,"character_variant","","A @character-variant block. Specifies a feature name that will work with the styleset() functional notation of font-variant-alternates. The value can be a pair.",195,null],[12,"styleset","","A @styleset block. Specifies a feature name that will work with the character-variant() functional notation of font-variant-alternates. The value can be a list.",195,null],[12,"source_location","","The line and column of the rule's source code.",195,null],[5,"parse_family_name_list","","Parses a list of `FamilyName`s.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"ffvdeclaration"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"ffvdeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"ffvdeclaration"}],"output":{"name":"bool"}}],[11,"to_css","","",191,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"singlevalue"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"singlevalue"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"singlevalue"}],"output":{"name":"bool"}}],[11,"parse","","",192,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",192,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"pairvalues"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"pairvalues"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"pairvalues"}],"output":{"name":"bool"}}],[11,"parse","","",193,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",193,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalues"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"vectorvalues"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"vectorvalues"}],"output":{"name":"bool"}}],[11,"parse","","",194,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",194,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"fontfeaturevaluesrule"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"fontfeaturevaluesrule"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"fontfeaturevaluesrule"}],"output":{"name":"bool"}}],[11,"parse","","Parses a `FontFeatureValuesRule`.",195,{"inputs":[{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"},{"name":"vec"},{"name":"sourcelocation"}],"output":{"name":"fontfeaturevaluesrule"}}],[11,"font_family_to_css","","Prints font family names.",195,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"value_to_css","","Prints inside of `@font-feature-values` block.",195,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"len","","Returns length of all at-rules.",195,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",195,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[0,"import_rule","style::stylesheets","The [`@import`][import] at-rule.",null,null],[3,"ImportSheet","style::stylesheets::import_rule","A sheet that is held from an import rule.",null,null],[12,"0","","",196,null],[3,"ImportRule","","The [`@import`][import] at-rule.",null,null],[12,"url","","The `<url>` this `@import` rule is loading.",197,null],[12,"stylesheet","","The stylesheet is always present.",197,null],[12,"source_location","","The line and column of the rule's source code.",197,null],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"media","","Get the media associated with this stylesheet.",196,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"contents","","",196,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"stylesheetcontents"}}],[11,"enabled","","",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deep_clone_with_lock","","",196,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","",197,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"to_css","","",197,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[0,"keyframes_rule","style::stylesheets","Keyframes: https://drafts.csswg.org/css-animations/#keyframes",null,null],[3,"KeyframesRule","style::stylesheets::keyframes_rule","A [`@keyframes`][keyframes] rule.",null,null],[12,"name","","The name of the current animation.",198,null],[12,"keyframes","","The keyframes specified for this CSS rule.",198,null],[12,"vendor_prefix","","Vendor prefix type the @keyframes has.",198,null],[12,"source_location","","The line and column of the rule's source code.",198,null],[3,"KeyframePercentage","","A number from 0 to 1, indicating the percentage of the animation when this keyframe should run.",null,null],[12,"0","","",199,null],[3,"KeyframeSelector","","A keyframes selector is a list of percentages or from/to symbols, which are converted at parse time to percentages.",null,null],[3,"Keyframe","","A keyframe.",null,null],[12,"selector","","The selector this keyframe was specified from.",200,null],[12,"block","","The declaration block that was declared inside this keyframe.",200,null],[12,"source_location","","The line and column of the rule's source code.",200,null],[3,"KeyframesStep","","A single step from a keyframe animation.",null,null],[12,"start_percentage","","The percentage of the animation duration when this step starts.",201,null],[12,"value","","Declarations that will determine the final style during the step, or `ComputedValues` if this is an autogenerated step.",201,null],[12,"declared_timing_function","","Wether a animation-timing-function declaration exists in the list of declarations.",201,null],[3,"KeyframesAnimation","","This structure represents a list of animation steps computed from the list of keyframes, in order.",null,null],[12,"steps","","The difference steps of the animation.",202,null],[12,"properties_changed","","The properties that change in this animation.",202,null],[12,"vendor_prefix","","Vendor prefix type the @keyframes has.",202,null],[4,"KeyframesStepValue","","A keyframes step value. This can be a synthetised keyframes animation, that is, one autogenerated from the current computed values, or a list of declarations to apply.",null,null],[13,"Declarations","","A step formed by a declaration block specified by the CSS.",203,null],[12,"block","style::stylesheets::keyframes_rule::KeyframesStepValue","The declaration block per se.",203,null],[13,"ComputedValues","style::stylesheets::keyframes_rule","A synthetic step computed from the current computed values at the time of the animation.",203,null],[5,"parse_keyframe_list","","Parses a keyframe list from CSS input.",null,{"inputs":[{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"},{"name":"sharedrwlock"}],"output":{"name":"vec"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",198,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"find_rule","","Returns the index of the last keyframe that matches the given selector. If the selector is not valid, or no keyframe is found, returns None.",198,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"str"}],"output":{"name":"option"}}],[11,"deep_clone_with_lock","","",198,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"keyframepercentage"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"option"}}],[11,"lt","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"le","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"gt","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"ge","","",199,{"inputs":[{"name":"self"},{"name":"keyframepercentage"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cmp","","",199,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"to_css","","",199,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Trivially constructs a new `KeyframePercentage`.",199,{"inputs":[{"name":"f32"}],"output":{"name":"keyframepercentage"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"keyframeselector"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"keyframeselector"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"keyframeselector"}],"output":{"name":"bool"}}],[11,"to_css","","",204,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"percentages","","Return the list of percentages this selector contains.",204,null],[11,"new_for_unit_testing","","A dummy public function so we can write a unit test for this.",204,{"inputs":[{"name":"vec"}],"output":{"name":"keyframeselector"}}],[11,"parse","","Parse a keyframe selector from CSS input.",204,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",200,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Parse a CSS keyframe.",200,{"inputs":[{"name":"str"},{"name":"stylesheetcontents"},{"name":"sharedrwlock"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","Deep clones this Keyframe.",200,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"keyframe"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",203,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",201,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_animation_timing_function","","Return specified TransitionTimingFunction if this KeyframesSteps has 'animation-timing-function'.",201,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",202,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_keyframes","","Create a keyframes animation from a given list of keyframes.",202,null],[11,"fmt","style::stylesheets","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",175,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","",175,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"namespacerule"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"namespacerule"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"namespacerule"}],"output":{"name":"bool"}}],[11,"to_css","","",176,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[0,"origin","","CSS cascade origins.",null,null],[3,"OriginSet","style::stylesheets::origin","A set of origins. This is equivalent to Gecko's OriginFlags.",null,null],[3,"OriginSetIterator","","Iterates over the origins present in an `OriginSet`, in order from highest priority (author) to lower (user agent).",null,null],[3,"PerOrigin","","An object that stores a `T` for each origin of the CSS cascade.",null,null],[12,"user_agent","","Data for `Origin::UserAgent`.",205,null],[12,"user","","Data for `Origin::User`.",205,null],[12,"author","","Data for `Origin::Author`.",205,null],[3,"PerOriginIter","","Iterator over `PerOrigin<T>`, from highest level (author) to lowest (user agent).",null,null],[3,"PerOriginIterMut","","Like `PerOriginIter<T>`, but iterates over mutable references to the per-origin data.",null,null],[4,"Origin","","Each style rule has an origin, which determines where it enters the cascade.",null,null],[13,"UserAgent","","https://drafts.csswg.org/css-cascade/#cascade-origin-user-agent",206,null],[13,"User","","https://drafts.csswg.org/css-cascade/#cascade-origin-user",206,null],[13,"Author","","https://drafts.csswg.org/css-cascade/#cascade-origin-author",206,null],[17,"ORIGIN_USER_AGENT","","https://drafts.csswg.org/css-cascade/#cascade-origin-user-agent",null,null],[17,"ORIGIN_USER","","https://drafts.csswg.org/css-cascade/#cascade-origin-user",null,null],[17,"ORIGIN_AUTHOR","","https://drafts.csswg.org/css-cascade/#cascade-origin-author",null,null],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",206,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"originset"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"cmp","","",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"ordering"}}],[11,"hash","","",207,null],[11,"heap_size_of_children","","",207,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",207,{"inputs":[],"output":{"name":"originset"}}],[11,"all","","Returns the set containing all flags.",207,{"inputs":[],"output":{"name":"originset"}}],[11,"bits","","Returns the raw value of the flags currently stored.",207,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",207,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",207,{"inputs":[{"name":"u8"}],"output":{"name":"originset"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"originset"}}],[11,"bitor_assign","","Adds the set of flags.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"originset"}}],[11,"bitxor_assign","","Toggles the set of flags.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"originset"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":{"name":"originset"}}],[11,"sub_assign","","Disables all flags enabled in the set.",207,{"inputs":[{"name":"self"},{"name":"originset"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",207,{"inputs":[{"name":"self"}],"output":{"name":"originset"}}],[11,"extend","","",207,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",207,{"inputs":[{"name":"t"}],"output":{"name":"originset"}}],[11,"iter","","Returns an iterator over the origins present in this `OriginSet`.",207,{"inputs":[{"name":"self"}],"output":{"name":"originsetiterator"}}],[11,"from","","",207,{"inputs":[{"name":"origin"}],"output":{"name":"self"}}],[11,"bitor_assign","","",207,{"inputs":[{"name":"self"},{"name":"origin"}],"output":null}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"originsetiterator"}}],[11,"next","","",208,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",205,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"perorigin"}}],[11,"borrow_for_origin","","Returns a reference to the per-origin data for the specified origin.",205,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"t"}}],[11,"borrow_mut_for_origin","","Returns a mutable reference to the per-origin data for the specified origin.",205,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"t"}}],[11,"iter_origins","","Iterates over references to per-origin extra style data, from highest level (author) to lowest (user agent).",205,{"inputs":[{"name":"self"}],"output":{"name":"peroriginiter"}}],[11,"iter_origins_rev","","Iterates over references to per-origin extra style data, from lowest level (user agent) to highest (author).",205,{"inputs":[{"name":"self"}],"output":{"name":"peroriginiter"}}],[11,"iter_mut_origins","","Iterates over mutable references to per-origin extra style data, from highest level (author) to lowest (user agent).",205,{"inputs":[{"name":"self"}],"output":{"name":"peroriginitermut"}}],[11,"next","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","style::stylesheets","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","Serialization of PageRule is not specced, adapted from steps for StyleRule.",177,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","",177,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_empty","","Whether this CSS rules is empty.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deep_clone_with_lock","","",179,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"new","","Trivially construct a new set of CSS rules.",179,{"inputs":[{"name":"vec"},{"name":"sharedrwlock"}],"output":{"name":"arc"}}],[11,"remove_rule","","https://drafts.csswg.org/cssom/#remove-a-css-rule",179,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","Returns the current state of the parser.",178,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"take_had_hierarchy_error","","Returns whether we previously tried to parse a rule that was invalid due to being in the wrong place (e.g. an @import rule was found after a regular style rule).  The state of this flag is reset when this function is called.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"cmp","","",186,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"ordering"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"option"}}],[11,"parse_prelude","","",178,{"inputs":[{"name":"self"},{"name":"cowrcstr"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","",178,{"inputs":[{"name":"self"},{"name":"atruleblockprelude"},{"name":"parser"}],"output":{"name":"result"}}],[11,"rule_without_block","","",178,{"inputs":[{"name":"self"},{"name":"atrulenonblockprelude"}],"output":{"name":"cssrule"}}],[11,"parse_prelude","","",178,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","",178,{"inputs":[{"name":"self"},{"name":"qualifiedruleparserprelude"},{"name":"parser"}],"output":{"name":"result"}}],[11,"new","","Creates a new `RulesIterator` to iterate over `rules`.",211,{"inputs":[{"name":"device"},{"name":"quirksmode"},{"name":"sharedrwlockreadguard"},{"name":"cssrules"}],"output":{"name":"self"}}],[11,"skip_children","","Skips all the remaining children of the last nested rule processed.",211,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"process_import","","",212,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"importrule"}],"output":{"name":"bool"}}],[11,"process_media","","",212,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"mediarule"}],"output":{"name":"bool"}}],[11,"process_document","","",212,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"documentrule"}],"output":{"name":"bool"}}],[11,"process_supports","","",212,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"supportsrule"}],"output":{"name":"bool"}}],[11,"process_import","","",213,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"importrule"}],"output":{"name":"bool"}}],[11,"process_media","","",213,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"mediarule"}],"output":{"name":"bool"}}],[11,"process_document","","",213,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"documentrule"}],"output":{"name":"bool"}}],[11,"process_supports","","",213,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"supportsrule"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","Deep clones this StyleRule.",185,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"stylerule"}}],[11,"to_css","","https://drafts.csswg.org/cssom/#serialize-a-css-rule CSSStyleRule",185,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"namespaces"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"namespaces"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parse a given CSS string, with a given url-data, origin, and quirks mode.",183,{"inputs":[{"name":"str"},{"name":"urlextradata"},{"name":"origin"},{"name":"sharedrwlock"},{"name":"option"},{"name":"r"},{"name":"quirksmode"},{"name":"u32"}],"output":{"name":"self"}}],[11,"iter_rules","","Return an iterator using the condition `C`.",183,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"rulesiterator"}}],[11,"deep_clone_with_lock","","",183,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contents","","",181,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"stylesheetcontents"}}],[11,"media","","",181,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"enabled","","",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"documentstylesheet"}}],[11,"heap_size_of_children","","",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_media_list_key","","",182,{"inputs":[{"name":"self"}],"output":{"name":"medialistkey"}}],[11,"contents","","",182,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"stylesheetcontents"}}],[11,"media","","",182,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"enabled","","",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update_from_str","","Updates an empty stylesheet from a given string of text.",181,{"inputs":[{"name":"stylesheet"},{"name":"str"},{"name":"urlextradata"},{"name":"option"},{"name":"r"},{"name":"u32"}],"output":null}],[11,"from_str","","Creates an empty stylesheet and parses it with a given base url, origin and media.",181,{"inputs":[{"name":"str"},{"name":"urlextradata"},{"name":"origin"},{"name":"arc"},{"name":"sharedrwlock"},{"name":"option"},{"name":"r"},{"name":"quirksmode"},{"name":"u32"}],"output":{"name":"stylesheet"}}],[11,"disabled","","Returns whether the stylesheet has been explicitly disabled through the CSSOM.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_disabled","","Records that the stylesheet has been explicitly disabled through the CSSOM.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"supports_rule","","@supports rules",null,null],[3,"SupportsRule","style::stylesheets::supports_rule","An [`@supports`][supports] rule.",null,null],[12,"condition","","The parsed condition",214,null],[12,"rules","","Child rules",214,null],[12,"enabled","","The result of evaluating the condition",214,null],[12,"source_location","","The line and column of the rule's source code.",214,null],[3,"Declaration","","A possibly-invalid property declaration",null,null],[12,"0","","",215,null],[4,"SupportsCondition","","An @supports condition",null,null],[13,"Not","","`not (condition)`",216,null],[13,"Parenthesized","","`(condition)`",216,null],[13,"And","","`(condition) and (condition) and (condition) ..`",216,null],[13,"Or","","`(condition) or (condition) or (condition) ..`",216,null],[13,"Declaration","","`property-ident: value` (value can be any tokens)",216,null],[13,"FutureSyntax","","`(any tokens)` or `func(any tokens)`",216,null],[5,"parse_condition_or_declaration","","supports_condition | declaration https://drafts.csswg.org/css-conditional/#dom-css-supports-conditiontext-conditiontext",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",214,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","",214,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"supportscondition"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse a condition",216,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eval","","Evaluate a supports condition",216,{"inputs":[{"name":"self"},{"name":"parsercontext"}],"output":{"name":"bool"}}],[11,"to_css","","",216,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"declaration"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",215,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Parse a declaration",215,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eval","","Determine if a declaration parses",215,{"inputs":[{"name":"self"},{"name":"parsercontext"}],"output":{"name":"bool"}}],[0,"viewport_rule","style::stylesheets","The [`@viewport`][at] at-rule and [`meta`][meta] element.",null,null],[3,"ViewportDescriptorDeclaration","style::stylesheets::viewport_rule","",null,null],[12,"origin","","",217,null],[12,"descriptor","","",217,null],[12,"important","","",217,null],[3,"ViewportRule","","A `@viewport` rule.",null,null],[12,"declarations","","The declarations contained in this @viewport rule.",218,null],[3,"Cascade","","",null,null],[4,"ViewportDescriptor","","",null,null],[13,"MinWidth","","",219,null],[13,"MaxWidth","","",219,null],[13,"MinHeight","","",219,null],[13,"MaxHeight","","",219,null],[13,"Zoom","","",219,null],[13,"MinZoom","","",219,null],[13,"MaxZoom","","",219,null],[13,"UserZoom","","",219,null],[13,"Orientation","","",219,null],[4,"ViewportLength","","ViewportLength is a length | percentage | auto | extend-to-zoom See: * http://dev.w3.org/csswg/css-device-adapt/#min-max-width-desc * http://dev.w3.org/csswg/css-device-adapt/#extend-to-zoom",null,null],[13,"Specified","","",220,null],[13,"ExtendToZoom","","",220,null],[5,"enabled","","Whether parsing and processing of `@viewport` rules is enabled.",null,{"inputs":[],"output":{"name":"bool"}}],[8,"MaybeNew","","Just a helper trait to be able to implement methods on ViewportConstraints.",null,null],[10,"maybe_new","","Create a ViewportConstraints from a viewport size and a `@viewport` rule.",221,{"inputs":[{"name":"device"},{"name":"viewportrule"},{"name":"quirksmode"}],"output":{"name":"option"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"viewportdescriptor"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"viewportdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"viewportdescriptor"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"discriminant_value","","",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",219,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"viewportlength"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"viewportlength"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"viewportlength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",220,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",220,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"viewportdescriptordeclaration"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"viewportdescriptordeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"viewportdescriptordeclaration"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",217,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",217,{"inputs":[{"name":"origin"},{"name":"viewportdescriptor"},{"name":"bool"}],"output":{"name":"viewportdescriptordeclaration"}}],[11,"to_css","","",217,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"viewportrule"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"viewportrule"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"viewportrule"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",218,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse a single @viewport rule.",218,{"inputs":[{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_meta","","",218,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"to_css","","",218,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"from_stylesheets","","",222,{"inputs":[{"name":"i"},{"name":"stylesheetguards"},{"name":"device"}],"output":{"name":"self"}}],[11,"add","","",222,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"finish","","",222,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"UrlExtraData","style::stylesheets","Extra data that the backend may need to resolve url values.",null,null],[8,"StylesheetLoader","","The stylesheet loader is the abstraction used to trigger network requests for `@import` rules.",null,null],[10,"request_stylesheet","","Request a stylesheet after parsing a given `@import` rule, and return the constructed `@import` rule.",223,{"inputs":[{"name":"self"},{"name":"specifiedurl"},{"name":"sourcelocation"},{"name":"parsercontext"},{"name":"sharedrwlock"},{"name":"arc"}],"output":{"name":"arc"}}],[8,"CssRulesHelpers","","A trait to implement helpers for `Arc<Locked<CssRules>>`.",null,null],[10,"insert_rule","","https://drafts.csswg.org/cssom/#insert-a-css-rule",224,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"str"},{"name":"stylesheetcontents"},{"name":"usize"},{"name":"bool"},{"name":"option"}],"output":{"name":"result"}}],[8,"NestedRuleIterationCondition","","RulesIterator.",null,null],[10,"process_import","","Whether we should process the nested rules in a given `@import` rule.",225,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"importrule"}],"output":{"name":"bool"}}],[10,"process_media","","Whether we should process the nested rules in a given `@media` rule.",225,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"mediarule"}],"output":{"name":"bool"}}],[10,"process_document","","Whether we should process the nested rules in a given `@-moz-document` rule.",225,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"documentrule"}],"output":{"name":"bool"}}],[10,"process_supports","","Whether we should process the nested rules in a given `@supports` rule.",225,{"inputs":[{"name":"sharedrwlockreadguard"},{"name":"device"},{"name":"quirksmode"},{"name":"supportsrule"}],"output":{"name":"bool"}}],[8,"StylesheetInDocument","","A trait to represent a given stylesheet in a document.",null,null],[10,"contents","","Get the contents of this stylesheet.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"stylesheetcontents"}}],[11,"origin","","Get the stylesheet origin.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"origin"}}],[11,"quirks_mode","","Get the stylesheet quirks mode.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"quirksmode"}}],[10,"media","","Get the media associated with this stylesheet.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"option"}}],[11,"is_effective_for_device","","Returns whether the style-sheet applies for the current device.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"bool"}}],[10,"enabled","","Get whether this stylesheet is enabled.",226,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter_rules","","Return an iterator using the condition `C`.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"rulesiterator"}}],[11,"effective_rules","","Return an iterator over the effective rules within the style-sheet, as according to the supplied `Device`.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"rulesiterator"}}],[11,"effective_style_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_media_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_font_face_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_font_face_feature_values_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_counter_style_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_viewport_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_keyframes_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_supports_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_page_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_document_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"cssrule"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"cssruletype"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"cssruletype"}],"output":{"name":"bool"}}],[11,"from","","",190,{"inputs":[{"name":"singleruleparseerror"}],"output":{"name":"self"}}],[11,"rule_type","","Returns the CSSOM rule type of this rule.",187,{"inputs":[{"name":"self"}],"output":{"name":"cssruletype"}}],[11,"parse","","Parse a CSS rule.",187,{"inputs":[{"name":"str"},{"name":"stylesheetcontents"},{"name":"sharedrwlock"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"deep_clone_with_lock","","Deep clones this CssRule.",187,{"inputs":[{"name":"self"},{"name":"sharedrwlock"},{"name":"sharedrwlockreadguard"},{"name":"deepcloneparams"}],"output":{"name":"cssrule"}}],[11,"to_css","","",187,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"},{"name":"w"}],"output":{"name":"result"}}],[0,"thread_state","style","Supports dynamic assertions in about what sort of thread is running and what state it's in.",null,null],[3,"ThreadState","style::thread_state","A thread state flag, used for multiple assertions.",null,null],[5,"initialize","","Initializes the current thread state.",null,{"inputs":[{"name":"threadstate"}],"output":null}],[5,"initialize_layout_worker_thread","","Initializes the current thread as a layout worker thread.",null,{"inputs":[],"output":null}],[5,"get","","Gets the current thread state.",null,{"inputs":[],"output":{"name":"threadstate"}}],[5,"enter","","Enters into a given temporary state. Panics if re-entring.",null,{"inputs":[{"name":"threadstate"}],"output":null}],[5,"exit","","Exits a given temporary state.",null,{"inputs":[{"name":"threadstate"}],"output":null}],[17,"SCRIPT","","Whether we're in a script thread.",null,null],[17,"LAYOUT","","Whether we're in a layout thread.",null,null],[17,"IN_WORKER","","Whether we're in a script worker thread (actual web workers), or in a layout worker thread.",null,null],[17,"IN_GC","","Whether the current thread is going through a GC.",null,null],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"threadstate"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"ordering"}}],[11,"hash","","",227,null],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",227,{"inputs":[],"output":{"name":"threadstate"}}],[11,"all","","Returns the set containing all flags.",227,{"inputs":[],"output":{"name":"threadstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",227,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",227,{"inputs":[{"name":"u32"}],"output":{"name":"threadstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"threadstate"}}],[11,"bitor_assign","","Adds the set of flags.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"threadstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"threadstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":{"name":"threadstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",227,{"inputs":[{"name":"self"},{"name":"threadstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",227,{"inputs":[{"name":"self"}],"output":{"name":"threadstate"}}],[11,"extend","","",227,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",227,{"inputs":[{"name":"t"}],"output":{"name":"threadstate"}}],[11,"is_worker","","Whether the current thread is a worker thread.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_script","","",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_layout","","",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"timer","style","A timer module, used to define a `Timer` type, that is controlled by script.",null,null],[3,"Timer","style::timer","A `Timer` struct that takes care of giving the current time for animations.",null,null],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"timer"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new \"normal\" timer, i.e., a \"Current\" mode timer.",228,{"inputs":[],"output":{"name":"self"}}],[11,"test_mode","","Creates a new \"test mode\" timer, with initial time 0.",228,{"inputs":[],"output":{"name":"self"}}],[11,"seconds","","Returns the current time, at least from the caller's perspective. In test mode returns whatever the value is.",228,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"increment","","Increments the current clock. Panics if the clock is not on test mode.",228,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[0,"traversal","style","Traversing the DOM tree; the bloom filter.",null,null],[3,"PerLevelTraversalData","style::traversal","A per-traversal-level chunk of data. This is sent down by the traversal, and currently only holds the dom depth for the bloom filter.",null,null],[12,"current_dom_depth","","The current dom depth.",229,null],[3,"PreTraverseToken","","We use this structure, rather than just returning a boolean from pre_traverse, to enfore that callers process root invalidations before starting the traversal.",null,null],[5,"resolve_style","","Manually resolve style by sequentially walking up the parent chain to the first styled Element, ignoring pending restyles. The resolved style is made available via a callback, and can be dropped by the time this function returns in the display:none subtree case.",null,{"inputs":[{"name":"stylecontext"},{"name":"e"},{"name":"ruleinclusion"},{"name":"bool"},{"name":"option"}],"output":{"name":"elementstyles"}}],[5,"recalc_style_at","","Calculates the style for a single node.",null,{"inputs":[{"name":"d"},{"name":"perleveltraversaldata"},{"name":"stylecontext"},{"name":"e"},{"name":"elementdata"},{"name":"f"}],"output":null}],[5,"clear_descendant_data","","Clear style data for all the subtree under `root` (but not for root itself).",null,{"inputs":[{"name":"e"}],"output":null}],[8,"DomTraversal","","A DOM Traversal trait, that is used to generically implement styling for Gecko and Servo.",null,null],[10,"process_preorder","","Process `node` on the way down, before its children have been processed.",230,null],[10,"process_postorder","","Process `node` on the way up, after its children have been processed.",230,null],[11,"needs_postorder_traversal","","Boolean that specifies whether a bottom up traversal should be performed.",230,{"inputs":[],"output":{"name":"bool"}}],[11,"handle_postorder_traversal","","Handles the postorder step of the traversal, if it exists, by bubbling up the parent chain.",230,null],[11,"pre_traverse","","Style invalidations happen when traversing from a parent to its children. However, this mechanism can't handle style invalidations on the root. As such, we have a pre-traversal step to handle that part and determine whether a full traversal is needed.",230,{"inputs":[{"name":"e"},{"name":"sharedstylecontext"},{"name":"traversalflags"}],"output":{"name":"pretraversetoken"}}],[11,"text_node_needs_traversal","","Returns true if traversal should visit a text node. The style system never processes text nodes, but Servo overrides this to visit them for flow construction when necessary.",230,null],[11,"element_needs_traversal","","Returns true if traversal is needed for the given element and subtree.",230,{"inputs":[{"name":"e"},{"name":"traversalflags"},{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"should_cull_subtree","","Returns true if we want to cull this subtree from the travesal.",230,{"inputs":[{"name":"self"},{"name":"stylecontext"},{"name":"e"},{"name":"elementdata"}],"output":{"name":"bool"}}],[10,"shared_context","","Return the shared style context common to all worker threads.",230,{"inputs":[{"name":"self"}],"output":{"name":"sharedstylecontext"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"perleveltraversaldata"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_traverse","","Whether we should traverse children.",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"traversal_flags","style","Flags that control the traversal process.",null,null],[3,"TraversalFlags","style::traversal_flags","Flags that control the traversal process.",null,null],[17,"AnimationOnly","","Traverse only elements for animation restyles.",null,null],[17,"ForCSSRuleChanges","","Traverse and update all elements with CSS animations since @keyframes rules may have changed. Triggered by CSS rule changes.",null,null],[17,"UnstyledOnly","","Styles unstyled elements, but does not handle invalidations on already-styled elements.",null,null],[17,"Forgetful","","A forgetful traversal ignores the previous state of the frame tree, and thus does not compute damage or maintain other state describing the styles pre-traversal. A forgetful traversal is usually the right thing if you aren't going to do a post-traversal.",null,null],[17,"ClearDirtyBits","","Clears all the dirty bits on the elements traversed.",null,null],[17,"ClearAnimationOnlyDirtyDescendants","","Clears the animation-only dirty descendants bit in the subtree.",null,null],[17,"ParallelTraversal","","Allows the traversal to run in parallel if there are sufficient cores on the machine.",null,null],[17,"FlushThrottledAnimations","","Flush throttled animations. By default, we only update throttled animations when we have other non-throttled work to do. With this flag, we unconditionally tick and process them.",null,null],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"traversalflags"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"cmp","","",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"ordering"}}],[11,"hash","","",232,null],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",232,{"inputs":[],"output":{"name":"traversalflags"}}],[11,"all","","Returns the set containing all flags.",232,{"inputs":[],"output":{"name":"traversalflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",232,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",232,{"inputs":[{"name":"u32"}],"output":{"name":"traversalflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"traversalflags"}}],[11,"bitor_assign","","Adds the set of flags.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"traversalflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"traversalflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":{"name":"traversalflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",232,{"inputs":[{"name":"self"},{"name":"traversalflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",232,{"inputs":[{"name":"self"}],"output":{"name":"traversalflags"}}],[11,"extend","","",232,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",232,{"inputs":[{"name":"t"}],"output":{"name":"traversalflags"}}],[11,"for_animation_only","","Returns true if the traversal is for animation-only restyles.",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"values","style","Common [values][values] used in CSS.",null,null],[3,"RGBA","style::values","A color with red, green, blue, and alpha components, in a byte each.",null,null],[12,"red","","The red component.",233,null],[12,"green","","The green component.",233,null],[12,"blue","","The blue component.",233,null],[12,"alpha","","The alpha component.",233,null],[4,"Token","","One of the pieces the CSS input is broken into.",null,null],[13,"Ident","","A `<ident-token>`",234,null],[13,"AtKeyword","","A `<at-keyword-token>`",234,null],[13,"Hash","","A `<hash-token>` with the type flag set to \"unrestricted\"",234,null],[13,"IDHash","","A `<hash-token>` with the type flag set to \"id\"",234,null],[13,"QuotedString","","A `<string-token>`",234,null],[13,"UnquotedUrl","","A `<url-token>`",234,null],[13,"Delim","","A `<delim-token>`",234,null],[13,"Number","","A `<number-token>`",234,null],[12,"has_sign","style::values::Token","Whether the number had a `+` or `-` sign.",234,null],[12,"value","","The value as a float",234,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",234,null],[13,"Percentage","style::values","A `<percentage-token>`",234,null],[12,"has_sign","style::values::Token","Whether the number had a `+` or `-` sign.",234,null],[12,"unit_value","","The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.",234,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer. It is not divided by 100.",234,null],[13,"Dimension","style::values","A `<dimension-token>`",234,null],[12,"has_sign","style::values::Token","Whether the number had a `+` or `-` sign.",234,null],[12,"value","","The value as a float",234,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",234,null],[12,"unit","","The unit, e.g. \"px\" in `12px`",234,null],[13,"WhiteSpace","style::values","A `<whitespace-token>`",234,null],[13,"Comment","","A comment.",234,null],[13,"Colon","","A `:` `<colon-token>`",234,null],[13,"Semicolon","","A `;` `<semicolon-token>`",234,null],[13,"Comma","","A `,` `<comma-token>`",234,null],[13,"IncludeMatch","","A `~=` `<include-match-token>`",234,null],[13,"DashMatch","","A `|=` `<dash-match-token>`",234,null],[13,"PrefixMatch","","A `^=` `<prefix-match-token>`",234,null],[13,"SuffixMatch","","A `$=` `<suffix-match-token>`",234,null],[13,"SubstringMatch","","A `*=` `<substring-match-token>`",234,null],[13,"Column","","A `||` `<column-token>`",234,null],[13,"CDO","","A `<!--` `<CDO-token>`",234,null],[13,"CDC","","A `-->` `<CDC-token>`",234,null],[13,"Function","","A `<function-token>`",234,null],[13,"ParenthesisBlock","","A `<(-token>`",234,null],[13,"SquareBracketBlock","","A `<[-token>`",234,null],[13,"CurlyBracketBlock","","A `<{-token>`",234,null],[13,"BadUrl","","A `<bad-url-token>`",234,null],[13,"BadString","","A `<bad-string-token>`",234,null],[13,"CloseParenthesis","","A `<)-token>`",234,null],[13,"CloseSquareBracket","","A `<]-token>`",234,null],[13,"CloseCurlyBracket","","A `<}-token>`",234,null],[3,"Parser","","A CSS parser that borrows its `&str` input, yields `Token`s, and keeps track of nested blocks and functions.",null,null],[5,"serialize_identifier","","Write a CSS identifier, escaping characters as necessary.",null,{"inputs":[{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[4,"BasicParseError","","The funamental parsing errors that can be triggered by built-in parsing routines.",null,null],[13,"UnexpectedToken","","An unexpected token was encountered.",235,null],[13,"EndOfInput","","The end of the input was encountered unexpectedly.",235,null],[13,"AtRuleInvalid","","An `@` rule was encountered that was invalid.",235,null],[13,"AtRuleBodyInvalid","","The body of an '@' rule was invalid.",235,null],[13,"QualifiedRuleInvalid","","A qualified rule was encountered that was invalid.",235,null],[3,"CowRcStr","","A string that is either shared (heap-allocated and reference-counted) or borrowed.",null,null],[3,"None_","","",null,null],[3,"Auto","","",null,null],[3,"Normal","","",null,null],[3,"CustomIdent","","https://drafts.csswg.org/css-values-4/#custom-idents",null,null],[12,"0","","",236,null],[4,"Impossible","","Convenience void type to disable some properties and values through types.",null,null],[4,"Either","","A struct representing one of two kinds of values.",null,null],[13,"First","","The first value.",237,null],[13,"Second","","The second kind of value.",237,null],[4,"KeyframesName","","https://drafts.csswg.org/css-animations/#typedef-keyframes-name",null,null],[13,"Ident","","<custom-ident>",238,null],[13,"QuotedString","","",238,null],[4,"ExtremumLength","","",null,null],[13,"MaxContent","","",239,null],[13,"MinContent","","",239,null],[13,"FitContent","","",239,null],[13,"FillAvailable","","",239,null],[5,"serialize_percentage","","Serialize a normalized value into percentage.",null,{"inputs":[{"name":"cssfloat"},{"name":"w"}],"output":{"name":"result"}}],[5,"serialize_dimension","","Serialize a value with given unit into dest.",null,{"inputs":[{"name":"cssfloat"},{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[0,"animated","","Animated values.",null,null],[4,"Procedure","style::values::animated","An animation procedure.",null,null],[13,"Interpolate","","https://w3c.github.io/web-animations/#animation-interpolation",240,null],[12,"progress","style::values::animated::Procedure","",240,null],[13,"Add","style::values::animated","https://w3c.github.io/web-animations/#animation-addition",240,null],[13,"Accumulate","","https://w3c.github.io/web-animations/#animation-accumulation",240,null],[12,"count","style::values::animated::Procedure","",240,null],[0,"color","style::values::animated","Animated types for CSS colors.",null,null],[3,"RGBA","style::values::animated::color","An animated RGBA color.",null,null],[12,"red","","The red component.",241,null],[12,"green","","The green component.",241,null],[12,"blue","","The blue component.",241,null],[12,"alpha","","The alpha component.",241,null],[3,"Color","","",null,null],[12,"color","","",242,null],[12,"foreground_ratio","","",242,null],[11,"heap_size_of_children","","",241,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transparent","","Returns a transparent color.",241,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Returns a new color.",241,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"animate","","",241,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",241,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",242,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"transparent","","Returns a transparent intermediate color.",242,{"inputs":[],"output":{"name":"self"}}],[11,"animate","","",242,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",242,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",242,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"effects","style::values::animated","Animated types for CSS values related to effects.",null,null],[3,"ShadowList","style::values::animated::effects","An animated value for shadow lists.",null,null],[3,"FilterList","","An animated value for the `filter` property.",null,null],[12,"0","","",243,null],[6,"BoxShadowList","","An animated value for the `box-shadow` property.",null,null],[6,"TextShadowList","","An animated value for the `text-shadow` property.",null,null],[6,"BoxShadow","","An animated value for a single `box-shadow`.",null,null],[6,"Filter","","An animated value for a single `filter`.",null,null],[6,"SimpleShadow","","An animated value for the `drop-shadow()` filter.",null,null],[11,"heap_size_of_children","","",244,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"shadowlist"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"shadowlist"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"self"},{"name":"shadowlist"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",243,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"filterlist"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"filterlist"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"filterlist"}],"output":{"name":"bool"}}],[11,"animate","","",244,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",244,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",244,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",245,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",243,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Animate","style::values::animated","Animate from one value to another.",null,null],[10,"animate","","Animate a value towards another one, given an animation procedure.",246,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[8,"ToAnimatedValue","","Conversion between computed values and intermediate values for animations.",null,null],[16,"AnimatedValue","","The type of the animated value.",247,null],[10,"to_animated_value","","Converts this value to an animated value.",247,null],[10,"from_animated_value","","Converts back an animated value into a computed value.",247,null],[8,"AnimatedValueAsComputed","","Marker trait for computed values with the same representation during animations.",null,null],[8,"ToAnimatedZero","","Returns a value similar to `self` that represents zero.",null,null],[10,"to_animated_zero","","Returns a value that, when added with an underlying value, will produce the underlying value. This is used for SMIL animation's \"by-animation\" where SMIL first interpolates from the zero value to the 'by' value, and then adds the result to the underlying value.",248,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"procedure"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"procedure"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"self"},{"name":"procedure"}],"output":{"name":"bool"}}],[11,"weights","","Returns this procedure as a pair of weights.",240,null],[0,"computed","style::values","Computed values.",null,null],[3,"Au","style::values::computed","An App Unit, the fundamental unit of length in Servo. Usually 1/60th of a pixel (see AU_PER_PX)",null,null],[12,"0","","",249,null],[3,"Context","","A `Context` is all the data a specified value could ever need to compute itself and be transformed to a computed value.",null,null],[12,"is_root_element","","Whether the current element is the root element.",250,null],[12,"builder","","Values accessed through this need to be in the properties \"computed early\": color, text-decoration, font-size, display, position, float, border-*-style, outline-style, font-family, writing-mode...",250,null],[12,"cached_system_font","","A dummy option for servo so initializing a computed::Context isn't painful.",250,null],[12,"font_metrics_provider","","A font metrics provider, used to access font metrics to implement font-relative units.",250,null],[12,"in_media_query","","Whether or not we are computing the media list in a media query",250,null],[12,"quirks_mode","","The quirks mode of this context.",250,null],[12,"for_smil_animation","","Whether this computation is being done for a SMIL animation.",250,null],[12,"for_non_inherited_property","","The property we are computing a value for, if it is a non-inherited property.  None if we are computed a value for an inherited property or not computing for a property at all (e.g. in a media query evaluation).",250,null],[12,"rule_cache_conditions","","The conditions to cache a rule node on the rule cache.",250,null],[3,"ComputedVecIter","","An iterator over a slice of computed values",null,null],[3,"ClipRect","","A computed cliprect for clip and image-region",null,null],[12,"top","","",251,null],[12,"right","","",251,null],[12,"bottom","","",251,null],[12,"left","","",251,null],[4,"NumberOrPercentage","","",null,null],[13,"Percentage","","",252,null],[13,"Number","","",252,null],[4,"ComputedUrl","","The computed value of a CSS `url()`, resolved relative to the stylesheet URL.",null,null],[13,"Invalid","","The `url()` was invalid or it wasn't specified by the user.",253,null],[13,"Valid","","The resolved `url()` relative to the stylesheet URL.",253,null],[0,"angle","","Computed angles.",null,null],[4,"Angle","style::values::computed::angle","A computed angle.",null,null],[13,"Degree","","An angle with degree unit.",254,null],[13,"Gradian","","An angle with gradian unit.",254,null],[13,"Radian","","An angle with radian unit.",254,null],[13,"Turn","","An angle with turn unit.",254,null],[11,"heap_size_of_children","","",254,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",254,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"angle"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"option"}}],[11,"lt","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"le","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"gt","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"ge","","",254,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",254,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_radians","","Creates a computed `Angle` value from a radian amount.",254,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"radians","","Returns the amount of radians this angle represents.",254,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"radians64","","Returns the amount of radians this angle represents as a `f64`.",254,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"zero","","Returns an angle that represents a rotation of zero radians.",254,{"inputs":[],"output":{"name":"self"}}],[11,"compute_squared_distance","","",254,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",254,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"background","style::values::computed","Computed types for CSS values related to backgrounds.",null,null],[6,"BackgroundSize","style::values::computed::background","A computed value for the `background-size` property.",null,null],[11,"auto","","Returns `auto auto`.",255,{"inputs":[],"output":{"name":"self"}}],[11,"to_animated_zero","","",255,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_value","","",255,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",255,null],[0,"basic_shape","style::values::computed","CSS handling for the computed value of [`basic-shape`][basic-shape]s",null,null],[6,"ClippingShape","style::values::computed::basic_shape","A specified clipping shape.",null,null],[6,"FloatAreaShape","","A specified float area shape.",null,null],[6,"BasicShape","","A computed basic shape.",null,null],[6,"InsetRect","","The computed value of `inset()`",null,null],[6,"Circle","","A computed circle.",null,null],[6,"Ellipse","","A computed ellipse.",null,null],[6,"ShapeRadius","","The computed value of `ShapeRadius`",null,null],[11,"to_css","","",256,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",257,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border","style::values::computed","Computed types for CSS values related to borders.",null,null],[6,"BorderImageWidth","style::values::computed::border","A computed value for the `border-image-width` property.",null,null],[6,"BorderImageSideWidth","","A computed value for a single side of a `border-image-width` property.",null,null],[6,"BorderImageSlice","","A computed value for the `border-image-slice` property.",null,null],[6,"BorderRadius","","A computed value for the `border-radius` property.",null,null],[6,"BorderCornerRadius","","A computed value for the `border-*-radius` longhand properties.",null,null],[6,"BorderSpacing","","A computed value for the `border-spacing` longhand property.",null,null],[11,"one","","Returns `1`.",258,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","Returns `0 0`.",259,{"inputs":[],"output":{"name":"self"}}],[11,"horizontal","","Returns the horizontal spacing.",259,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"vertical","","Returns the vertical spacing.",259,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"zero","","Returns `0 0`.",260,{"inputs":[],"output":{"name":"self"}}],[11,"to_animated_zero","","",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",260,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"box_","style::values::computed","Computed types for box properties.",null,null],[6,"VerticalAlign","style::values::computed::box_","A computed value for the `vertical-align` property.",null,null],[0,"color","style::values::computed","Computed color values.",null,null],[3,"Color","style::values::computed::color","This struct represents a combined color from a numeric color and the current foreground color (currentcolor keyword). Conceptually, the formula is \"color * (1 - p) + currentcolor * p\" where p is foreground_ratio.",null,null],[12,"color","","RGBA color.",261,null],[12,"foreground_ratio","","The ratio of currentcolor in complex color.",261,null],[6,"RGBAColor","","Computed value type for the specified RGBAColor.",null,null],[6,"ColorPropertyValue","","The computed value of the `color` property.",null,null],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",261,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rgba","","Returns a numeric color representing the given RGBA value.",261,{"inputs":[{"name":"rgba"}],"output":{"name":"color"}}],[11,"transparent","","Returns a complex color value representing transparent.",261,{"inputs":[],"output":{"name":"color"}}],[11,"currentcolor","","Returns a complex color value representing currentcolor.",261,{"inputs":[],"output":{"name":"color"}}],[11,"is_numeric","","Whether it is a numeric color (no currentcolor component).",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_currentcolor","","Whether it is a currentcolor value (no numeric color component).",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_rgba","","Combine this complex color with the given foreground color into a numeric RGBA color. It currently uses linear blending.",261,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"from","","",261,{"inputs":[{"name":"rgba"}],"output":{"name":"color"}}],[11,"to_css","","",261,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_animated_value","","",261,null],[11,"from_animated_value","","",261,null],[11,"to_animated_value","style::values","",233,null],[11,"from_animated_value","","",233,null],[0,"effects","style::values::computed","Computed types for CSS values related to effects.",null,null],[6,"BoxShadow","style::values::computed::effects","A computed value for a single shadow of the `box-shadow` property.",null,null],[6,"Filter","","A computed value for a single `filter`.",null,null],[6,"SimpleShadow","","A computed value for the `drop-shadow()` filter.",null,null],[0,"flex","style::values::computed","Computed types for CSS values related to flexbox.",null,null],[6,"FlexBasis","style::values::computed::flex","A computed value for the `flex-basis` property.",null,null],[0,"image","style::values::computed","CSS handling for the computed value of [`image`][image]s",null,null],[4,"LineDirection","style::values::computed::image","A computed gradient line direction.",null,null],[13,"Angle","","An angle.",262,null],[13,"Horizontal","","A horizontal direction.",262,null],[13,"Vertical","","A vertical direction.",262,null],[13,"Corner","","A corner.",262,null],[6,"ImageLayer","","A computed image layer.",null,null],[6,"Image","","Computed values for an image according to CSS-IMAGES. https://drafts.csswg.org/css-images/#image-values",null,null],[6,"Gradient","","Computed values for a CSS gradient. https://drafts.csswg.org/css-images/#gradients",null,null],[6,"GradientKind","","A computed gradient kind.",null,null],[6,"EndingShape","","A computed radial gradient ending shape.",null,null],[6,"GradientItem","","A computed gradient item.",null,null],[6,"ColorStop","","A computed color stop.",null,null],[6,"MozImageRect","","Computed values for `-moz-image-rect(...)`.",null,null],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"linedirection"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"linedirection"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"linedirection"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",262,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"points_downwards","","",262,{"inputs":[{"name":"self"},{"name":"compatmode"}],"output":{"name":"bool"}}],[11,"to_css","","",262,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compatmode"}],"output":{"name":"result"}}],[0,"length","style::values::computed","`<length>` computed values, and related ones.",null,null],[3,"CalcLengthOrPercentage","style::values::computed::length","",null,null],[12,"clamping_mode","","",263,null],[12,"percentage","","",263,null],[3,"CSSPixelLength","","The computed `<length>` value.",null,null],[4,"LengthOrPercentage","","",null,null],[13,"Length","","",264,null],[13,"Percentage","","",264,null],[13,"Calc","","",264,null],[4,"LengthOrPercentageOrAuto","","",null,null],[13,"Length","","",265,null],[13,"Percentage","","",265,null],[13,"Auto","","",265,null],[13,"Calc","","",265,null],[4,"LengthOrPercentageOrNone","","",null,null],[13,"Length","","",266,null],[13,"Percentage","","",266,null],[13,"Calc","","",266,null],[13,"None","","",266,null],[4,"MozLength","","A value suitable for a `min-width`, `min-height`, `width` or `height` property. See values/specified/length.rs for more details.",null,null],[13,"LengthOrPercentageOrAuto","","",267,null],[13,"ExtremumLength","","",267,null],[4,"MaxLength","","A value suitable for a `max-width` or `max-height` property. See values/specified/length.rs for more details.",null,null],[13,"LengthOrPercentageOrNone","","",268,null],[13,"ExtremumLength","","",268,null],[6,"NonNegativeLengthOrPercentage","","A wrapper of LengthOrPercentage, whose value must be >= 0.",null,null],[6,"Length","","An alias of computed `<length>` value.",null,null],[6,"LengthOrNone","","Either a computed `<length>` or the `none` keyword.",null,null],[6,"LengthOrAuto","","Either a computed `<length>` or the `auto` keyword.",null,null],[6,"LengthOrNumber","","Either a computed `<length>` or a `<number>` value.",null,null],[6,"LengthOrNormal","","Either a computed `<length>` or the `normal` keyword.",null,null],[6,"NonNegativeLength","","A wrapper of Length, whose value must be >= 0.",null,null],[6,"NonNegativeLengthOrAuto","","Either a computed NonNegativeLength or the `auto` keyword.",null,null],[6,"NonNegativeLengthOrNormal","","Either a computed NonNegativeLength or the `normal` keyword.",null,null],[6,"NonNegativeLengthOrNumber","","Either a computed NonNegativeLength or a NonNegativeNumber value.",null,null],[11,"heap_size_of_children","","",263,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"calclengthorpercentage"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"calclengthorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"self"},{"name":"calclengthorpercentage"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",263,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",263,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Returns a new `CalcLengthOrPercentage`.",263,{"inputs":[{"name":"length"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_clamping_mode","","Returns a new `CalcLengthOrPercentage` with a specific clamping mode.",263,{"inputs":[{"name":"length"},{"name":"option"},{"name":"allowednumerictype"}],"output":{"name":"self"}}],[11,"length","","Returns this `calc()` as a `<length>`.",263,{"inputs":[{"name":"self"}],"output":{"name":"csspixellength"}}],[11,"length_component","","Returns the length component of this `calc()`",263,{"inputs":[{"name":"self"}],"output":{"name":"csspixellength"}}],[11,"unclamped_length","","Returns the `<length>` component of this `calc()`, unclamped.",263,{"inputs":[{"name":"self"}],"output":{"name":"csspixellength"}}],[11,"percentage","","Return the percentage value as CSSFloat.",263,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"to_used_value","","Convert the computed value into used value.",263,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"to_pixel_length","","If there are special rules for computing percentages in a value (e.g. the height property), they apply whenever a calc() expression contains percentages.",263,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"from","","",263,{"inputs":[{"name":"lengthorpercentage"}],"output":{"name":"calclengthorpercentage"}}],[11,"to_css","","",263,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",264,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",264,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentage"}}],[11,"compute_squared_distance","","",264,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"lengthorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"self"},{"name":"lengthorpercentage"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",264,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",264,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",264,{"inputs":[{"name":"au"}],"output":{"name":"self"}}],[11,"zero","","",264,{"inputs":[],"output":{"name":"lengthorpercentage"}}],[11,"one","","1px length value for SVG defaults",264,{"inputs":[],"output":{"name":"lengthorpercentage"}}],[11,"is_definitely_zero","","Returns true if the computed value is absolute 0 or 0%.",264,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_hash_key","","",264,null],[11,"to_used_value","","Returns the used value.",264,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"to_pixel_length","","Returns the used value as CSSPixelLength.",264,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"length"}}],[11,"clamp_to_non_negative","","Returns the clamped non-negative values.",264,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",265,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",265,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"compute_squared_distance","","",265,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"to_css","","",265,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_definitely_zero","","Returns true if the computed value is absolute 0 or 0%.",265,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",266,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",266,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageornone"}}],[11,"compute_squared_distance","","",266,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"lengthorpercentageornone"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"self"},{"name":"lengthorpercentageornone"}],"output":{"name":"bool"}}],[11,"to_css","","",266,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_used_value","","Returns the used value.",266,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"option"}}],[11,"from","","",269,{"inputs":[{"name":"nonnegativelength"}],"output":{"name":"self"}}],[11,"from","","",269,{"inputs":[{"name":"lengthorpercentage"}],"output":{"name":"self"}}],[11,"from","","",264,{"inputs":[{"name":"nonnegativelengthorpercentage"}],"output":{"name":"lengthorpercentage"}}],[11,"zero","","Get zero value.",269,{"inputs":[],"output":{"name":"self"}}],[11,"is_definitely_zero","","Returns true if the computed value is absolute 0 or 0%.",269,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_used_value","","Returns the used value.",269,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"heap_size_of_children","","",270,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",270,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"csspixellength"}}],[11,"compute_squared_distance","","",270,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"option"}}],[11,"lt","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"le","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"gt","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"ge","","",270,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",270,null],[11,"from_animated_value","","",270,null],[11,"to_animated_zero","","",270,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Return a new CSSPixelLength.",270,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"px","","Return the containing pixel value.",270,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"to_i32_au","","Return the length with app_unit i32 type.",270,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"abs","","Return the absolute value of this length.",270,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_css","","",270,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"neg","","",270,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","style::values::computed","",249,{"inputs":[{"name":"csspixellength"}],"output":{"name":"self"}}],[11,"from","style::values::computed::length","",270,{"inputs":[{"name":"au"}],"output":{"name":"self"}}],[11,"zero","","Returns `0`.",271,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a NonNegativeLength.",272,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"zero","","Return a zero value.",272,{"inputs":[],"output":{"name":"self"}}],[11,"px","","Return the pixel value of |NonNegativeLength|.",272,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"scale_by","","Scale this NonNegativeLength. We scale NonNegativeLength by zero if the factor is negative because it doesn't make sense to scale a negative factor on a non-negative length.",272,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"add","","",272,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",272,{"inputs":[{"name":"length"}],"output":{"name":"self"}}],[11,"from","","",272,{"inputs":[{"name":"au"}],"output":{"name":"self"}}],[11,"from","style::values::computed","",249,{"inputs":[{"name":"nonnegativelength"}],"output":{"name":"self"}}],[11,"heap_size_of_children","style::values::computed::length","",267,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",267,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"mozlength"}}],[11,"compute_squared_distance","","",267,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"mozlength"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"self"},{"name":"mozlength"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",267,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",267,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"auto","","Returns the `auto` value.",267,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",268,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",268,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"maxlength"}}],[11,"compute_squared_distance","","",268,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"maxlength"}],"output":{"name":"bool"}}],[11,"ne","","",268,{"inputs":[{"name":"self"},{"name":"maxlength"}],"output":{"name":"bool"}}],[11,"to_css","","",268,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"none","","Returns the `none` value.",268,{"inputs":[],"output":{"name":"self"}}],[0,"percentage","style::values::computed","Computed percentages.",null,null],[3,"Percentage","style::values::computed::percentage","A computed percentage.",null,null],[12,"0","","",273,null],[11,"heap_size_of_children","","",273,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",273,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"percentage"}}],[11,"compute_squared_distance","","",273,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"percentage"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"option"}}],[11,"lt","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"le","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"gt","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"ge","","",273,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",273,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zero","","0%",273,{"inputs":[],"output":{"name":"self"}}],[11,"hundred","","100%",273,{"inputs":[],"output":{"name":"self"}}],[11,"abs","","Returns the absolute value for this percentage.",273,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_css","","",273,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"position","style::values::computed","CSS handling for the computed value of [`position`][position] values.",null,null],[6,"Position","style::values::computed::position","The computed value of a CSS `<position>`",null,null],[6,"HorizontalPosition","","The computed value of a CSS horizontal position.",null,null],[6,"VerticalPosition","","The computed value of a CSS vertical position.",null,null],[11,"center","","`50% 50%`",274,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","`0% 0%`",274,{"inputs":[],"output":{"name":"self"}}],[11,"to_css","","",274,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"rect","style::values::computed","Computed types for CSS borders.",null,null],[6,"LengthOrNumberRect","style::values::computed::rect","A specified rectangle made of four `<length-or-number>` values.",null,null],[0,"svg","style::values::computed","Computed types for SVG properties.",null,null],[6,"SVGPaint","style::values::computed::svg","Computed SVG Paint value",null,null],[6,"SVGPaintKind","","Computed SVG Paint Kind value",null,null],[6,"SvgLengthOrPercentageOrNumber","","A value of  |  |  for stroke-dashoffset. https://www.w3.org/TR/SVG11/painting.html#StrokeProperties",null,null],[6,"SVGLength",""," |  |  | context-value",null,null],[6,"NonNegativeSvgLengthOrPercentageOrNumber","","A value of  |  |  for stroke-width/stroke-dasharray. https://www.w3.org/TR/SVG11/painting.html#StrokeProperties",null,null],[6,"SVGWidth","","An non-negative wrapper of SVGLength.",null,null],[6,"SVGStrokeDashArray","","[  |  |  ]# | context-value",null,null],[6,"SVGOpacity","","<opacity-value> | context-fill-opacity | context-stroke-opacity",null,null],[11,"default","","",275,{"inputs":[],"output":{"name":"self"}}],[11,"black","","Opaque black color",275,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",276,{"inputs":[{"name":"au"}],"output":{"name":"self"}}],[11,"into","","",277,{"inputs":[{"name":"self"}],"output":{"name":"nonnegativesvglengthorpercentageornumber"}}],[11,"from","","",278,{"inputs":[{"name":"nonnegativelength"}],"output":{"name":"self"}}],[11,"default","","",279,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",280,{"inputs":[],"output":{"name":"self"}}],[0,"text","style::values::computed","Computed types for text properties.",null,null],[6,"InitialLetter","style::values::computed::text","A computed value for the `initial-letter` property.",null,null],[6,"LetterSpacing","","A computed value for the `letter-spacing` property.",null,null],[6,"WordSpacing","","A computed value for the `word-spacing` property.",null,null],[6,"LineHeight","","A computed value for the `line-height` property.",null,null],[11,"to_animated_zero","","",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"time","style::values::computed","Computed time values.",null,null],[3,"Time","style::values::computed::time","A computed `<time>` value.",null,null],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"option"}}],[11,"lt","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"le","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"gt","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ge","","",282,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",282,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_seconds","","Creates a time value from a seconds amount.",282,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"zero","","Returns `0s`.",282,{"inputs":[],"output":{"name":"self"}}],[11,"seconds","","Returns the amount of seconds this time represents.",282,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"to_css","","",282,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"transform","style::values::computed","Computed types for CSS values that are related to transformations.",null,null],[6,"TransformOrigin","style::values::computed::transform","The computed value of a CSS `<transform-origin>`",null,null],[6,"TimingFunction","","A computed timing function.",null,null],[6,"DirectionVector","","A vector to represent the direction vector (rotate axis) for Rotate3D.",null,null],[11,"initial_value","","Returns the initial computed value for `transform-origin`.",283,{"inputs":[],"output":{"name":"self"}}],[6,"Number","style::values::computed","A `<number>` value.",null,null],[6,"NonNegativeNumber","","A wrapper of Number, but the value >= 0.",null,null],[6,"GreaterThanOrEqualToOneNumber","","A wrapper of Number, but the value >= 1.",null,null],[6,"Opacity","","A type used for opacity.",null,null],[6,"Integer","","A `<integer>` value.",null,null],[6,"IntegerOrAuto",""," | auto",null,null],[6,"PositiveInteger","","A wrapper of Integer, but only accept a value >= 1.",null,null],[6,"PositiveIntegerOrAuto","","PositiveInteger | auto",null,null],[6,"LengthOrPercentageOrNumber",""," |  | ",null,null],[6,"NonNegativeLengthOrPercentageOrNumber","","NonNegativeLengthOrPercentage | NonNegativeNumber",null,null],[6,"ClipRectOrAuto","","rect(...) | auto",null,null],[6,"TrackBreadth","","The computed value of a grid `<track-breadth>`",null,null],[6,"TrackSize","","The computed value of a grid `<track-size>`",null,null],[6,"TrackList","","The computed value of a grid `<track-list>` (could also be `<auto-track-list>` or `<explicit-track-list>`)",null,null],[6,"GridLine","","The computed value of a `<grid-line>`.",null,null],[6,"GridTemplateComponent","","`<grid-template-rows> | <grid-template-columns>`",null,null],[6,"ColorOrAuto",""," | auto",null,null],[6,"UrlOrNone",""," | ",null,null],[8,"ToComputedValue","","A trait to represent the conversion between computed and specified values.",null,null],[16,"ComputedValue","","The computed value type we're going to be converted to.",284,null],[10,"to_computed_value","","Convert a specified value to a computed value, using itself and the data inside the `Context`.",284,null],[10,"from_computed_value","","Convert a computed value to specified value form.",284,null],[11,"is_root_element","","Whether the current element is the root element.",250,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"device","","The current device.",250,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"viewport_size_for_viewport_unit_resolution","","The current viewport size, used to resolve viewport units.",250,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"default_style","","The default computed style we're getting our reset style from.",250,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"style","","The current style.",250,{"inputs":[{"name":"self"}],"output":{"name":"stylebuilder"}}],[11,"maybe_zoom_text","","(Servo doesn't do text-zoom)",250,{"inputs":[{"name":"self"},{"name":"csspixellength"}],"output":{"name":"csspixellength"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"computedveciter"}}],[11,"new","","Construct an iterator from a slice of specified values and a context",285,null],[11,"len","","",285,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"to_computed_value","","",286,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",286,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_computed_value","","",287,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",287,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",288,{"inputs":[{"name":"cssfloat"}],"output":{"name":"nonnegativenumber"}}],[11,"from","","",289,{"inputs":[{"name":"cssfloat"}],"output":{"name":"greaterthanorequaltoonenumber"}}],[11,"heap_size_of_children","","",252,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"numberorpercentage"}}],[11,"compute_squared_distance","","",252,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"numberorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",252,{"inputs":[{"name":"self"},{"name":"numberorpercentage"}],"output":{"name":"bool"}}],[11,"to_css","","",252,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"integer_or","","Returns the integer value if it is an integer, otherwise return the given value.",290,{"inputs":[{"name":"self"},{"name":"cssinteger"}],"output":{"name":"cssinteger"}}],[11,"from","","",291,{"inputs":[{"name":"cssinteger"}],"output":{"name":"positiveinteger"}}],[11,"heap_size_of_children","","",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"cliprect"}}],[11,"compute_squared_distance","","",251,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"cliprect"}],"output":{"name":"bool"}}],[11,"ne","","",251,{"inputs":[{"name":"self"},{"name":"cliprect"}],"output":{"name":"bool"}}],[11,"to_css","","",251,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"auto","","Return an auto (default for clip-rect and image-region) value",292,{"inputs":[],"output":{"name":"self"}}],[11,"is_auto","","Check if it is auto",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"computedurl"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",253,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"computedurl"}],"output":{"name":"bool"}}],[11,"ne","","",253,{"inputs":[{"name":"self"},{"name":"computedurl"}],"output":{"name":"bool"}}],[11,"url","","Returns the resolved url if it was valid.",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_css","","",253,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"distance","style::values","Machinery to compute distances between animatable values.",null,null],[4,"SquaredDistance","style::values::distance","A distance between two animatable values.",null,null],[13,"Sqrt","","Represented as the square root of the squared distance.",293,null],[13,"Value","","Represented as the squared distance itself.",293,null],[8,"ComputeSquaredDistance","","A trait to compute squared distances between two animatable values.",null,null],[10,"compute_squared_distance","","Computes the squared distance between two animatable values.",294,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"squareddistance"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute_squared_distance","style::values::computed","",249,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sqrt","style::values::distance","Returns the square root of this squared distance.",293,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"add","","",293,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sum","","",293,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[0,"generics","style::values","Generic types that share their serialization implementations for both specified and computed values.",null,null],[3,"FontSettingTag","style::values::generics","A settings tag, defined by a four-character tag and a setting value",null,null],[12,"tag","","A four-character tag, packed into a u32 (one byte per character)",295,null],[12,"value","","The value",295,null],[3,"FontSettingTagInt","","An integer that can also parse \"on\" and \"off\", for font-feature-settings",null,null],[12,"0","","",296,null],[3,"FontSettingTagFloat","","A number value to be used for font-variation-settings",null,null],[12,"0","","",297,null],[3,"NonNegative","","A wrapper of Non-negative values.",null,null],[12,"0","","",298,null],[3,"GreaterThanOrEqualToOne","","A wrapper of greater-than-or-equal-to-one values.",null,null],[12,"0","","",299,null],[4,"SymbolsType","","",null,null],[13,"Cyclic","","",300,null],[13,"Numeric","","",300,null],[13,"Alphabetic","","",300,null],[13,"Symbolic","","",300,null],[13,"Fixed","","",300,null],[4,"CounterStyleOrNone","","https://drafts.csswg.org/css-counter-styles/#typedef-counter-style",null,null],[13,"None","","`none`",301,null],[13,"Name","","`<counter-style-name>`",301,null],[13,"Symbols","","`symbols()`",301,null],[4,"FontSettings","","A font settings value for font-variation-settings or font-feature-settings",null,null],[13,"Normal","","No settings (default)",302,null],[13,"Tag","","Set of settings",302,null],[0,"background","","Generic types for CSS values related to backgrounds.",null,null],[4,"BackgroundSize","style::values::generics::background","A generic value for the `background-size` property.",null,null],[13,"Explicit","","`<width> <height>`",303,null],[12,"width","style::values::generics::background::BackgroundSize","Explicit width.",303,null],[12,"height","","Explicit height.",303,null],[13,"Cover","style::values::generics::background","`cover`",303,null],[13,"Contain","","`contain`",303,null],[11,"heap_size_of_children","","",303,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",303,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"backgroundsize"}}],[11,"compute_squared_distance","","",303,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"backgroundsize"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"backgroundsize"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",303,null],[11,"from_computed_value","","",303,null],[11,"to_css","","",303,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"basic_shape","style::values::generics","CSS handling for the `basic-shape` types that are generic over their `ToCss` implementations.",null,null],[3,"InsetRect","style::values::generics::basic_shape","https://drafts.csswg.org/css-shapes/#funcdef-inset",null,null],[12,"rect","","",304,null],[12,"round","","",304,null],[3,"Circle","","https://drafts.csswg.org/css-shapes/#funcdef-circle",null,null],[12,"position","","",305,null],[12,"radius","","",305,null],[3,"Ellipse","","https://drafts.csswg.org/css-shapes/#funcdef-ellipse",null,null],[12,"position","","",306,null],[12,"semiaxis_x","","",306,null],[12,"semiaxis_y","","",306,null],[3,"Polygon","","A generic type for representing the `polygon()` function",null,null],[12,"fill","","The filling rule for a polygon.",307,null],[12,"coordinates","","A collection of (x, y) coordinates to draw the polygon.",307,null],[4,"GeometryBox","","https://drafts.fxtf.org/css-masking-1/#typedef-geometry-box",null,null],[13,"FillBox","","",308,null],[13,"StrokeBox","","",308,null],[13,"ViewBox","","",308,null],[13,"ShapeBox","","",308,null],[4,"ShapeBox","","",null,null],[13,"MarginBox","","",309,null],[13,"BorderBox","","",309,null],[13,"PaddingBox","","",309,null],[13,"ContentBox","","",309,null],[4,"ShapeSource","","A shape source, for some reference box.",null,null],[13,"Url","","",310,null],[13,"Shape","","",310,null],[13,"Box","","",310,null],[13,"None","","",310,null],[4,"BasicShape","","",null,null],[13,"Inset","","",311,null],[13,"Circle","","",311,null],[13,"Ellipse","","",311,null],[13,"Polygon","","",311,null],[4,"ShapeRadius","","https://drafts.csswg.org/css-shapes/#typedef-shape-radius",null,null],[13,"Length","","",312,null],[13,"ClosestSide","","",312,null],[13,"FarthestSide","","",312,null],[4,"FillRule","","",null,null],[13,"NonZero","","",313,null],[13,"EvenOdd","","",313,null],[6,"ClippingShape","","A clipping shape, for `clip-path`.",null,null],[6,"FloatAreaShape","","A float area shape, for `shape-outside`.",null,null],[11,"heap_size_of_children","","",308,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"geometrybox"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"geometrybox"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"geometrybox"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",308,null],[11,"from_computed_value","","",308,null],[11,"to_css","","",308,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"shapebox"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",309,null],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"shapebox"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",309,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",309,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",309,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",309,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",309,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",309,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",309,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",310,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",310,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"shapesource"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"shapesource"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"self"},{"name":"shapesource"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",310,null],[11,"from_computed_value","","",310,null],[11,"to_css","","",310,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",311,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",311,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"basicshape"}}],[11,"compute_squared_distance","","",311,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"basicshape"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"basicshape"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",311,null],[11,"from_computed_value","","",311,null],[11,"to_css","","",311,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",304,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",304,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"insetrect"}}],[11,"compute_squared_distance","","",304,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"insetrect"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"self"},{"name":"insetrect"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",304,null],[11,"from_computed_value","","",304,null],[11,"heap_size_of_children","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",305,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"compute_squared_distance","","",305,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"circle"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"self"},{"name":"circle"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",305,null],[11,"from_computed_value","","",305,null],[11,"heap_size_of_children","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",306,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"ellipse"}}],[11,"compute_squared_distance","","",306,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"ellipse"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"self"},{"name":"ellipse"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",306,null],[11,"from_computed_value","","",306,null],[11,"heap_size_of_children","","",312,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",312,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"shaperadius"}}],[11,"compute_squared_distance","","",312,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",312,{"inputs":[{"name":"self"},{"name":"shaperadius"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"self"},{"name":"shaperadius"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",312,null],[11,"from_computed_value","","",312,null],[11,"to_css","","",312,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",307,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",307,null],[11,"from_computed_value","","",307,null],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"fillrule"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",313,null],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"fillrule"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",313,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",313,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",313,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",313,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",313,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",313,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",313,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"compute_squared_distance","","",310,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",304,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",312,{"inputs":[],"output":{"name":"self"}}],[11,"animate","","",307,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",307,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",307,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",313,{"inputs":[],"output":{"name":"self"}}],[0,"border","style::values::generics","Generic types for CSS values related to borders.",null,null],[3,"BorderImageSlice","style::values::generics::border","A generic value for the `border-image-slice` property.",null,null],[12,"offsets","","The offsets.",314,null],[12,"fill","","Whether to fill the middle part.",314,null],[3,"BorderCornerRadius","","A generic value for the `border-*-radius` longhand properties.",null,null],[12,"0","","",315,null],[3,"BorderSpacing","","A generic value for the `border-spacing` property.",null,null],[12,"0","","",316,null],[3,"BorderRadius","","A generic value for `border-radius`, `outline-radius` and `inset()`.",null,null],[12,"top_left","","The top left radius.",317,null],[12,"top_right","","The top right radius.",317,null],[12,"bottom_right","","The bottom right radius.",317,null],[12,"bottom_left","","The bottom left radius.",317,null],[4,"BorderImageSideWidth","","A generic value for a single side of a `border-image-width` property.",null,null],[13,"Length","","`<length-or-percentage>`",318,null],[13,"Number","","`<number>`",318,null],[13,"Auto","","`auto`",318,null],[11,"heap_size_of_children","","",318,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"borderimagesidewidth"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",318,{"inputs":[{"name":"self"},{"name":"borderimagesidewidth"}],"output":{"name":"bool"}}],[11,"ne","","",318,{"inputs":[{"name":"self"},{"name":"borderimagesidewidth"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",318,null],[11,"from_computed_value","","",318,null],[11,"to_css","","",318,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"borderimageslice"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",314,{"inputs":[{"name":"self"},{"name":"borderimageslice"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"self"},{"name":"borderimageslice"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",314,null],[11,"from_computed_value","","",314,null],[11,"heap_size_of_children","","",314,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",315,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",315,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"bordercornerradius"}}],[11,"compute_squared_distance","","",315,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"bordercornerradius"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"bordercornerradius"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",315,null],[11,"from_computed_value","","",315,null],[11,"to_css","","",315,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Trivially create a `BorderCornerRadius`.",315,{"inputs":[{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",316,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",316,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"borderspacing"}}],[11,"compute_squared_distance","","",316,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"borderspacing"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"self"},{"name":"borderspacing"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",316,null],[11,"from_animated_value","","",316,null],[11,"to_computed_value","","",316,null],[11,"from_computed_value","","",316,null],[11,"to_css","","",316,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Trivially create a `BorderCornerRadius`.",316,{"inputs":[{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",317,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",317,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"borderradius"}}],[11,"compute_squared_distance","","",317,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",317,null],[11,"from_computed_value","","",317,null],[11,"from","","",314,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"to_css","","",314,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Returns a new `BorderRadius<L>`.",317,{"inputs":[{"name":"bordercornerradius"},{"name":"bordercornerradius"},{"name":"bordercornerradius"},{"name":"bordercornerradius"}],"output":{"name":"self"}}],[11,"serialize_rects","","Serialises two given rects following the syntax of the `border-radius`` property.",317,{"inputs":[{"name":"rect"},{"name":"rect"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",317,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"box_","style::values::generics","Generic types for box properties.",null,null],[4,"VerticalAlign","style::values::generics::box_","A generic value for the `vertical-align` property.",null,null],[13,"Baseline","","`baseline`",319,null],[13,"Sub","","`sub`",319,null],[13,"Super","","`super`",319,null],[13,"Top","","`top`",319,null],[13,"TextTop","","`text-top`",319,null],[13,"Middle","","`middle`",319,null],[13,"Bottom","","`bottom`",319,null],[13,"TextBottom","","`text-bottom`",319,null],[13,"Length","","`<length-percentage>`",319,null],[11,"heap_size_of_children","","",319,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",319,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"verticalalign"}}],[11,"compute_squared_distance","","",319,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",319,{"inputs":[{"name":"self"},{"name":"verticalalign"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"self"},{"name":"verticalalign"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",319,null],[11,"from_computed_value","","",319,null],[11,"to_css","","",319,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"baseline","","Returns `baseline`.",319,{"inputs":[],"output":{"name":"self"}}],[11,"to_animated_zero","","",319,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"effects","style::values::generics","Generic types for CSS values related to effects.",null,null],[3,"BoxShadow","style::values::generics::effects","A generic value for a single `box-shadow`.",null,null],[12,"base","","The base shadow.",320,null],[12,"spread","","The spread radius.",320,null],[12,"inset","","Whether this is an inset box shadow.",320,null],[3,"SimpleShadow","","A generic value for the `drop-shadow()` filter and the `text-shadow` property.",null,null],[12,"color","","Color.",321,null],[12,"horizontal","","Horizontal radius.",321,null],[12,"vertical","","Vertical radius.",321,null],[12,"blur","","Blur radius.",321,null],[4,"Filter","","A generic value for a single `filter`.",null,null],[13,"Blur","","`blur(<length>)`",322,null],[13,"Brightness","","`brightness(<factor>)`",322,null],[13,"Contrast","","`contrast(<factor>)`",322,null],[13,"Grayscale","","`grayscale(<factor>)`",322,null],[13,"HueRotate","","`hue-rotate(<angle>)`",322,null],[13,"Invert","","`invert(<factor>)`",322,null],[13,"Opacity","","`opacity(<factor>)`",322,null],[13,"Saturate","","`saturate(<factor>)`",322,null],[13,"Sepia","","`sepia(<factor>)`",322,null],[13,"DropShadow","","`drop-shadow(...)`",322,null],[11,"heap_size_of_children","","",320,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",320,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",320,{"inputs":[{"name":"self"}],"output":{"name":"boxshadow"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",320,{"inputs":[{"name":"self"},{"name":"boxshadow"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"self"},{"name":"boxshadow"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",320,null],[11,"from_animated_value","","",320,null],[11,"to_animated_zero","","",320,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",322,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",322,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",322,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",322,null],[11,"from_animated_value","","",322,null],[11,"to_computed_value","","",322,null],[11,"from_computed_value","","",322,null],[11,"to_css","","",322,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",321,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",321,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",321,{"inputs":[{"name":"self"}],"output":{"name":"simpleshadow"}}],[11,"compute_squared_distance","","",321,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",321,{"inputs":[{"name":"self"},{"name":"simpleshadow"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"self"},{"name":"simpleshadow"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",321,null],[11,"from_animated_value","","",321,null],[11,"to_animated_zero","","",321,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_css","","",321,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",320,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"flex","style::values::generics","Generic types for CSS values related to flexbox.",null,null],[4,"FlexBasis","style::values::generics::flex","A generic value for the `flex-basis` property.",null,null],[13,"Auto","","`auto`",323,null],[13,"Content","","`content`",323,null],[13,"Length","","`<length-percentage>`",323,null],[11,"heap_size_of_children","","",323,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"flexbasis"}}],[11,"fmt","","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",323,{"inputs":[{"name":"self"},{"name":"flexbasis"}],"output":{"name":"bool"}}],[11,"ne","","",323,{"inputs":[{"name":"self"},{"name":"flexbasis"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",323,null],[11,"from_computed_value","","",323,null],[11,"to_css","","",323,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"auto","","Returns `auto`.",323,{"inputs":[],"output":{"name":"self"}}],[11,"zero_percent","","Returns `0%`.",323,{"inputs":[],"output":{"name":"self"}}],[0,"grid","style::values::generics","Generic types for the handling of grids.",null,null],[3,"GridLine","style::values::generics::grid","A `<grid-line>` type.",null,null],[12,"is_span","","Flag to check whether it's a `span` keyword.",324,null],[12,"ident","","A custom identifier for named lines.",324,null],[12,"line_num","","Denotes the nth grid line from grid item's placement.",324,null],[3,"TrackRepeat","","The structure containing `<line-names>` and `<track-size>` values.",null,null],[12,"count","","The number of times for the value to be repeated (could also be `auto-fit` or `auto-fill`)",325,null],[12,"line_names","","`<line-names>` accompanying `<track_size>` values.",325,null],[12,"track_sizes","","`<track-size>` values.",325,null],[3,"TrackList","","A grid `<track-list>` type.",null,null],[12,"list_type","","The type of this `<track-list>` (auto, explicit or general).",326,null],[12,"values","","A vector of `<track-size> | <track-repeat>` values.",326,null],[12,"line_names","","`<line-names>` accompanying `<track-size> | <track-repeat>` values.",326,null],[12,"auto_repeat","","`<auto-repeat>` value. There can only be one `<auto-repeat>` in a TrackList.",326,null],[3,"LineNameList","","The `<line-name-list>` for subgrids.",null,null],[12,"names","","The optional `<line-name-list>`",327,null],[12,"fill_idx","","Indicates the line name that requires `auto-fill`",327,null],[4,"TrackKeyword","","",null,null],[13,"Auto","","",328,null],[13,"MaxContent","","",328,null],[13,"MinContent","","",328,null],[4,"TrackBreadth","","A track breadth for explicit grid track sizing. It's generic solely to avoid re-implementing it for the computed type.",null,null],[13,"Breadth","","The generic type is almost always a non-negative `<length-percentage>`",329,null],[13,"Flex","","A flex fraction specified in `fr` units.",329,null],[13,"Keyword","","One of the track-sizing keywords (`auto`, `min-content`, `max-content`)",329,null],[4,"TrackSize","","A `<track-size>` type for explicit grid track sizing. Like `<track-breadth>`, this is generic only to avoid code bloat. It only takes `<length-percentage>`",null,null],[13,"Breadth","","A flexible `<track-breadth>`",330,null],[13,"Minmax","","A `minmax` function for a range over an inflexible `<track-breadth>` and a flexible `<track-breadth>`",330,null],[13,"FitContent","","A `fit-content` function.",330,null],[4,"RepeatCount","","The initial argument of the `repeat` function.",null,null],[13,"Number","","A positive integer. This is allowed only for `<track-repeat>` and `<fixed-repeat>`",331,null],[13,"AutoFill","","An `<auto-fill>` keyword allowed only for `<auto-repeat>`",331,null],[13,"AutoFit","","An `<auto-fit>` keyword allowed only for `<auto-repeat>`",331,null],[4,"TrackListValue","","Track list values. Can be <track-size> or <track-repeat>",null,null],[13,"TrackSize","","A <track-size> value.",332,null],[13,"TrackRepeat","","A <track-repeat> value.",332,null],[4,"TrackListType","","The type of a `<track-list>` as determined during parsing.",null,null],[13,"Auto","","`<auto-track-list>`",333,null],[13,"Normal","","`<track-list>`",333,null],[13,"Explicit","","`<explicit-track-list>`",333,null],[4,"GridTemplateComponent","","Variants for `<grid-template-rows> | <grid-template-columns>` Subgrid deferred to Level 2 spec due to lack of implementation. But it's implemented in gecko, so we have to as well.",null,null],[13,"None","","`none` value.",334,null],[13,"TrackList","","The grid `<track-list>`",334,null],[13,"Subgrid","","A `subgrid <line-name-list>?`",334,null],[5,"concat_serialize_idents","","Helper function for serializing identifiers with a prefix and suffix, used for serializing <line-names> (in grid).",null,null],[11,"heap_size_of_children","","",324,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"gridline"}}],[11,"fmt","","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",324,{"inputs":[],"output":{"name":"gridline"}}],[11,"eq","","",324,{"inputs":[{"name":"self"},{"name":"gridline"}],"output":{"name":"bool"}}],[11,"ne","","",324,{"inputs":[{"name":"self"},{"name":"gridline"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",324,null],[11,"from_computed_value","","",324,null],[11,"auto","","The `auto` value.",324,{"inputs":[],"output":{"name":"self"}}],[11,"is_auto","","Check whether this `<grid-line>` represents an `auto` value.",324,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_css","","",324,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",324,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"trackkeyword"}}],[11,"fmt","","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",328,null],[11,"eq","","",328,{"inputs":[{"name":"self"},{"name":"trackkeyword"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",328,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",328,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",328,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",328,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",328,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",328,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",328,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",329,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"trackbreadth"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",329,{"inputs":[{"name":"self"},{"name":"trackbreadth"}],"output":{"name":"bool"}}],[11,"ne","","",329,{"inputs":[{"name":"self"},{"name":"trackbreadth"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",329,null],[11,"from_computed_value","","",329,null],[11,"is_fixed","","Check whether this is a `<fixed-breadth>` (i.e., it only has `<length-percentage>`)",329,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_css","","",329,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",330,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"tracksize"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",330,{"inputs":[{"name":"self"},{"name":"tracksize"}],"output":{"name":"bool"}}],[11,"ne","","",330,{"inputs":[{"name":"self"},{"name":"tracksize"}],"output":{"name":"bool"}}],[11,"is_fixed","","Check whether this is a `<fixed-size>`",330,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",330,{"inputs":[],"output":{"name":"self"}}],[11,"is_default","","Returns true if current TrackSize is same as default.",330,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_css","","",330,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",330,null],[11,"from_computed_value","","",330,null],[11,"heap_size_of_children","","",331,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",331,{"inputs":[{"name":"self"}],"output":{"name":"repeatcount"}}],[11,"fmt","","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",331,{"inputs":[{"name":"self"},{"name":"repeatcount"}],"output":{"name":"bool"}}],[11,"ne","","",331,{"inputs":[{"name":"self"},{"name":"repeatcount"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",331,null],[11,"from_computed_value","","",331,null],[11,"to_css","","",331,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",331,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",325,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"trackrepeat"}}],[11,"fmt","","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",325,{"inputs":[{"name":"self"},{"name":"trackrepeat"}],"output":{"name":"bool"}}],[11,"ne","","",325,{"inputs":[{"name":"self"},{"name":"trackrepeat"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",325,null],[11,"from_computed_value","","",325,null],[11,"to_css","","",325,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"expand","","If the repeat count is numeric, then expand the values and merge accordingly.",325,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",332,{"inputs":[{"name":"self"}],"output":{"name":"tracklistvalue"}}],[11,"fmt","","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",332,{"inputs":[{"name":"self"},{"name":"tracklistvalue"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"self"},{"name":"tracklistvalue"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",332,null],[11,"from_computed_value","","",332,null],[11,"to_css","","",332,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",332,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",333,{"inputs":[{"name":"self"}],"output":{"name":"tracklisttype"}}],[11,"fmt","","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",333,{"inputs":[{"name":"self"},{"name":"tracklisttype"}],"output":{"name":"bool"}}],[11,"ne","","",333,{"inputs":[{"name":"self"},{"name":"tracklisttype"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",333,null],[11,"from_computed_value","","",333,null],[11,"heap_size_of_children","","",333,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",326,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"tracklist"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",326,{"inputs":[{"name":"self"},{"name":"tracklist"}],"output":{"name":"bool"}}],[11,"ne","","",326,{"inputs":[{"name":"self"},{"name":"tracklist"}],"output":{"name":"bool"}}],[11,"to_css","","",326,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"linenamelist"}}],[11,"fmt","","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",327,{"inputs":[],"output":{"name":"linenamelist"}}],[11,"eq","","",327,{"inputs":[{"name":"self"},{"name":"linenamelist"}],"output":{"name":"bool"}}],[11,"ne","","",327,{"inputs":[{"name":"self"},{"name":"linenamelist"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",327,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_computed_value","","",327,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",327,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse","","",327,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",327,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",334,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"gridtemplatecomponent"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"self"},{"name":"gridtemplatecomponent"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"self"},{"name":"gridtemplatecomponent"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",334,null],[11,"from_computed_value","","",334,null],[11,"to_css","","",334,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"track_list_len","","Returns length of the <track-list>s <track-size>",334,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"image","style::values::generics","Generic types for the handling of [images].",null,null],[3,"Gradient","style::values::generics::image","A CSS gradient. https://drafts.csswg.org/css-images/#gradients",null,null],[12,"kind","","Gradients can be linear or radial.",335,null],[12,"items","","The color stops and interpolation hints.",335,null],[12,"repeating","","True if this is a repeating gradient.",335,null],[12,"compat_mode","","Compatibility mode.",335,null],[3,"ColorStop","","A color stop. https://drafts.csswg.org/css-images/#typedef-color-stop-list",null,null],[12,"color","","The color of this stop.",336,null],[12,"position","","The position of this stop.",336,null],[3,"PaintWorklet","","Specified values for a paint worklet. https://drafts.css-houdini.org/css-paint-api/",null,null],[12,"name","","The name the worklet was registered with.",337,null],[12,"arguments","","The arguments for the worklet. TODO: store a parsed representation of the arguments.",337,null],[3,"MozImageRect","","Values for `moz-image-rect`.",null,null],[12,"url","","",338,null],[12,"top","","",338,null],[12,"right","","",338,null],[12,"bottom","","",338,null],[12,"left","","",338,null],[4,"Image","","An [image].",null,null],[13,"Url","","A `<url()>` image.",339,null],[13,"Gradient","","A `<gradient>` image.  Gradients are rather large, and not nearly as common as urls, so we box them here to keep the size of this enum sane.",339,null],[13,"Rect","","A `-moz-image-rect` image.  Also fairly large and rare.",339,null],[13,"Element","","A `-moz-element(# <element-id>)`",339,null],[13,"PaintWorklet","","A paint worklet image. https://drafts.css-houdini.org/css-paint-api/",339,null],[4,"CompatMode","","Whether we used the modern notation or the compatibility `-webkit`, `-moz` prefixes.",null,null],[13,"Modern","","Modern syntax.",340,null],[13,"WebKit","","`-webkit` prefix.",340,null],[13,"Moz","","`-moz` prefix",340,null],[4,"GradientKind","","A gradient kind.",null,null],[13,"Linear","","A linear gradient.",341,null],[13,"Radial","","A radial gradient.",341,null],[4,"EndingShape","","A radial gradient's ending shape.",null,null],[13,"Circle","","A circular gradient.",342,null],[13,"Ellipse","","An elliptic gradient.",342,null],[4,"Circle","","A circle shape.",null,null],[13,"Radius","","A circle radius.",343,null],[13,"Extent","","A circle extent.",343,null],[4,"Ellipse","","An ellipse shape.",null,null],[13,"Radii","","An ellipse pair of radii.",344,null],[13,"Extent","","An ellipse extent.",344,null],[4,"ShapeExtent","","",null,null],[13,"ClosestSide","","",345,null],[13,"FarthestSide","","",345,null],[13,"ClosestCorner","","",345,null],[13,"FarthestCorner","","",345,null],[13,"Contain","","",345,null],[13,"Cover","","",345,null],[4,"GradientItem","","A gradient item. https://drafts.csswg.org/css-images-4/#color-stop-syntax",null,null],[13,"ColorStop","","A color stop.",346,null],[13,"InterpolationHint","","An interpolation hint.",346,null],[8,"LineDirection","","The direction of a linear gradient.",null,null],[10,"points_downwards","","Whether this direction points towards, and thus can be omitted.",347,{"inputs":[{"name":"self"},{"name":"compatmode"}],"output":{"name":"bool"}}],[10,"to_css","","Serialises this direction according to the compatibility mode.",347,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compatmode"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",339,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"eq","","",339,{"inputs":[{"name":"self"},{"name":"image"}],"output":{"name":"bool"}}],[11,"ne","","",339,{"inputs":[{"name":"self"},{"name":"image"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",339,null],[11,"from_computed_value","","",339,null],[11,"heap_size_of_children","","",335,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",335,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"ne","","",335,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",335,null],[11,"from_computed_value","","",335,null],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"compatmode"}}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",340,{"inputs":[{"name":"self"},{"name":"compatmode"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",340,null],[11,"from_computed_value","","",340,null],[11,"heap_size_of_children","","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",341,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",341,{"inputs":[{"name":"self"}],"output":{"name":"gradientkind"}}],[11,"fmt","","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",341,{"inputs":[{"name":"self"},{"name":"gradientkind"}],"output":{"name":"bool"}}],[11,"ne","","",341,{"inputs":[{"name":"self"},{"name":"gradientkind"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",341,null],[11,"from_computed_value","","",341,null],[11,"clone","","",342,{"inputs":[{"name":"self"}],"output":{"name":"endingshape"}}],[11,"fmt","","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",342,{"inputs":[{"name":"self"},{"name":"endingshape"}],"output":{"name":"bool"}}],[11,"ne","","",342,{"inputs":[{"name":"self"},{"name":"endingshape"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",342,null],[11,"from_computed_value","","",342,null],[11,"to_css","","",342,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",342,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",343,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"fmt","","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",343,{"inputs":[{"name":"self"},{"name":"circle"}],"output":{"name":"bool"}}],[11,"ne","","",343,{"inputs":[{"name":"self"},{"name":"circle"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",343,null],[11,"from_computed_value","","",343,null],[11,"heap_size_of_children","","",343,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",344,{"inputs":[{"name":"self"}],"output":{"name":"ellipse"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",344,{"inputs":[{"name":"self"},{"name":"ellipse"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"self"},{"name":"ellipse"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",344,null],[11,"from_computed_value","","",344,null],[11,"to_css","","",344,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",344,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",345,{"inputs":[{"name":"self"}],"output":{"name":"shapeextent"}}],[11,"fmt","","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",345,null],[11,"eq","","",345,{"inputs":[{"name":"self"},{"name":"shapeextent"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",345,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",345,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",345,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",345,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",345,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",345,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",345,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",346,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",346,{"inputs":[{"name":"self"}],"output":{"name":"gradientitem"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",346,{"inputs":[{"name":"self"},{"name":"gradientitem"}],"output":{"name":"bool"}}],[11,"ne","","",346,{"inputs":[{"name":"self"},{"name":"gradientitem"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",346,null],[11,"from_computed_value","","",346,null],[11,"to_css","","",346,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",336,{"inputs":[{"name":"self"}],"output":{"name":"colorstop"}}],[11,"eq","","",336,{"inputs":[{"name":"self"},{"name":"colorstop"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"self"},{"name":"colorstop"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",336,null],[11,"from_computed_value","","",336,null],[11,"to_css","","",336,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",336,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",337,{"inputs":[{"name":"self"}],"output":{"name":"paintworklet"}}],[11,"fmt","","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",337,{"inputs":[{"name":"self"},{"name":"paintworklet"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"self"},{"name":"paintworklet"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",337,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_computed_value","","",337,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",337,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_css","","",337,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",338,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",338,{"inputs":[{"name":"self"}],"output":{"name":"mozimagerect"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",338,{"inputs":[{"name":"self"},{"name":"mozimagerect"}],"output":{"name":"bool"}}],[11,"ne","","",338,{"inputs":[{"name":"self"},{"name":"mozimagerect"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",338,null],[11,"from_computed_value","","",338,null],[11,"to_css","","",338,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",339,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",335,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",343,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"position","style::values::generics","Generic types for CSS handling of specified and computed values of `position`",null,null],[3,"Position","style::values::generics::position","A generic type for representing a CSS position.",null,null],[12,"horizontal","","The horizontal component of position.",348,null],[12,"vertical","","The vertical component of position.",348,null],[11,"heap_size_of_children","","",348,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",348,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"compute_squared_distance","","",348,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",348,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",348,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",348,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",348,null],[11,"from_computed_value","","",348,null],[11,"new","","Returns a new position.",348,{"inputs":[{"name":"h"},{"name":"v"}],"output":{"name":"self"}}],[0,"rect","style::values::generics","Generic types for CSS values that are composed of four sides.",null,null],[3,"Rect","style::values::generics::rect","A CSS value made of four components, where its `ToCss` impl will try to serialize as few components as possible, like for example in `border-width`.",null,null],[12,"0","","",349,null],[12,"1","","",349,null],[12,"2","","",349,null],[12,"3","","",349,null],[11,"heap_size_of_children","","",349,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",349,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"compute_squared_distance","","",349,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",349,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",349,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",349,null],[11,"from_computed_value","","",349,null],[11,"new","","Returns a new `Rect<T>` value.",349,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"all","","Returns a rect with all the values equal to `v`.",349,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"parse_with","","Parses a new `Rect<T>` value with the given parse function.",349,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"parse"}],"output":{"name":"result"}}],[11,"parse","","",349,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",349,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"size","style::values::generics","Generic type for CSS properties that are composed by two dimensions.",null,null],[3,"Size","style::values::generics::size","A generic size, for `border-*-radius` longhand properties, or `border-spacing`.",null,null],[12,"0","","",350,null],[11,"heap_size_of_children","","",350,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",350,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"compute_squared_distance","","",350,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",350,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",350,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",350,null],[11,"from_computed_value","","",350,null],[11,"new","","Create a new `Size` for an area of given width and height.",350,{"inputs":[{"name":"l"},{"name":"l"}],"output":{"name":"size"}}],[11,"width","","Returns the width component.",350,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"height","","Returns the height component.",350,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"parse_with","","Parse a `Size` with a given parsing function.",350,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"from","","",350,{"inputs":[{"name":"l"}],"output":{"name":"self"}}],[11,"to_css","","",350,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_animated_value","","",350,null],[11,"from_animated_value","","",350,null],[0,"svg","style::values::generics","Generic types for CSS values in SVG",null,null],[3,"SVGPaint","style::values::generics::svg","An SVG paint value",null,null],[12,"kind","","The paint source",351,null],[12,"fallback","","The fallback color. It would be empty, the `none` keyword or .",351,null],[4,"SVGPaintKind","","An SVG paint value without the fallback",null,null],[13,"None","","`none`",352,null],[13,"Color","","`<color>`",352,null],[13,"PaintServer","","`url(...)`",352,null],[13,"ContextFill","","`context-fill`",352,null],[13,"ContextStroke","","`context-stroke`",352,null],[4,"SvgLengthOrPercentageOrNumber","","A value of  |  |  for svg which allow unitless length. https://www.w3.org/TR/SVG11/painting.html#StrokeProperties",null,null],[13,"LengthOrPercentage",""," | ",353,null],[13,"Number","","",353,null],[4,"SVGLength","","An SVG length value supports `context-value` in addition to length.",null,null],[13,"Length","","`<length> | <percentage> | <number>`",354,null],[13,"ContextValue","","`context-value`",354,null],[4,"SVGStrokeDashArray","","Generic value for stroke-dasharray.",null,null],[13,"Values","","`[ <length> | <percentage> | <number> ]#`",355,null],[13,"ContextValue","","`context-value`",355,null],[4,"SVGOpacity","","An SVG opacity value accepts `context-{fill,stroke}-opacity` in addition to opacity value.",null,null],[13,"Opacity","","`<opacity-value>`",356,null],[13,"ContextFillOpacity","","`context-fill-opacity`",356,null],[13,"ContextStrokeOpacity","","`context-stroke-opacity`",356,null],[11,"heap_size_of_children","","",351,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",351,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",351,{"inputs":[{"name":"self"}],"output":{"name":"svgpaint"}}],[11,"compute_squared_distance","","",351,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",351,{"inputs":[{"name":"self"},{"name":"svgpaint"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"self"},{"name":"svgpaint"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",351,null],[11,"from_animated_value","","",351,null],[11,"to_computed_value","","",351,null],[11,"from_computed_value","","",351,null],[11,"to_css","","",351,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",352,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",352,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",352,{"inputs":[{"name":"self"}],"output":{"name":"svgpaintkind"}}],[11,"compute_squared_distance","","",352,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",352,{"inputs":[{"name":"self"},{"name":"svgpaintkind"}],"output":{"name":"bool"}}],[11,"ne","","",352,{"inputs":[{"name":"self"},{"name":"svgpaintkind"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",352,null],[11,"from_animated_value","","",352,null],[11,"to_animated_zero","","",352,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",352,null],[11,"from_computed_value","","",352,null],[11,"to_css","","",352,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",351,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",353,{"inputs":[{"name":"self"}],"output":{"name":"svglengthorpercentageornumber"}}],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",353,{"inputs":[{"name":"self"},{"name":"svglengthorpercentageornumber"}],"output":{"name":"bool"}}],[11,"ne","","",353,{"inputs":[{"name":"self"},{"name":"svglengthorpercentageornumber"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",353,null],[11,"from_animated_value","","",353,null],[11,"to_animated_zero","","",353,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",353,null],[11,"from_computed_value","","",353,null],[11,"to_css","","",353,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",353,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"has_calc","","return true if this struct has calc value.",353,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","",353,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",354,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",354,{"inputs":[{"name":"self"}],"output":{"name":"svglength"}}],[11,"compute_squared_distance","","",354,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",354,{"inputs":[{"name":"self"},{"name":"svglength"}],"output":{"name":"bool"}}],[11,"ne","","",354,{"inputs":[{"name":"self"},{"name":"svglength"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",354,null],[11,"from_animated_value","","",354,null],[11,"to_animated_zero","","",354,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",354,null],[11,"from_computed_value","","",354,null],[11,"to_css","","",354,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",355,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",355,{"inputs":[{"name":"self"}],"output":{"name":"svgstrokedasharray"}}],[11,"compute_squared_distance","","",355,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",355,{"inputs":[{"name":"self"},{"name":"svgstrokedasharray"}],"output":{"name":"bool"}}],[11,"ne","","",355,{"inputs":[{"name":"self"},{"name":"svgstrokedasharray"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",355,null],[11,"from_animated_value","","",355,null],[11,"to_computed_value","","",355,null],[11,"from_computed_value","","",355,null],[11,"to_css","","",355,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",356,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",356,{"inputs":[{"name":"self"}],"output":{"name":"svgopacity"}}],[11,"compute_squared_distance","","",356,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",356,{"inputs":[{"name":"self"},{"name":"svgopacity"}],"output":{"name":"bool"}}],[11,"ne","","",356,{"inputs":[{"name":"self"},{"name":"svgopacity"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",356,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",356,null],[11,"from_computed_value","","",356,null],[11,"to_css","","",356,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"text","style::values::generics","Generic types for text properties.",null,null],[4,"InitialLetter","style::values::generics::text","A generic value for the `initial-letter` property.",null,null],[13,"Normal","","`normal`",357,null],[13,"Specified","","`<number> <integer>?`",357,null],[4,"Spacing","","A generic spacing value for the `letter-spacing` and `word-spacing` properties.",null,null],[13,"Normal","","`normal`",358,null],[13,"Value","","`<value>`",358,null],[4,"LineHeight","","A generic value for the `line-height` property.",null,null],[13,"Normal","","`normal`",359,null],[13,"Number","","`<number>`",359,null],[13,"Length","","`<length-or-percentage>`",359,null],[11,"heap_size_of_children","","",357,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",357,{"inputs":[{"name":"self"}],"output":{"name":"initialletter"}}],[11,"fmt","","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",357,{"inputs":[{"name":"self"},{"name":"initialletter"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"self"},{"name":"initialletter"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",357,null],[11,"from_computed_value","","",357,null],[11,"to_css","","",357,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"normal","","Returns `normal`.",357,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",358,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",358,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",358,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",358,null],[11,"from_computed_value","","",358,null],[11,"to_css","","",358,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"normal","","Returns `normal`.",358,{"inputs":[],"output":{"name":"self"}}],[11,"parse_with","","Parses.",358,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"value","","Returns the spacing value, if not `normal`.",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"animate","","",358,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",358,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",358,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",359,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",359,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",359,{"inputs":[{"name":"self"}],"output":{"name":"lineheight"}}],[11,"compute_squared_distance","","",359,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"self"},{"name":"lineheight"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"self"},{"name":"lineheight"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",359,null],[11,"from_animated_value","","",359,null],[11,"to_css","","",359,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"normal","","Returns `normal`.",359,{"inputs":[],"output":{"name":"self"}}],[0,"transform","style::values::generics","Generic types for CSS values that are related to transformations.",null,null],[3,"Matrix","style::values::generics::transform","A generic 2D transformation matrix.",null,null],[12,"a","","",360,null],[12,"b","","",360,null],[12,"c","","",360,null],[12,"d","","",360,null],[12,"e","","",360,null],[12,"f","","",360,null],[3,"TransformOrigin","","A generic transform origin.",null,null],[12,"horizontal","","The horizontal origin.",361,null],[12,"vertical","","The vertical origin.",361,null],[12,"depth","","The depth.",361,null],[4,"TimingFunction","","A generic timing function.",null,null],[13,"Keyword","","`linear | ease | ease-in | ease-out | ease-in-out`",362,null],[13,"CubicBezier","","`cubic-bezier(<number>, <number>, <number>, <number>)`",362,null],[12,"x1","style::values::generics::transform::TimingFunction","",362,null],[12,"y1","","",362,null],[12,"x2","","",362,null],[12,"y2","","",362,null],[13,"Steps","style::values::generics::transform","`step-start | step-end | steps(<integer>, [ start | end ]?)`",362,null],[13,"Frames","","`frames(<integer>)`",362,null],[4,"TimingKeyword","","",null,null],[13,"Linear","","",363,null],[13,"Ease","","",363,null],[13,"EaseIn","","",363,null],[13,"EaseOut","","",363,null],[13,"EaseInOut","","",363,null],[4,"StepPosition","","",null,null],[13,"Start","","",364,null],[13,"End","","",364,null],[11,"heap_size_of_children","","",360,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",360,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"fmt","","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",360,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"ne","","",360,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",360,null],[11,"from_computed_value","","",360,null],[11,"to_css","","",360,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",361,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",361,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",361,{"inputs":[{"name":"self"}],"output":{"name":"transformorigin"}}],[11,"compute_squared_distance","","",361,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",361,{"inputs":[{"name":"self"},{"name":"transformorigin"}],"output":{"name":"bool"}}],[11,"ne","","",361,{"inputs":[{"name":"self"},{"name":"transformorigin"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",361,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",361,null],[11,"from_computed_value","","",361,null],[11,"to_css","","",361,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",362,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",362,{"inputs":[{"name":"self"}],"output":{"name":"timingfunction"}}],[11,"fmt","","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",362,{"inputs":[{"name":"self"},{"name":"timingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"self"},{"name":"timingfunction"}],"output":{"name":"bool"}}],[11,"clone","","",363,{"inputs":[{"name":"self"}],"output":{"name":"timingkeyword"}}],[11,"fmt","","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",363,null],[11,"eq","","",363,{"inputs":[{"name":"self"},{"name":"timingkeyword"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",363,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",363,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",363,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",363,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",363,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",363,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",363,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",364,{"inputs":[{"name":"self"}],"output":{"name":"stepposition"}}],[11,"fmt","","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",364,null],[11,"eq","","",364,{"inputs":[{"name":"self"},{"name":"stepposition"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",364,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",364,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",364,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",364,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",364,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",364,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",364,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Returns a new transform origin.",361,{"inputs":[{"name":"h"},{"name":"v"},{"name":"d"}],"output":{"name":"self"}}],[11,"ease","","`ease`",362,{"inputs":[],"output":{"name":"self"}}],[11,"to_css","","",362,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_bezier","","Returns the keyword as a quadruplet of Bezier point coordinates `(x1, y1, x2, y2)`.",363,null],[11,"clone","style::values::generics","",300,{"inputs":[{"name":"self"}],"output":{"name":"symbolstype"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",300,null],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"symbolstype"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",300,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",300,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",300,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",300,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",300,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",300,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",300,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"counterstyleornone"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"counterstyleornone"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"counterstyleornone"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",301,null],[11,"from_computed_value","","",301,null],[11,"to_css","","",301,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"disc","","disc value",301,{"inputs":[],"output":{"name":"self"}}],[11,"decimal","","decimal value",301,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",301,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",295,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"fontsettingtag"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",295,{"inputs":[{"name":"self"},{"name":"fontsettingtag"}],"output":{"name":"bool"}}],[11,"ne","","",295,{"inputs":[{"name":"self"},{"name":"fontsettingtag"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",295,null],[11,"from_computed_value","","",295,null],[11,"to_css","","",295,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","https://www.w3.org/TR/css-fonts-3/#propdef-font-feature-settings https://drafts.csswg.org/css-fonts-4/#low-level-font-variation- settings-control-the-font-variation-settings-property  [ on | off |  ]  ",295,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",302,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"fontsettings"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"fontsettings"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"self"},{"name":"fontsettings"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",302,null],[11,"from_computed_value","","",302,null],[11,"to_css","","",302,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","https://www.w3.org/TR/css-fonts-3/#propdef-font-feature-settings",302,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"fontsettingtagint"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"fontsettingtagint"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"fontsettingtagint"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",296,null],[11,"from_computed_value","","",296,null],[11,"heap_size_of_children","","",297,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"fontsettingtagfloat"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",297,{"inputs":[{"name":"self"},{"name":"fontsettingtagfloat"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"self"},{"name":"fontsettingtagfloat"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",297,null],[11,"from_computed_value","","",297,null],[11,"to_css","","",296,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",296,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",297,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",297,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",298,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",298,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"nonnegative"}}],[11,"compute_squared_distance","","",298,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"self"},{"name":"nonnegative"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",298,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",298,null],[11,"from_computed_value","","",298,null],[11,"to_css","","",298,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",299,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",299,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"greaterthanorequaltoone"}}],[11,"compute_squared_distance","","",299,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"option"}}],[11,"lt","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"le","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"gt","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"ge","","",299,{"inputs":[{"name":"self"},{"name":"greaterthanorequaltoone"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",299,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",299,null],[11,"from_computed_value","","",299,null],[11,"to_css","","",299,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"specified","style::values","Specified values.",null,null],[3,"Number","style::values::specified","",null,null],[3,"Opacity","","",null,null],[3,"Integer","","An specified `<integer>`, optionally coming from a `calc()` expression.",null,null],[3,"ClipRect","","rect(, , , ) used by clip and image-region",null,null],[12,"top",""," ( | )",365,null],[12,"right",""," ( | )",365,null],[12,"bottom",""," ( | )",365,null],[12,"left",""," ( | )",365,null],[3,"Attr","","An attr(...) rule",null,null],[12,"namespace","","Optional namespace",366,null],[12,"attribute","","Attribute name",366,null],[4,"BorderStyle","","",null,null],[13,"none","","",367,null],[13,"solid","","",367,null],[13,"double","","",367,null],[13,"dotted","","",367,null],[13,"dashed","","",367,null],[13,"hidden","","",367,null],[13,"groove","","",367,null],[13,"ridge","","",367,null],[13,"inset","","",367,null],[13,"outset","","",367,null],[4,"NumberOrPercentage",""," | ",null,null],[13,"Percentage","","",368,null],[13,"Number","","",368,null],[4,"AllowQuirks","","Whether quirks are allowed in this context.",null,null],[13,"Yes","","Quirks are allowed.",369,null],[13,"No","","Quirks are not allowed.",369,null],[5,"parse_integer","","Parse an `<integer>` value, handling `calc()` correctly.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_number","","Parse a `<number>` value, handling `calc()` correctly, and without length limitations.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_number_with_clamping_mode","","Parse a `<number>` value, with a given clamping mode.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowednumerictype"}],"output":{"name":"result"}}],[0,"angle","","Specified angles.",null,null],[3,"Angle","style::values::specified::angle","A specified angle.",null,null],[11,"heap_size_of_children","","",370,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",370,{"inputs":[{"name":"self"}],"output":{"name":"angle"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",370,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"ne","","",370,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"to_css","","",370,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",370,null],[11,"from_computed_value","","",370,null],[11,"from_degrees","","Creates an angle with the given value in degrees.",370,{"inputs":[{"name":"cssfloat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_gradians","","Creates an angle with the given value in gradians.",370,{"inputs":[{"name":"cssfloat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_turns","","Creates an angle with the given value in turns.",370,{"inputs":[{"name":"cssfloat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_radians","","Creates an angle with the given value in radians.",370,{"inputs":[{"name":"cssfloat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"radians","","Returns the amount of radians this angle represents.",370,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"zero","","Returns `0deg`.",370,{"inputs":[],"output":{"name":"self"}}],[11,"from_calc","","Returns an `Angle` parsed from a `calc()` expression.",370,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"parse","","Parses an angle according to CSS-VALUES § 6.1.",370,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_dimension","","Parse an `<angle>` value given a value and an unit.",370,{"inputs":[{"name":"cssfloat"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_with_unitless","","Parse an angle, including unitless 0 degree.",370,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"background","style::values::specified","Specified types for CSS values related to backgrounds.",null,null],[6,"BackgroundSize","style::values::specified::background","A specified value for the `background-size` property.",null,null],[11,"parse","","",371,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"auto","","Returns `auto auto`.",371,{"inputs":[],"output":{"name":"self"}}],[0,"basic_shape","style::values::specified","CSS handling for the specified value of [`basic-shape`][basic-shape]s",null,null],[6,"ClippingShape","style::values::specified::basic_shape","A specified clipping shape.",null,null],[6,"FloatAreaShape","","A specified float area shape.",null,null],[6,"BasicShape","","A specified basic shape.",null,null],[6,"InsetRect","","The specified value of `inset()`",null,null],[6,"Circle","","A specified circle.",null,null],[6,"Ellipse","","A specified ellipse.",null,null],[6,"ShapeRadius","","The specified value of `ShapeRadius`",null,null],[6,"Polygon","","The specified value of `Polygon`",null,null],[11,"parse","style::values::generics::basic_shape","",310,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",308,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","style::values::specified::basic_shape","",372,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",373,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_function_arguments","","Parse the inner function arguments of `inset()`",373,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",374,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_function_arguments","","",374,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",374,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",375,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_function_arguments","","",375,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",375,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",376,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",377,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_function_arguments","","Parse the inner arguments of a `polygon` function.",377,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"border","style::values::specified","Specified types for CSS values related to borders.",null,null],[4,"BorderSideWidth","style::values::specified::border","A specified value for a single side of the `border-width` property.",null,null],[13,"Thin","","`thin`",378,null],[13,"Medium","","`medium`",378,null],[13,"Thick","","`thick`",378,null],[13,"Length","","`<length>`",378,null],[6,"BorderImageWidth","","A specified value for the `border-image-width` property.",null,null],[6,"BorderImageSideWidth","","A specified value for a single side of a `border-image-width` property.",null,null],[6,"BorderImageSlice","","A specified value for the `border-image-slice` property.",null,null],[6,"BorderRadius","","A specified value for the `border-radius` property.",null,null],[6,"BorderCornerRadius","","A specified value for the `border-*-radius` longhand properties.",null,null],[6,"BorderSpacing","","A specified value for the `border-spacing` longhand properties.",null,null],[11,"heap_size_of_children","","",378,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",378,{"inputs":[{"name":"self"}],"output":{"name":"bordersidewidth"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",378,{"inputs":[{"name":"self"},{"name":"bordersidewidth"}],"output":{"name":"bool"}}],[11,"ne","","",378,{"inputs":[{"name":"self"},{"name":"bordersidewidth"}],"output":{"name":"bool"}}],[11,"to_css","","",378,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses, with quirks.",378,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse","","",378,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",378,null],[11,"from_computed_value","","",378,null],[11,"one","","Returns `1`.",379,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",379,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",380,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",381,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",382,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",383,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"box_","style::values::specified","Specified types for box properties.",null,null],[6,"VerticalAlign","style::values::specified::box_","A specified value for the `vertical-align` property.",null,null],[11,"parse","","",384,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"calc","style::values::specified","[Calc expressions][calc].",null,null],[3,"CalcLengthOrPercentage","style::values::specified::calc","A struct to hold a simplified `<length>` or `<percentage>` expression.",null,null],[12,"clamping_mode","","",385,null],[12,"absolute","","",385,null],[12,"vw","","",385,null],[12,"vh","","",385,null],[12,"vmin","","",385,null],[12,"vmax","","",385,null],[12,"em","","",385,null],[12,"ex","","",385,null],[12,"ch","","",385,null],[12,"rem","","",385,null],[12,"percentage","","",385,null],[4,"CalcNode","","A node inside a `Calc` expression's AST.",null,null],[13,"Length","","`<length>`",386,null],[13,"Angle","","`<angle>`",386,null],[13,"Time","","`<time>`",386,null],[13,"Percentage","","`<percentage>`",386,null],[13,"Number","","`<number>`",386,null],[13,"Sum","","An expression of the form `x + y`",386,null],[13,"Sub","","An expression of the form `x - y`",386,null],[13,"Mul","","An expression of the form `x * y`",386,null],[13,"Div","","An expression of the form `x / y`",386,null],[4,"CalcUnit","","An expected unit we intend to parse within a `calc()` expression.",null,null],[13,"Number","","`<number>`",387,null],[13,"Integer","","`<integer>`",387,null],[13,"Length","","`<length>`",387,null],[13,"Percentage","","`<percentage>`",387,null],[13,"LengthOrPercentage","","`<length> | <percentage>`",387,null],[13,"Angle","","`<angle>`",387,null],[13,"Time","","`<time>`",387,null],[11,"clone","","",386,{"inputs":[{"name":"self"}],"output":{"name":"calcnode"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",387,{"inputs":[{"name":"self"}],"output":{"name":"calcunit"}}],[11,"eq","","",387,{"inputs":[{"name":"self"},{"name":"calcunit"}],"output":{"name":"bool"}}],[11,"clone","","",385,{"inputs":[{"name":"self"}],"output":{"name":"calclengthorpercentage"}}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",385,{"inputs":[],"output":{"name":"calclengthorpercentage"}}],[11,"eq","","",385,{"inputs":[{"name":"self"},{"name":"calclengthorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"self"},{"name":"calclengthorpercentage"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",385,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","https://drafts.csswg.org/css-values/#calc-serialize",385,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse_integer","","Convenience parsing function for integers.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_length_or_percentage","","Convenience parsing function for `<length> | <percentage>`.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowednumerictype"}],"output":{"name":"result"}}],[11,"parse_percentage","","Convenience parsing function for percentages.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_length","","Convenience parsing function for `<length>`.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowednumerictype"}],"output":{"name":"result"}}],[11,"parse_number","","Convenience parsing function for `<number>`.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_angle","","Convenience parsing function for `<angle>`.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_time","","Convenience parsing function for `<time>`.",386,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"color","style::values::specified","Specified color values.",null,null],[3,"RGBAColor","style::values::specified::color","Specified color value, but resolved to just RGBA for computed value with value from color property at the same context.",null,null],[12,"0","","",388,null],[3,"ColorPropertyValue","","Specified value for the \"color\" property, which resolves the `currentcolor` keyword to the parent color instead of self's color.",null,null],[12,"0","","",389,null],[4,"Color","","Specified color value",null,null],[13,"CurrentColor","","The 'currentColor' keyword",390,null],[13,"Numeric","","A specific RGBA color",390,null],[12,"parsed","style::values::specified::color::Color","Parsed RGBA color",390,null],[12,"authored","","Authored representation",390,null],[13,"Complex","style::values::specified::color","A complex color value from computed value",390,null],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",390,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",390,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","",390,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"parse","","",390,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",390,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"currentcolor","","Returns currentcolor value.",390,{"inputs":[],"output":{"name":"color"}}],[11,"transparent","","Returns transparent value.",390,{"inputs":[],"output":{"name":"color"}}],[11,"rgba","","Returns a numeric RGBA color value.",390,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"parse_quirky","","Parse a color, with quirks.",390,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"is_non_transparent","","Returns false if the color is completely transparent, and true otherwise.",390,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",390,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"computedcolor"}}],[11,"from_computed_value","","",390,{"inputs":[{"name":"computedcolor"}],"output":{"name":"self"}}],[11,"clone","","",388,{"inputs":[{"name":"self"}],"output":{"name":"rgbacolor"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",388,{"inputs":[{"name":"self"},{"name":"rgbacolor"}],"output":{"name":"bool"}}],[11,"ne","","",388,{"inputs":[{"name":"self"},{"name":"rgbacolor"}],"output":{"name":"bool"}}],[11,"to_css","","",388,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",388,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",388,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",388,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"rgba"}}],[11,"from_computed_value","","",388,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",388,{"inputs":[{"name":"color"}],"output":{"name":"rgbacolor"}}],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"colorpropertyvalue"}}],[11,"fmt","","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",389,{"inputs":[{"name":"self"},{"name":"colorpropertyvalue"}],"output":{"name":"bool"}}],[11,"ne","","",389,{"inputs":[{"name":"self"},{"name":"colorpropertyvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",389,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",389,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"rgba"}}],[11,"from_computed_value","","",389,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"parse","","",389,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"effects","style::values::specified","Specified types for CSS values related to effects.",null,null],[3,"Factor","style::values::specified::effects","A value for the `<factor>` parts in `Filter`.",null,null],[6,"BoxShadow","","A specified value for a single shadow of the `box-shadow` property.",null,null],[6,"Filter","","A specified value for a single `filter`.",null,null],[6,"SimpleShadow","","A specified value for the `drop-shadow()` filter.",null,null],[11,"clone","","",391,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",391,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"to_css","","",391,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",391,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_with_clamping_to_one","","Parse this factor but clamp to one if the value is over 100%.",391,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",391,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",391,null],[11,"from_computed_value","","",391,null],[11,"parse","","",392,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",392,null],[11,"from_computed_value","","",392,{"inputs":[{"name":"computedboxshadow"}],"output":{"name":"self"}}],[11,"parse","","",393,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",394,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",394,null],[11,"from_computed_value","","",394,null],[0,"flex","style::values::specified","Specified types for CSS values related to flexbox.",null,null],[6,"FlexBasis","style::values::specified::flex","A specified value for the `flex-basis` property.",null,null],[11,"parse","","",395,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"grid","style::values::specified","CSS handling for the computed value of grids",null,null],[5,"parse_flex","style::values::specified::grid","Parse a single flexible length.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_line_names","","Parse the grid line names into a vector of owned strings.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","style::values::generics::grid","",329,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",330,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",326,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",326,null],[11,"from_computed_value","","",326,null],[11,"parse","","",334,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_without_none","","Parses a `GridTemplateComponent<LengthOrPercentage>` except `none` keyword.",334,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"image","style::values::specified","CSS handling for the specified value of [`image`][image]s",null,null],[4,"LineDirection","style::values::specified::image","A specified gradient line direction.",null,null],[13,"Angle","","An angular direction.",396,null],[13,"Horizontal","","A horizontal direction.",396,null],[13,"Vertical","","A vertical direction.",396,null],[13,"Corner","","A direction towards a corner of a box.",396,null],[6,"ImageLayer","","A specified image layer.",null,null],[6,"Image","","Specified values for an image according to CSS-IMAGES. https://drafts.csswg.org/css-images/#image-values",null,null],[6,"Gradient","","Specified values for a CSS gradient. https://drafts.csswg.org/css-images/#gradients",null,null],[6,"GradientKind","","A specified gradient kind.",null,null],[6,"EndingShape","","A specified ending shape.",null,null],[6,"GradientItem","","A specified gradient item.",null,null],[6,"ColorStop","","A computed color stop.",null,null],[6,"MozImageRect","","Specified values for `moz-image-rect` -moz-image-rect(, top, right, bottom, left);",null,null],[11,"clone","","",396,{"inputs":[{"name":"self"}],"output":{"name":"linedirection"}}],[11,"fmt","","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",396,{"inputs":[{"name":"self"},{"name":"linedirection"}],"output":{"name":"bool"}}],[11,"ne","","",396,{"inputs":[{"name":"self"},{"name":"linedirection"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",396,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",397,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"for_cascade","","Creates an already specified image value from an already resolved URL for insertion in the cascade.",397,{"inputs":[{"name":"servourl"}],"output":{"name":"self"}}],[11,"parse","","",398,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"points_downwards","","",396,{"inputs":[{"name":"self"},{"name":"compatmode"}],"output":{"name":"bool"}}],[11,"to_css","","",396,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compatmode"}],"output":{"name":"result"}}],[11,"parse","","",399,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","style::values::generics::image","",337,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","style::values::specified::image","",400,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"length","style::values::specified","[Length values][length].",null,null],[3,"CharacterWidth","style::values::specified::length","HTML5 \"character width\", as defined in HTML5 § 14.5.4.",null,null],[12,"0","","",401,null],[4,"FontRelativeLength","","A font relative length.",null,null],[13,"Em","","A \"em\" value: https://drafts.csswg.org/css-values/#em",402,null],[13,"Ex","","A \"ex\" value: https://drafts.csswg.org/css-values/#ex",402,null],[13,"Ch","","A \"ch\" value: https://drafts.csswg.org/css-values/#ch",402,null],[13,"Rem","","A \"rem\" value: https://drafts.csswg.org/css-values/#rem",402,null],[4,"FontBaseSize","","A source to resolve font-relative units against",null,null],[13,"CurrentStyle","","Use the font-size of the current element",403,null],[13,"InheritedStyle","","Use the inherited font-size",403,null],[13,"Custom","","Use a custom base size",403,null],[4,"ViewportPercentageLength","","A viewport-relative length.",null,null],[13,"Vw","","A vw unit: https://drafts.csswg.org/css-values/#vw",404,null],[13,"Vh","","A vh unit: https://drafts.csswg.org/css-values/#vh",404,null],[13,"Vmin","","https://drafts.csswg.org/css-values/#vmin",404,null],[13,"Vmax","","https://drafts.csswg.org/css-values/#vmax",404,null],[4,"AbsoluteLength","","Represents an absolute length with its unit",null,null],[13,"Px","","An absolute length in pixels (px)",405,null],[13,"In","","An absolute length in inches (in)",405,null],[13,"Cm","","An absolute length in centimeters (cm)",405,null],[13,"Mm","","An absolute length in millimeters (mm)",405,null],[13,"Q","","An absolute length in quarter-millimeters (q)",405,null],[13,"Pt","","An absolute length in points (pt)",405,null],[13,"Pc","","An absolute length in pica (pc)",405,null],[4,"NoCalcLength","","A `<length>` without taking `calc` expressions into account",null,null],[13,"Absolute","","An absolute length",406,null],[13,"FontRelative","","A font-relative length:",406,null],[13,"ViewportPercentage","","A viewport-relative length.",406,null],[13,"ServoCharacterWidth","","HTML5 \"character width\", as defined in HTML5 § 14.5.4.",406,null],[4,"Length","","An extension to `NoCalcLength` to parse `calc` expressions. This is commonly used for the `<length>` values.",null,null],[13,"NoCalc","","The internal length type that cannot parse `calc`",407,null],[13,"Calc","","A calc expression.",407,null],[4,"LengthOrPercentage","","A length or a percentage value.",null,null],[13,"Length","","",408,null],[13,"Percentage","","",408,null],[13,"Calc","","",408,null],[4,"LengthOrPercentageOrAuto","","Either a `<length>`, a `<percentage>`, or the `auto` keyword.",null,null],[13,"Length","","",409,null],[13,"Percentage","","",409,null],[13,"Auto","","",409,null],[13,"Calc","","",409,null],[4,"LengthOrPercentageOrNone","","Either a `<length>`, a `<percentage>`, or the `none` keyword.",null,null],[13,"Length","","",410,null],[13,"Percentage","","",410,null],[13,"Calc","","",410,null],[13,"None","","",410,null],[4,"MozLength","","A value suitable for a `min-width` or `min-height` property. Unlike `max-width` or `max-height` properties, a MozLength can be `auto`, and cannot be `none`.",null,null],[13,"LengthOrPercentageOrAuto","","",411,null],[13,"ExtremumLength","","",411,null],[4,"MaxLength","","A value suitable for a `max-width` or `max-height` property.",null,null],[13,"LengthOrPercentageOrNone","","",412,null],[13,"ExtremumLength","","",412,null],[5,"au_to_int_px","","Same as Gecko's AppUnitsToIntCSSPixels",null,{"inputs":[{"name":"f32"}],"output":{"name":"i32"}}],[6,"NonNegativeLength","","A wrapper of Length, whose value must be >= 0.",null,null],[6,"NonNegativeLengthOrNormal","","Either a NonNegativeLength or the `normal` keyword.",null,null],[6,"NonNegativeLengthOrAuto","","Either a NonNegativeLength or the `auto` keyword.",null,null],[6,"NonNegativeLengthOrNumber","","Either a NonNegativeLength or a NonNegativeNumber value.",null,null],[6,"NonNegativeLengthOrPercentage","","A wrapper of LengthOrPercentage, whose value must be >= 0.",null,null],[6,"LengthOrNone","","Either a `<length>` or the `none` keyword.",null,null],[6,"LengthOrNormal","","Either a `<length>` or the `normal` keyword.",null,null],[6,"LengthOrAuto","","Either a `<length>` or the `auto` keyword.",null,null],[6,"LengthOrNumber","","Either a `<length>` or a `<number>`.",null,null],[17,"AU_PER_PX","","Number of app units per pixel",null,null],[17,"AU_PER_IN","","Number of app units per inch",null,null],[17,"AU_PER_CM","","Number of app units per centimeter",null,null],[17,"AU_PER_MM","","Number of app units per millimeter",null,null],[17,"AU_PER_Q","","Number of app units per quarter",null,null],[17,"AU_PER_PT","","Number of app units per point",null,null],[17,"AU_PER_PC","","Number of app units per pica",null,null],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"fontrelativelength"}}],[11,"fmt","","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",402,{"inputs":[{"name":"self"},{"name":"fontrelativelength"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"self"},{"name":"fontrelativelength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",402,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",402,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",403,{"inputs":[{"name":"self"}],"output":{"name":"fontbasesize"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",403,{"inputs":[{"name":"self"},{"name":"fontbasesize"}],"output":{"name":"bool"}}],[11,"ne","","",403,{"inputs":[{"name":"self"},{"name":"fontbasesize"}],"output":{"name":"bool"}}],[11,"resolve","","Calculate the actual size for a given context",403,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"au"}}],[11,"to_computed_value","","Computes the font-relative length.",402,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontbasesize"}],"output":{"name":"csspixellength"}}],[11,"clone","","",404,{"inputs":[{"name":"self"}],"output":{"name":"viewportpercentagelength"}}],[11,"fmt","","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",404,{"inputs":[{"name":"self"},{"name":"viewportpercentagelength"}],"output":{"name":"bool"}}],[11,"ne","","",404,{"inputs":[{"name":"self"},{"name":"viewportpercentagelength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",404,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",404,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","Computes the given viewport-relative length for the given viewport size.",404,{"inputs":[{"name":"self"},{"name":"size2d"}],"output":{"name":"csspixellength"}}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"characterwidth"}}],[11,"fmt","","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",401,{"inputs":[{"name":"self"},{"name":"characterwidth"}],"output":{"name":"bool"}}],[11,"ne","","",401,{"inputs":[{"name":"self"},{"name":"characterwidth"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",401,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_computed_value","","Computes the given character width.",401,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"csspixellength"}}],[11,"clone","","",405,{"inputs":[{"name":"self"}],"output":{"name":"absolutelength"}}],[11,"fmt","","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",405,{"inputs":[{"name":"self"},{"name":"absolutelength"}],"output":{"name":"bool"}}],[11,"ne","","",405,{"inputs":[{"name":"self"},{"name":"absolutelength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",405,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_px","","Convert this into a pixel value.",405,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"to_computed_value","","",405,null],[11,"from_computed_value","","",405,null],[11,"to_css","","",405,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"mul","","",405,{"inputs":[{"name":"self"},{"name":"cssfloat"}],"output":{"name":"absolutelength"}}],[11,"add","","",405,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",406,{"inputs":[{"name":"self"}],"output":{"name":"nocalclength"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",406,{"inputs":[{"name":"self"},{"name":"nocalclength"}],"output":{"name":"bool"}}],[11,"ne","","",406,{"inputs":[{"name":"self"},{"name":"nocalclength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",406,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",406,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"mul","","",406,{"inputs":[{"name":"self"},{"name":"cssfloat"}],"output":{"name":"nocalclength"}}],[11,"parse_dimension","","Parse a given absolute or relative dimension.",406,{"inputs":[{"name":"parsercontext"},{"name":"cssfloat"},{"name":"str"}],"output":{"name":"result"}}],[11,"zero","","Returns a `zero` length.",406,{"inputs":[],"output":{"name":"nocalclength"}}],[11,"is_zero","","Checks whether the length value is zero.",406,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"medium","","Returns a `medium` length.",406,{"inputs":[],"output":{"name":"nocalclength"}}],[11,"from_px","","Get an absolute length from a px value.",406,{"inputs":[{"name":"cssfloat"}],"output":{"name":"nocalclength"}}],[11,"heap_size_of_children","","",407,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"fmt","","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",407,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"ne","","",407,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"to_css","","",407,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",407,{"inputs":[{"name":"nocalclength"}],"output":{"name":"self"}}],[11,"mul","","",407,{"inputs":[{"name":"self"},{"name":"cssfloat"}],"output":{"name":"length"}}],[11,"mul","","",402,{"inputs":[{"name":"self"},{"name":"cssfloat"}],"output":{"name":"fontrelativelength"}}],[11,"mul","","",404,{"inputs":[{"name":"self"},{"name":"cssfloat"}],"output":{"name":"viewportpercentagelength"}}],[11,"zero","","Returns a `zero` length.",407,{"inputs":[],"output":{"name":"length"}}],[11,"parse_dimension","","Parse a given absolute or relative dimension.",407,{"inputs":[{"name":"parsercontext"},{"name":"cssfloat"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parse a non-negative length",407,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_non_negative_quirky","","Parse a non-negative length, allowing quirks.",407,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"from_px","","Get an absolute length from a px value.",407,{"inputs":[{"name":"cssfloat"}],"output":{"name":"length"}}],[11,"take","","Extract inner length without a clone, replacing it with a 0 Au",407,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse","","",407,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a length, with quirks.",407,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse_non_negative_length","style::values","Parse a non-negative length",237,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from","style::values::specified::length","",413,{"inputs":[{"name":"nocalclength"}],"output":{"name":"self"}}],[11,"from","","",413,{"inputs":[{"name":"length"}],"output":{"name":"self"}}],[11,"parse","style::values","",237,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"zero","style::values::specified::length","Returns a `zero` length.",413,{"inputs":[],"output":{"name":"self"}}],[11,"from_px","","Get an absolute length from a px value.",413,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",408,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",408,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentage"}}],[11,"fmt","","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",408,{"inputs":[{"name":"self"},{"name":"lengthorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",408,{"inputs":[{"name":"self"},{"name":"lengthorpercentage"}],"output":{"name":"bool"}}],[11,"to_css","","",408,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",408,{"inputs":[{"name":"length"}],"output":{"name":"lengthorpercentage"}}],[11,"from","","",408,{"inputs":[{"name":"nocalclength"}],"output":{"name":"self"}}],[11,"from","","",408,{"inputs":[{"name":"percentage"}],"output":{"name":"self"}}],[11,"from","","",408,{"inputs":[{"name":"percentage"}],"output":{"name":"self"}}],[11,"zero","","Returns a `zero` length.",408,{"inputs":[],"output":{"name":"lengthorpercentage"}}],[11,"parse_non_negative","","Parse a non-negative length.",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_non_negative_quirky","","Parse a non-negative length, with quirks.",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse_numbers_are_pixels","","Parse a length, treating dimensionless numbers as pixels",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_numbers_are_pixels_non_negative","","Parse a non-negative length, treating dimensionless numbers as pixels",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"take","","Extract value from ref without a clone, replacing it with a 0 Au",408,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse","","",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a length or a percentage, allowing the unitless length quirk. https://quirks.spec.whatwg.org/#the-unitless-length-quirk",408,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",409,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"fmt","","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",409,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"ne","","",409,{"inputs":[{"name":"self"},{"name":"lengthorpercentageorauto"}],"output":{"name":"bool"}}],[11,"to_css","","",409,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",409,{"inputs":[{"name":"nocalclength"}],"output":{"name":"self"}}],[11,"from","","",409,{"inputs":[{"name":"percentage"}],"output":{"name":"self"}}],[11,"parse_non_negative","","Parse a non-negative length, percentage, or auto.",409,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_non_negative_quirky","","Parse a non-negative length, percentage, or auto.",409,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"auto","","Returns the `auto` value.",409,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","Returns a value representing a `0` length.",409,{"inputs":[],"output":{"name":"self"}}],[11,"zero_percent","","Returns a value representing `0%`.",409,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",409,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses, with quirks.",409,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",410,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageornone"}}],[11,"fmt","","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",410,{"inputs":[{"name":"self"},{"name":"lengthorpercentageornone"}],"output":{"name":"bool"}}],[11,"ne","","",410,{"inputs":[{"name":"self"},{"name":"lengthorpercentageornone"}],"output":{"name":"bool"}}],[11,"to_css","","",410,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parse a non-negative LengthOrPercentageOrNone.",410,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_non_negative_quirky","","Parse a non-negative LengthOrPercentageOrNone, with quirks.",410,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse","","",410,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from","","",414,{"inputs":[{"name":"nocalclength"}],"output":{"name":"self"}}],[11,"parse","","",414,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"zero","","Returns a `zero` length.",414,{"inputs":[],"output":{"name":"self"}}],[11,"parse_quirky","","Parses a length or a percentage, allowing the unitless length quirk. https://quirks.spec.whatwg.org/#the-unitless-length-quirk",414,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parse a non-negative LengthOrNumber.",415,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"zero","","Returns `0`.",415,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",411,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",411,{"inputs":[{"name":"self"}],"output":{"name":"mozlength"}}],[11,"fmt","","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",411,{"inputs":[{"name":"self"},{"name":"mozlength"}],"output":{"name":"bool"}}],[11,"ne","","",411,{"inputs":[{"name":"self"},{"name":"mozlength"}],"output":{"name":"bool"}}],[11,"to_css","","",411,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",411,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses, with quirks.",411,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",412,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",412,{"inputs":[{"name":"self"}],"output":{"name":"maxlength"}}],[11,"fmt","","",412,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",412,{"inputs":[{"name":"self"},{"name":"maxlength"}],"output":{"name":"bool"}}],[11,"ne","","",412,{"inputs":[{"name":"self"},{"name":"maxlength"}],"output":{"name":"bool"}}],[11,"to_css","","",412,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",412,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses, with quirks.",412,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[0,"percentage","style::values::specified","Specified percentages.",null,null],[3,"Percentage","style::values::specified::percentage","A percentage value.",null,null],[11,"clone","","",416,{"inputs":[{"name":"self"}],"output":{"name":"percentage"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",416,{"inputs":[],"output":{"name":"percentage"}}],[11,"eq","","",416,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"ne","","",416,{"inputs":[{"name":"self"},{"name":"percentage"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",416,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",416,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a percentage from a numeric value.",416,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"zero","","`0%`",416,{"inputs":[],"output":{"name":"self"}}],[11,"hundred","","`100%`",416,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Gets the underlying value for this float.",416,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"is_calc","","Returns whether this percentage is a `calc()` value.",416,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reverse","","Reverses this percentage, preserving calc-ness.",416,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_with_clamping_mode","","Parses a specific kind of percentage.",416,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowednumerictype"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parses a percentage token, but rejects it if it's negative.",416,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clamp_to_hundred","","Clamp to 100% if the value is over 100%.",416,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse","","",416,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",416,null],[11,"from_computed_value","","",416,null],[0,"position","style::values::specified","CSS handling for the specified value of [`position`][position]s",null,null],[4,"PositionComponent","style::values::specified::position","The specified value of a component of a CSS `<position>`.",null,null],[13,"Center","","`center`",417,null],[13,"Length","","`<lop>`",417,null],[13,"Side","","`<side> <lop>?`",417,null],[4,"X","","",null,null],[13,"Left","","",418,null],[13,"Right","","",418,null],[4,"Y","","",null,null],[13,"Top","","",419,null],[13,"Bottom","","",419,null],[6,"Position","","The specified value of a CSS `<position>`",null,null],[6,"HorizontalPosition","","The specified value of a horizontal position.",null,null],[6,"VerticalPosition","","The specified value of a vertical position.",null,null],[6,"LegacyPosition","","The specified value of a legacy CSS `<position>` Modern position syntax supports 3 and 4-value syntax. That means: If three or four values are given, then each  or  represents an offset and must be preceded by a keyword, which specifies from which edge the offset is given. For example, `bottom 10px right 20px` represents a `10px` vertical offset up from the bottom edge and a `20px` horizontal offset leftward from the right edge. If three values are given, the missing offset is assumed to be zero. But for some historical reasons we need to keep CSS Level 2 syntax which only supports up to 2-value. This type represents this 2-value syntax.",null,null],[6,"LegacyHPosition","","The specified value of a horizontal position.",null,null],[6,"LegacyVPosition","","The specified value of a vertical position.",null,null],[8,"Side","","Represents a side, either horizontal or vertical, of a CSS position.",null,null],[10,"start","","Returns the start side.",420,{"inputs":[],"output":{"name":"self"}}],[10,"is_start","","Returns whether this side is the start side.",420,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",417,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",417,{"inputs":[{"name":"self"}],"output":{"name":"positioncomponent"}}],[11,"fmt","","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",417,{"inputs":[{"name":"self"},{"name":"positioncomponent"}],"output":{"name":"bool"}}],[11,"ne","","",417,{"inputs":[{"name":"self"},{"name":"positioncomponent"}],"output":{"name":"bool"}}],[11,"to_css","","",417,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",418,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",418,null],[11,"eq","","",418,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",418,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",418,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",418,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",418,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",418,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",418,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",418,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",419,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",419,null],[11,"eq","","",419,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",419,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",419,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",419,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",419,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",419,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",419,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",419,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"parse","","",421,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a `<position>`, with quirks.",421,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"center","","`center center`",421,{"inputs":[],"output":{"name":"self"}}],[11,"to_css","","",421,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",417,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a component of a CSS position, with quirks.",417,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"zero","","`0%`",417,{"inputs":[],"output":{"name":"self"}}],[11,"to_computed_value","","",417,null],[11,"from_computed_value","","",417,null],[11,"initial_specified_value","","The initial specified value of a position component, i.e. the start side.",417,{"inputs":[],"output":{"name":"self"}}],[11,"start","","",418,{"inputs":[],"output":{"name":"self"}}],[11,"is_start","","",418,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","",419,{"inputs":[],"output":{"name":"self"}}],[11,"is_start","","",419,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","",422,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a `<position>`, with quirks.",422,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"center","","`center center`",422,{"inputs":[],"output":{"name":"self"}}],[11,"to_css","","",422,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"rect","style::values::specified","Specified types for CSS borders.",null,null],[6,"LengthOrNumberRect","style::values::specified::rect","A specified rectangle made of four `<length-or-number>` values.",null,null],[11,"parse_non_negative","","Parses a `LengthOrNumberRect`, rejecting negative values.",423,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"svg","style::values::specified","Specified types for SVG properties.",null,null],[6,"SVGPaint","style::values::specified::svg","Specified SVG Paint value",null,null],[6,"SVGPaintKind","","Specified SVG Paint Kind value",null,null],[6,"SvgLengthOrPercentageOrNumber","","A value of  |  |  for stroke-dashoffset. https://www.w3.org/TR/SVG11/painting.html#StrokeProperties",null,null],[6,"SVGLength",""," |  |  | context-value",null,null],[6,"NonNegativeSvgLengthOrPercentageOrNumber","","A value of  |  |  for stroke-width/stroke-dasharray. https://www.w3.org/TR/SVG11/painting.html#StrokeProperties",null,null],[6,"SVGWidth","","A non-negative version of SVGLength.",null,null],[6,"SVGStrokeDashArray","","[  |  |  ]# | context-value",null,null],[6,"SVGOpacity","","<opacity-value> | context-fill-opacity | context-stroke-opacity",null,null],[11,"parse","","",424,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from","","",424,{"inputs":[{"name":"svglengthorpercentageornumber"}],"output":{"name":"self"}}],[11,"parse","","",425,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from","","",425,{"inputs":[{"name":"nonnegativesvglengthorpercentageornumber"}],"output":{"name":"self"}}],[11,"parse","","",426,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",427,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"text","style::values::specified","Specified types for text properties.",null,null],[6,"InitialLetter","style::values::specified::text","A specified type for the `initial-letter` property.",null,null],[6,"LetterSpacing","","A specified value for the `letter-spacing` property.",null,null],[6,"WordSpacing","","A specified value for the `word-spacing` property.",null,null],[6,"LineHeight","","A specified value for the `line-height` property.",null,null],[11,"parse","","",428,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",429,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",430,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",431,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",431,null],[11,"from_computed_value","","",431,null],[0,"time","style::values::specified","Specified time values.",null,null],[3,"Time","style::values::specified::time","A time value according to CSS-VALUES § 6.2.",null,null],[4,"TimeUnit","","A time unit.",null,null],[13,"Second","","`s`",432,null],[13,"Millisecond","","`ms`",432,null],[11,"clone","","",433,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",433,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",433,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",433,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",432,{"inputs":[{"name":"self"}],"output":{"name":"timeunit"}}],[11,"fmt","","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",432,{"inputs":[{"name":"self"},{"name":"timeunit"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",432,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_seconds","","Returns a time value that represents `seconds` seconds.",433,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"zero","","Returns `0s`.",433,{"inputs":[],"output":{"name":"self"}}],[11,"seconds","","Returns the time in fractional seconds.",433,{"inputs":[{"name":"self"}],"output":{"name":"cssfloat"}}],[11,"parse_dimension","","Parses a time according to CSS-VALUES § 6.2.",433,{"inputs":[{"name":"cssfloat"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_calc","","Returns a `Time` value from a CSS `calc()` expression.",433,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"parse_non_negative","","Parses a non-negative time value.",433,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",433,null],[11,"from_computed_value","","",433,null],[11,"parse","","",433,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",433,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"transform","style::values::specified","Specified types for CSS values that are related to transformations.",null,null],[4,"OriginComponent","style::values::specified::transform","The specified value of a component of a CSS `<transform-origin>`.",null,null],[13,"Center","","`center`",434,null],[13,"Length","","`<lop>`",434,null],[13,"Side","","`<side>`",434,null],[6,"TransformOrigin","","The specified value of a CSS `<transform-origin>`",null,null],[6,"TimingFunction","","A specified timing function.",null,null],[11,"heap_size_of_children","","",434,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",434,{"inputs":[{"name":"self"}],"output":{"name":"origincomponent"}}],[11,"fmt","","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",434,{"inputs":[{"name":"self"},{"name":"origincomponent"}],"output":{"name":"bool"}}],[11,"ne","","",434,{"inputs":[{"name":"self"},{"name":"origincomponent"}],"output":{"name":"bool"}}],[11,"to_css","","",434,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",435,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",434,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",434,null],[11,"from_computed_value","","",434,null],[11,"zero","","`0%`",434,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",436,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",436,null],[11,"from_computed_value","","",436,null],[0,"url","style::values::specified","Common handling for the specified value CSS url() values.",null,null],[11,"parse","style::servo::url","",165,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[6,"NonNegativeNumber","style::values::specified","A Number which is >= 0.0.",null,null],[6,"GreaterThanOrEqualToOneNumber","","A Number which is >= 1.0.",null,null],[6,"IntegerOrAuto",""," | auto",null,null],[6,"PositiveInteger","","A wrapper of Integer, with value >= 1.",null,null],[6,"PositiveIntegerOrAuto","","PositiveInteger | auto",null,null],[6,"UrlOrNone","","",null,null],[6,"TrackBreadth","","The specified value of a grid `<track-breadth>`",null,null],[6,"TrackSize","","The specified value of a grid `<track-size>`",null,null],[6,"TrackList","","The specified value of a grid `<track-list>` (could also be `<auto-track-list>` or `<explicit-track-list>`)",null,null],[6,"GridLine","","The specified value of a `<grid-line>`.",null,null],[6,"GridTemplateComponent","","`<grid-template-rows> | <grid-template-columns>`",null,null],[6,"LengthOrPercentageOrNumber",""," |  | ",null,null],[6,"NonNegativeLengthOrPercentageOrNumber","","NonNegativeLengthOrPercentage | NonNegativeNumber",null,null],[6,"ClipRectOrAuto","","rect(...) | auto",null,null],[6,"ColorOrAuto",""," | auto",null,null],[6,"NamespaceId","","A namespace ID (used by gecko only)",null,null],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"borderstyle"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",367,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"ordering"}}],[11,"eq","","",367,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",367,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",367,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",367,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",367,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"none_or_hidden","","Whether this border style is either none or hidden.",367,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",437,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"option"}}],[11,"lt","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"le","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"gt","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ge","","",437,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",437,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",437,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"new","","Returns a new number with the value `val`.",437,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"get","","Returns the numeric value, clamped if needed.",437,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"parse_non_negative","","",437,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_at_least_one","","",437,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clamp_to_one","","Clamp to 1.0 if the value is over 1.0.",437,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_computed_value","","",437,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"cssfloat"}}],[11,"from_computed_value","","",437,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"to_css","","",437,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",438,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"new","","Returns a new non-negative number with the value `val`.",438,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"parse","","",439,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",368,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",368,{"inputs":[{"name":"self"}],"output":{"name":"numberorpercentage"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",368,{"inputs":[{"name":"self"},{"name":"numberorpercentage"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"self"},{"name":"numberorpercentage"}],"output":{"name":"bool"}}],[11,"to_css","","",368,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parse a non-negative number or percentage.",368,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",368,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",440,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",440,{"inputs":[{"name":"self"}],"output":{"name":"opacity"}}],[11,"fmt","","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"ne","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"option"}}],[11,"lt","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"le","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"gt","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"ge","","",440,{"inputs":[{"name":"self"},{"name":"opacity"}],"output":{"name":"bool"}}],[11,"to_css","","",440,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",440,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",440,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"cssfloat"}}],[11,"from_computed_value","","",440,{"inputs":[{"name":"cssfloat"}],"output":{"name":"self"}}],[11,"clone","","",441,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"fmt","","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"option"}}],[11,"lt","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"le","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"gt","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"ge","","",441,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",441,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Trivially constructs a new `Integer` value.",441,{"inputs":[{"name":"cssinteger"}],"output":{"name":"self"}}],[11,"value","","Returns the integer value associated with this value.",441,{"inputs":[{"name":"self"}],"output":{"name":"cssinteger"}}],[11,"parse","","",441,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_with_minimum","","Parse an integer value which is at least `min`.",441,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"i32"}],"output":{"name":"result"}}],[11,"parse_non_negative","","Parse a non-negative integer.",441,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_positive","","Parse a positive integer (>= 1).",441,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",441,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"i32"}}],[11,"from_computed_value","","",441,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"to_css","","",441,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse_positive","","",442,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse","","",443,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",365,{"inputs":[{"name":"self"}],"output":{"name":"cliprect"}}],[11,"fmt","","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",365,{"inputs":[{"name":"self"},{"name":"cliprect"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"self"},{"name":"cliprect"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",365,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",365,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",365,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"cliprect"}}],[11,"from_computed_value","","",365,{"inputs":[{"name":"cliprect"}],"output":{"name":"self"}}],[11,"parse","","",365,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a rect(, , , ), allowing quirks.",365,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"parse_quirky","","Parses a ClipRect or Auto, allowing quirks.",444,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"allowquirks"}}],[11,"eq","","",369,{"inputs":[{"name":"self"},{"name":"allowquirks"}],"output":{"name":"bool"}}],[11,"allowed","","Returns `true` if quirks are allowed in this context.",369,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",366,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",366,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",366,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",366,null],[11,"from_computed_value","","",366,null],[11,"parse","","",366,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_function","","Parse contents of attr() assuming we have already parsed `attr` and are within a parse_nested_block()",366,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",366,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[6,"CSSFloat","style::values","A CSS float value.",null,null],[6,"CSSInteger","","A CSS integer value.",null,null],[17,"FONT_MEDIUM_PX","","The default font size.",null,null],[11,"heap_size_of_children","","",445,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",445,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",445,{"inputs":[{"name":"self"}],"output":{"name":"none_"}}],[11,"compute_squared_distance","","",445,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",445,{"inputs":[{"name":"self"},{"name":"none_"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",445,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",445,null],[11,"from_computed_value","","",445,null],[11,"to_css","","",445,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",445,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",445,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",446,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",446,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",446,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"compute_squared_distance","","",446,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",446,{"inputs":[{"name":"self"},{"name":"auto"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",446,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",446,null],[11,"from_computed_value","","",446,null],[11,"to_css","","",446,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",446,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",446,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",447,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",447,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",447,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"compute_squared_distance","","",447,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",447,{"inputs":[{"name":"self"},{"name":"normal"}],"output":{"name":"bool"}}],[11,"to_animated_zero","","",447,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",447,null],[11,"from_computed_value","","",447,null],[11,"to_css","","",447,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",447,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",447,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",448,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",448,{"inputs":[{"name":"self"}],"output":{"name":"impossible"}}],[11,"fmt","","",448,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",448,{"inputs":[{"name":"self"},{"name":"impossible"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",448,null],[11,"from_computed_value","","",448,null],[11,"to_css","","",448,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",448,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",237,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",237,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"compute_squared_distance","","",237,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"to_animated_value","","",237,null],[11,"from_animated_value","","",237,null],[11,"to_animated_zero","","",237,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_computed_value","","",237,null],[11,"from_computed_value","","",237,null],[11,"to_css","","",237,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",237,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"customident"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",236,null],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"customident"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"customident"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",236,null],[11,"from_computed_value","","",236,null],[11,"heap_size_of_children","","",236,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ident","","Parse an already-tokenizer identifier",236,null],[11,"to_css","","",236,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"keyframesname"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_computed_value","","",238,null],[11,"from_computed_value","","",238,null],[11,"heap_size_of_children","","",238,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ident","","https://drafts.csswg.org/css-animations/#dom-csskeyframesrule-name",238,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_atom","","The name as an Atom",238,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",238,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",238,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",238,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"extremumlength"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",239,null],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"extremumlength"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",239,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",239,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",239,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",239,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"properties","style","The CSS properties supported by the style system. Generated from the properties.mako.rs template by build.rs",null,null],[3,"BuilderArc","style::properties","",null,null],[3,"NonCustomPropertyId","","A longhand or shorthand porperty",null,null],[3,"NonCustomPropertyIdSet","","A set of all properties",null,null],[3,"LonghandIdSet","","A set of longhand properties",null,null],[3,"PropertyDeclarationIdSet","","A specialized set of PropertyDeclarationId",null,null],[3,"PropertyFlags","","A set of flags for properties.",null,null],[3,"UnparsedValue","","An unparsed property value that contains `var()` functions.",null,null],[3,"PropertyParserContext","","Parsing Context for PropertyId.",null,null],[12,"stylesheet_origin","","The Origin of the stylesheet, whether it's a user, author or user-agent stylesheet.",449,null],[12,"rule_type","","The current rule type, if any.",449,null],[3,"SourcePropertyDeclaration","","A stack-allocated vector of `PropertyDeclaration` large enough to parse one CSS `key: value` declaration. (Shorthands expand to multiple `PropertyDeclaration`s.)",null,null],[3,"SourcePropertyDeclarationDrain","","Return type of SourcePropertyDeclaration::drain",null,null],[3,"TransitionDurationIter","","An iterator over the values of the transition-duration properties.",null,null],[3,"TransitionTimingFunctionIter","","An iterator over the values of the transition-timing-function properties.",null,null],[3,"TransitionPropertyIter","","An iterator over the values of the transition-property properties.",null,null],[3,"TransitionDelayIter","","An iterator over the values of the transition-delay properties.",null,null],[3,"AnimationNameIter","","An iterator over the values of the animation-name properties.",null,null],[3,"AnimationDurationIter","","An iterator over the values of the animation-duration properties.",null,null],[3,"AnimationTimingFunctionIter","","An iterator over the values of the animation-timing-function properties.",null,null],[3,"AnimationIterationCountIter","","An iterator over the values of the animation-iteration-count properties.",null,null],[3,"AnimationDirectionIter","","An iterator over the values of the animation-direction properties.",null,null],[3,"AnimationPlayStateIter","","An iterator over the values of the animation-play-state properties.",null,null],[3,"AnimationFillModeIter","","An iterator over the values of the animation-fill-mode properties.",null,null],[3,"AnimationDelayIter","","An iterator over the values of the animation-delay properties.",null,null],[3,"ComputedValuesInner","","Actual data of ComputedValues, to match up with Gecko",null,null],[12,"writing_mode","","The writing mode of this computed values struct.",450,null],[12,"font_computation_data","","The keyword behind the current font-size property, if any",450,null],[12,"flags","","A set of flags we use to store misc information regarding this style.",450,null],[12,"rules","","The rule node representing the ordered list of rules matched for this node.  Can be None for default values and text nodes.  This is essentially an optimization to avoid referencing the root rule node.",450,null],[3,"ComputedValues","","The struct that Servo uses to represent computed values.",null,null],[3,"StyleBuilder","","A type used to compute a struct with minimal overhead.",null,null],[12,"device","","The device we're using to compute style.",451,null],[12,"rules","","The rule node representing the ordered list of rules matched for this node.",451,null],[12,"pseudo","","The pseudo-element this style will represent.",451,null],[12,"writing_mode","","The writing mode flags.",451,null],[12,"font_size_keyword","","The keyword behind the current font-size property, if any.",451,null],[12,"flags","","Flags for the computed value.",451,null],[3,"INITIAL_SERVO_VALUES","","",null,null],[3,"CascadeFlags","","A set of flags to tweak the behavior of the `cascade` function.",null,null],[4,"CSSWideKeyword","","An enum to represent a CSS Wide keyword.",null,null],[13,"Initial","","The `initial` keyword.",452,null],[13,"Inherit","","The `inherit` keyword.",452,null],[13,"Unset","","The `unset` keyword.",452,null],[4,"LonghandId","","An identifier for a given longhand property.",null,null],[13,"BackgroundColor","","background-color",453,null],[13,"BackgroundImage","","background-image",453,null],[13,"BackgroundPositionX","","background-position-x",453,null],[13,"BackgroundPositionY","","background-position-y",453,null],[13,"BackgroundRepeat","","background-repeat",453,null],[13,"BackgroundAttachment","","background-attachment",453,null],[13,"BackgroundClip","","background-clip",453,null],[13,"BackgroundOrigin","","background-origin",453,null],[13,"BackgroundSize","","background-size",453,null],[13,"BorderTopColor","","border-top-color",453,null],[13,"BorderTopStyle","","border-top-style",453,null],[13,"BorderTopWidth","","border-top-width",453,null],[13,"BorderLeftColor","","border-left-color",453,null],[13,"BorderLeftStyle","","border-left-style",453,null],[13,"BorderLeftWidth","","border-left-width",453,null],[13,"BorderBottomColor","","border-bottom-color",453,null],[13,"BorderBottomStyle","","border-bottom-style",453,null],[13,"BorderBottomWidth","","border-bottom-width",453,null],[13,"BorderRightColor","","border-right-color",453,null],[13,"BorderRightStyle","","border-right-style",453,null],[13,"BorderRightWidth","","border-right-width",453,null],[13,"BorderBlockStartColor","","border-block-start-color",453,null],[13,"BorderBlockStartStyle","","border-block-start-style",453,null],[13,"BorderBlockStartWidth","","border-block-start-width",453,null],[13,"BorderBlockEndColor","","border-block-end-color",453,null],[13,"BorderBlockEndStyle","","border-block-end-style",453,null],[13,"BorderBlockEndWidth","","border-block-end-width",453,null],[13,"BorderInlineStartColor","","border-inline-start-color",453,null],[13,"BorderInlineStartStyle","","border-inline-start-style",453,null],[13,"BorderInlineStartWidth","","border-inline-start-width",453,null],[13,"BorderInlineEndColor","","border-inline-end-color",453,null],[13,"BorderInlineEndStyle","","border-inline-end-style",453,null],[13,"BorderInlineEndWidth","","border-inline-end-width",453,null],[13,"BorderTopLeftRadius","","border-top-left-radius",453,null],[13,"BorderTopRightRadius","","border-top-right-radius",453,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",453,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",453,null],[13,"BorderImageSource","","border-image-source",453,null],[13,"BorderImageOutset","","border-image-outset",453,null],[13,"BorderImageRepeat","","border-image-repeat",453,null],[13,"BorderImageWidth","","border-image-width",453,null],[13,"BorderImageSlice","","border-image-slice",453,null],[13,"Display","","display",453,null],[13,"Position","","position",453,null],[13,"Float","","float",453,null],[13,"Clear","","clear",453,null],[13,"ServoDisplayForHypotheticalBox","","-servo-display-for-hypothetical-box",453,null],[13,"VerticalAlign","","vertical-align",453,null],[13,"ServoOverflowClipBox","","-servo-overflow-clip-box",453,null],[13,"OverflowX","","overflow-x",453,null],[13,"OverflowY","","overflow-y",453,null],[13,"TransitionDuration","","transition-duration",453,null],[13,"TransitionTimingFunction","","transition-timing-function",453,null],[13,"TransitionProperty","","transition-property",453,null],[13,"TransitionDelay","","transition-delay",453,null],[13,"AnimationName","","animation-name",453,null],[13,"AnimationDuration","","animation-duration",453,null],[13,"AnimationTimingFunction","","animation-timing-function",453,null],[13,"AnimationIterationCount","","animation-iteration-count",453,null],[13,"AnimationDirection","","animation-direction",453,null],[13,"AnimationPlayState","","animation-play-state",453,null],[13,"AnimationFillMode","","animation-fill-mode",453,null],[13,"AnimationDelay","","animation-delay",453,null],[13,"Transform","","transform",453,null],[13,"Perspective","","perspective",453,null],[13,"PerspectiveOrigin","","perspective-origin",453,null],[13,"BackfaceVisibility","","backface-visibility",453,null],[13,"TransformStyle","","transform-style",453,null],[13,"TransformOrigin","","transform-origin",453,null],[13,"Color","","color",453,null],[13,"ColumnWidth","","column-width",453,null],[13,"ColumnCount","","column-count",453,null],[13,"ColumnGap","","column-gap",453,null],[13,"Content","","content",453,null],[13,"CounterIncrement","","counter-increment",453,null],[13,"CounterReset","","counter-reset",453,null],[13,"Opacity","","opacity",453,null],[13,"BoxShadow","","box-shadow",453,null],[13,"Clip","","clip",453,null],[13,"Filter","","filter",453,null],[13,"MixBlendMode","","mix-blend-mode",453,null],[13,"FontFamily","","font-family",453,null],[13,"FontStyle","","font-style",453,null],[13,"FontVariantCaps","","font-variant-caps",453,null],[13,"FontWeight","","font-weight",453,null],[13,"FontSize","","font-size",453,null],[13,"FontStretch","","font-stretch",453,null],[13,"Visibility","","visibility",453,null],[13,"WritingMode","","writing-mode",453,null],[13,"Direction","","direction",453,null],[13,"ImageRendering","","image-rendering",453,null],[13,"BorderCollapse","","border-collapse",453,null],[13,"EmptyCells","","empty-cells",453,null],[13,"CaptionSide","","caption-side",453,null],[13,"BorderSpacing","","border-spacing",453,null],[13,"LineHeight","","line-height",453,null],[13,"TextTransform","","text-transform",453,null],[13,"TextIndent","","text-indent",453,null],[13,"OverflowWrap","","overflow-wrap",453,null],[13,"WordBreak","","word-break",453,null],[13,"TextJustify","","text-justify",453,null],[13,"TextAlign","","text-align",453,null],[13,"LetterSpacing","","letter-spacing",453,null],[13,"WordSpacing","","word-spacing",453,null],[13,"ServoTextDecorationsInEffect","","-servo-text-decorations-in-effect",453,null],[13,"WhiteSpace","","white-space",453,null],[13,"TextShadow","","text-shadow",453,null],[13,"TextRendering","","text-rendering",453,null],[13,"ListStylePosition","","list-style-position",453,null],[13,"ListStyleType","","list-style-type",453,null],[13,"ListStyleImage","","list-style-image",453,null],[13,"Quotes","","quotes",453,null],[13,"MarginTop","","margin-top",453,null],[13,"MarginLeft","","margin-left",453,null],[13,"MarginBottom","","margin-bottom",453,null],[13,"MarginRight","","margin-right",453,null],[13,"MarginBlockStart","","margin-block-start",453,null],[13,"MarginBlockEnd","","margin-block-end",453,null],[13,"MarginInlineStart","","margin-inline-start",453,null],[13,"MarginInlineEnd","","margin-inline-end",453,null],[13,"OutlineColor","","outline-color",453,null],[13,"OutlineStyle","","outline-style",453,null],[13,"OutlineWidth","","outline-width",453,null],[13,"OutlineOffset","","outline-offset",453,null],[13,"PaddingTop","","padding-top",453,null],[13,"PaddingLeft","","padding-left",453,null],[13,"PaddingBottom","","padding-bottom",453,null],[13,"PaddingRight","","padding-right",453,null],[13,"PaddingBlockStart","","padding-block-start",453,null],[13,"PaddingBlockEnd","","padding-block-end",453,null],[13,"PaddingInlineStart","","padding-inline-start",453,null],[13,"PaddingInlineEnd","","padding-inline-end",453,null],[13,"Cursor","","cursor",453,null],[13,"PointerEvents","","pointer-events",453,null],[13,"Top","","top",453,null],[13,"Left","","left",453,null],[13,"Bottom","","bottom",453,null],[13,"Right","","right",453,null],[13,"OffsetBlockStart","","offset-block-start",453,null],[13,"OffsetBlockEnd","","offset-block-end",453,null],[13,"OffsetInlineStart","","offset-inline-start",453,null],[13,"OffsetInlineEnd","","offset-inline-end",453,null],[13,"ZIndex","","z-index",453,null],[13,"FlexDirection","","flex-direction",453,null],[13,"FlexWrap","","flex-wrap",453,null],[13,"JustifyContent","","justify-content",453,null],[13,"AlignContent","","align-content",453,null],[13,"AlignItems","","align-items",453,null],[13,"FlexGrow","","flex-grow",453,null],[13,"FlexShrink","","flex-shrink",453,null],[13,"AlignSelf","","align-self",453,null],[13,"Order","","order",453,null],[13,"FlexBasis","","flex-basis",453,null],[13,"Width","","width",453,null],[13,"MinWidth","","min-width",453,null],[13,"MaxWidth","","max-width",453,null],[13,"Height","","height",453,null],[13,"MinHeight","","min-height",453,null],[13,"MaxHeight","","max-height",453,null],[13,"BlockSize","","block-size",453,null],[13,"MinBlockSize","","min-block-size",453,null],[13,"MaxBlockSize","","max-block-size",453,null],[13,"InlineSize","","inline-size",453,null],[13,"MinInlineSize","","min-inline-size",453,null],[13,"MaxInlineSize","","max-inline-size",453,null],[13,"BoxSizing","","box-sizing",453,null],[13,"TableLayout","","table-layout",453,null],[13,"TextOverflow","","text-overflow",453,null],[13,"UnicodeBidi","","unicode-bidi",453,null],[13,"TextDecorationLine","","text-decoration-line",453,null],[4,"ShorthandId","","An identifier for a given shorthand property.",null,null],[13,"Background","","background",454,null],[13,"BackgroundPosition","","background-position",454,null],[13,"BorderColor","","border-color",454,null],[13,"BorderStyle","","border-style",454,null],[13,"BorderWidth","","border-width",454,null],[13,"BorderTop","","border-top",454,null],[13,"BorderLeft","","border-left",454,null],[13,"BorderBottom","","border-bottom",454,null],[13,"BorderRight","","border-right",454,null],[13,"BorderBlockStart","","border-block-start",454,null],[13,"BorderBlockEnd","","border-block-end",454,null],[13,"BorderInlineStart","","border-inline-start",454,null],[13,"BorderInlineEnd","","border-inline-end",454,null],[13,"Border","","border",454,null],[13,"BorderRadius","","border-radius",454,null],[13,"BorderImage","","border-image",454,null],[13,"Overflow","","overflow",454,null],[13,"Transition","","transition",454,null],[13,"Animation","","animation",454,null],[13,"Columns","","columns",454,null],[13,"Font","","font",454,null],[13,"FontVariant","","font-variant",454,null],[13,"ListStyle","","list-style",454,null],[13,"Margin","","margin",454,null],[13,"Outline","","outline",454,null],[13,"Padding","","padding",454,null],[13,"FlexFlow","","flex-flow",454,null],[13,"Flex","","flex",454,null],[13,"TextDecoration","","text-decoration",454,null],[13,"All","","all",454,null],[4,"DeclaredValue","","Servo's representation of a declared value for a given `T`, which is the declared value for that property.",null,null],[13,"Value","","A known specified value from the stylesheet.",455,null],[13,"WithVariables","","An unparsed value that contains `var()` functions.",455,null],[13,"CSSWideKeyword","","An CSS-wide keyword.",455,null],[4,"DeclaredValueOwned","","A variant of DeclaredValue that owns its data. This separation exists so that PropertyDeclaration can avoid embedding a DeclaredValue (and its extra discriminant word) and synthesize dependent DeclaredValues for PropertyDeclaration instances as needed.",null,null],[13,"Value","","A known specified value from the stylesheet.",456,null],[13,"WithVariables","","An unparsed value that contains `var()` functions.",456,null],[13,"CSSWideKeyword","","An CSS-wide keyword.",456,null],[4,"PropertyDeclarationId","","An identifier for a given property declaration, which can be either a longhand or a custom property.",null,null],[13,"Longhand","","A longhand.",457,null],[13,"Custom","","A custom property declaration.",457,null],[4,"PropertyId","","Servo's representation of a CSS property, that is, either a longhand, a shorthand, or a custom property.",null,null],[13,"Longhand","","A longhand property.",458,null],[13,"Shorthand","","A shorthand property.",458,null],[13,"Custom","","A custom property.",458,null],[4,"PropertyDeclaration","","Servo's representation for a property declaration.",null,null],[13,"BackgroundColor","","background-color",459,null],[13,"BackgroundImage","","background-image",459,null],[13,"BackgroundPositionX","","background-position-x",459,null],[13,"BackgroundPositionY","","background-position-y",459,null],[13,"BackgroundRepeat","","background-repeat",459,null],[13,"BackgroundAttachment","","background-attachment",459,null],[13,"BackgroundClip","","background-clip",459,null],[13,"BackgroundOrigin","","background-origin",459,null],[13,"BackgroundSize","","background-size",459,null],[13,"BorderTopColor","","border-top-color",459,null],[13,"BorderTopStyle","","border-top-style",459,null],[13,"BorderTopWidth","","border-top-width",459,null],[13,"BorderLeftColor","","border-left-color",459,null],[13,"BorderLeftStyle","","border-left-style",459,null],[13,"BorderLeftWidth","","border-left-width",459,null],[13,"BorderBottomColor","","border-bottom-color",459,null],[13,"BorderBottomStyle","","border-bottom-style",459,null],[13,"BorderBottomWidth","","border-bottom-width",459,null],[13,"BorderRightColor","","border-right-color",459,null],[13,"BorderRightStyle","","border-right-style",459,null],[13,"BorderRightWidth","","border-right-width",459,null],[13,"BorderBlockStartColor","","border-block-start-color",459,null],[13,"BorderBlockStartStyle","","border-block-start-style",459,null],[13,"BorderBlockStartWidth","","border-block-start-width",459,null],[13,"BorderBlockEndColor","","border-block-end-color",459,null],[13,"BorderBlockEndStyle","","border-block-end-style",459,null],[13,"BorderBlockEndWidth","","border-block-end-width",459,null],[13,"BorderInlineStartColor","","border-inline-start-color",459,null],[13,"BorderInlineStartStyle","","border-inline-start-style",459,null],[13,"BorderInlineStartWidth","","border-inline-start-width",459,null],[13,"BorderInlineEndColor","","border-inline-end-color",459,null],[13,"BorderInlineEndStyle","","border-inline-end-style",459,null],[13,"BorderInlineEndWidth","","border-inline-end-width",459,null],[13,"BorderTopLeftRadius","","border-top-left-radius",459,null],[13,"BorderTopRightRadius","","border-top-right-radius",459,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",459,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",459,null],[13,"BorderImageSource","","border-image-source",459,null],[13,"BorderImageOutset","","border-image-outset",459,null],[13,"BorderImageRepeat","","border-image-repeat",459,null],[13,"BorderImageWidth","","border-image-width",459,null],[13,"BorderImageSlice","","border-image-slice",459,null],[13,"Display","","display",459,null],[13,"Position","","position",459,null],[13,"Float","","float",459,null],[13,"Clear","","clear",459,null],[13,"ServoDisplayForHypotheticalBox","","-servo-display-for-hypothetical-box",459,null],[13,"VerticalAlign","","vertical-align",459,null],[13,"ServoOverflowClipBox","","-servo-overflow-clip-box",459,null],[13,"OverflowX","","overflow-x",459,null],[13,"OverflowY","","overflow-y",459,null],[13,"TransitionDuration","","transition-duration",459,null],[13,"TransitionTimingFunction","","transition-timing-function",459,null],[13,"TransitionProperty","","transition-property",459,null],[13,"TransitionDelay","","transition-delay",459,null],[13,"AnimationName","","animation-name",459,null],[13,"AnimationDuration","","animation-duration",459,null],[13,"AnimationTimingFunction","","animation-timing-function",459,null],[13,"AnimationIterationCount","","animation-iteration-count",459,null],[13,"AnimationDirection","","animation-direction",459,null],[13,"AnimationPlayState","","animation-play-state",459,null],[13,"AnimationFillMode","","animation-fill-mode",459,null],[13,"AnimationDelay","","animation-delay",459,null],[13,"Transform","","transform",459,null],[13,"Perspective","","perspective",459,null],[13,"PerspectiveOrigin","","perspective-origin",459,null],[13,"BackfaceVisibility","","backface-visibility",459,null],[13,"TransformStyle","","transform-style",459,null],[13,"TransformOrigin","","transform-origin",459,null],[13,"Color","","color",459,null],[13,"ColumnWidth","","column-width",459,null],[13,"ColumnCount","","column-count",459,null],[13,"ColumnGap","","column-gap",459,null],[13,"Content","","content",459,null],[13,"CounterIncrement","","counter-increment",459,null],[13,"CounterReset","","counter-reset",459,null],[13,"Opacity","","opacity",459,null],[13,"BoxShadow","","box-shadow",459,null],[13,"Clip","","clip",459,null],[13,"Filter","","filter",459,null],[13,"MixBlendMode","","mix-blend-mode",459,null],[13,"FontFamily","","font-family",459,null],[13,"FontStyle","","font-style",459,null],[13,"FontVariantCaps","","font-variant-caps",459,null],[13,"FontWeight","","font-weight",459,null],[13,"FontSize","","font-size",459,null],[13,"FontStretch","","font-stretch",459,null],[13,"Visibility","","visibility",459,null],[13,"WritingMode","","writing-mode",459,null],[13,"Direction","","direction",459,null],[13,"ImageRendering","","image-rendering",459,null],[13,"BorderCollapse","","border-collapse",459,null],[13,"EmptyCells","","empty-cells",459,null],[13,"CaptionSide","","caption-side",459,null],[13,"BorderSpacing","","border-spacing",459,null],[13,"LineHeight","","line-height",459,null],[13,"TextTransform","","text-transform",459,null],[13,"TextIndent","","text-indent",459,null],[13,"OverflowWrap","","overflow-wrap",459,null],[13,"WordBreak","","word-break",459,null],[13,"TextJustify","","text-justify",459,null],[13,"TextAlign","","text-align",459,null],[13,"LetterSpacing","","letter-spacing",459,null],[13,"WordSpacing","","word-spacing",459,null],[13,"ServoTextDecorationsInEffect","","-servo-text-decorations-in-effect",459,null],[13,"WhiteSpace","","white-space",459,null],[13,"TextShadow","","text-shadow",459,null],[13,"TextRendering","","text-rendering",459,null],[13,"ListStylePosition","","list-style-position",459,null],[13,"ListStyleType","","list-style-type",459,null],[13,"ListStyleImage","","list-style-image",459,null],[13,"Quotes","","quotes",459,null],[13,"MarginTop","","margin-top",459,null],[13,"MarginLeft","","margin-left",459,null],[13,"MarginBottom","","margin-bottom",459,null],[13,"MarginRight","","margin-right",459,null],[13,"MarginBlockStart","","margin-block-start",459,null],[13,"MarginBlockEnd","","margin-block-end",459,null],[13,"MarginInlineStart","","margin-inline-start",459,null],[13,"MarginInlineEnd","","margin-inline-end",459,null],[13,"OutlineColor","","outline-color",459,null],[13,"OutlineStyle","","outline-style",459,null],[13,"OutlineWidth","","outline-width",459,null],[13,"OutlineOffset","","outline-offset",459,null],[13,"PaddingTop","","padding-top",459,null],[13,"PaddingLeft","","padding-left",459,null],[13,"PaddingBottom","","padding-bottom",459,null],[13,"PaddingRight","","padding-right",459,null],[13,"PaddingBlockStart","","padding-block-start",459,null],[13,"PaddingBlockEnd","","padding-block-end",459,null],[13,"PaddingInlineStart","","padding-inline-start",459,null],[13,"PaddingInlineEnd","","padding-inline-end",459,null],[13,"Cursor","","cursor",459,null],[13,"PointerEvents","","pointer-events",459,null],[13,"Top","","top",459,null],[13,"Left","","left",459,null],[13,"Bottom","","bottom",459,null],[13,"Right","","right",459,null],[13,"OffsetBlockStart","","offset-block-start",459,null],[13,"OffsetBlockEnd","","offset-block-end",459,null],[13,"OffsetInlineStart","","offset-inline-start",459,null],[13,"OffsetInlineEnd","","offset-inline-end",459,null],[13,"ZIndex","","z-index",459,null],[13,"FlexDirection","","flex-direction",459,null],[13,"FlexWrap","","flex-wrap",459,null],[13,"JustifyContent","","justify-content",459,null],[13,"AlignContent","","align-content",459,null],[13,"AlignItems","","align-items",459,null],[13,"FlexGrow","","flex-grow",459,null],[13,"FlexShrink","","flex-shrink",459,null],[13,"AlignSelf","","align-self",459,null],[13,"Order","","order",459,null],[13,"FlexBasis","","flex-basis",459,null],[13,"Width","","width",459,null],[13,"MinWidth","","min-width",459,null],[13,"MaxWidth","","max-width",459,null],[13,"Height","","height",459,null],[13,"MinHeight","","min-height",459,null],[13,"MaxHeight","","max-height",459,null],[13,"BlockSize","","block-size",459,null],[13,"MinBlockSize","","min-block-size",459,null],[13,"MaxBlockSize","","max-block-size",459,null],[13,"InlineSize","","inline-size",459,null],[13,"MinInlineSize","","min-inline-size",459,null],[13,"MaxInlineSize","","max-inline-size",459,null],[13,"BoxSizing","","box-sizing",459,null],[13,"TableLayout","","table-layout",459,null],[13,"TextOverflow","","text-overflow",459,null],[13,"UnicodeBidi","","unicode-bidi",459,null],[13,"TextDecorationLine","","text-decoration-line",459,null],[13,"CSSWideKeyword","","A css-wide keyword.",459,null],[13,"WithVariables","","An unparsed value that contains `var()` functions.",459,null],[13,"Custom","","A custom property declaration, with the property name and the declared value.",459,null],[4,"StyleStructRef","","A reference to a style struct of the parent, or our own style struct.",null,null],[13,"Borrowed","","A borrowed struct from the parent, for example, for inheriting style.",460,null],[13,"Owned","","An owned struct, that we've already mutated.",460,null],[13,"Vacated","","Temporarily vacated, will panic if accessed",460,null],[4,"AliasId","","An identifier for a given alias property.",null,null],[13,"WordWrap","","word-wrap",461,null],[5,"default_font_size_keyword","","Default value for FontComputationData",null,{"inputs":[],"output":{"name":"fontcomputationdata"}}],[5,"get_writing_mode","","Return a WritingMode bitflags from the relevant CSS properties.",null,{"inputs":[{"name":"inheritedbox"}],"output":{"name":"writingmode"}}],[5,"cascade","","Performs the CSS cascade, computing new styles for an element from its parent style.",null,{"inputs":[{"name":"device"},{"name":"option"},{"name":"strongrulenode"},{"name":"stylesheetguards"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"fontmetricsprovider"},{"name":"cascadeflags"},{"name":"quirksmode"},{"name":"option"},{"name":"rulecacheconditions"}],"output":{"name":"arc"}}],[5,"apply_declarations","","NOTE: This function expects the declaration with more priority to appear first.",null,{"inputs":[{"name":"device"},{"name":"option"},{"name":"strongrulenode"},{"name":"f"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"fontmetricsprovider"},{"name":"cascadeflags"},{"name":"quirksmode"},{"name":"option"},{"name":"rulecacheconditions"}],"output":{"name":"arc"}}],[5,"adjust_border_width","","See StyleAdjuster::adjust_for_border_width.",null,{"inputs":[{"name":"stylebuilder"}],"output":null}],[5,"modify_border_style_for_inline_sides","","Adjusts borders as appropriate to account for a fragment's status as the first or last fragment within the range of an element.",null,{"inputs":[{"name":"arc"},{"name":"bool"},{"name":"bool"}],"output":null}],[0,"computed_value_flags","","Misc information about a given computed style.",null,null],[3,"ComputedValueFlags","style::properties::computed_value_flags","Misc information about a given computed style.",null,null],[17,"HAS_TEXT_DECORATION_LINES","","Whether the style or any of the ancestors has a text-decoration-line property that should get propagated to descendants.",null,null],[17,"SHOULD_SUPPRESS_LINEBREAK","","Whether line break inside should be suppressed.",null,null],[17,"IS_TEXT_COMBINED","","A flag used to mark text that that has text-combine-upright.",null,null],[17,"IS_RELEVANT_LINK_VISITED","","A flag used to mark styles under a relevant link that is also visited.",null,null],[17,"IS_IN_PSEUDO_ELEMENT_SUBTREE","","A flag used to mark styles which are a pseudo-element or under one.",null,null],[17,"IS_IN_DISPLAY_NONE_SUBTREE","","A flag used to mark styles which are in a display: none subtree, or under one.",null,null],[17,"INHERITS_DISPLAY","","Whether this style inherits the `display` property.",null,null],[17,"INHERITS_CONTENT","","Whether this style inherits the `content` property.",null,null],[17,"INHERITS_RESET_STYLE","","Whether the child explicitly inherits any reset property.",null,null],[17,"IS_STYLE_IF_VISITED","","A flag to mark a style which is a visited style.",null,null],[11,"eq","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"ne","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"clone","","",462,{"inputs":[{"name":"self"}],"output":{"name":"computedvalueflags"}}],[11,"partial_cmp","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"option"}}],[11,"lt","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"le","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"gt","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"ge","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"cmp","","",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"ordering"}}],[11,"hash","","",462,null],[11,"fmt","","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",462,{"inputs":[],"output":{"name":"computedvalueflags"}}],[11,"all","","Returns the set containing all flags.",462,{"inputs":[],"output":{"name":"computedvalueflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",462,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",462,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",462,{"inputs":[{"name":"u16"}],"output":{"name":"computedvalueflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"computedvalueflags"}}],[11,"bitor_assign","","Adds the set of flags.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"computedvalueflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"computedvalueflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":{"name":"computedvalueflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",462,{"inputs":[{"name":"self"},{"name":"computedvalueflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",462,{"inputs":[{"name":"self"}],"output":{"name":"computedvalueflags"}}],[11,"extend","","",462,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",462,{"inputs":[{"name":"t"}],"output":{"name":"computedvalueflags"}}],[0,"declaration_block","style::properties","A property declaration block.",null,null],[3,"AnimationRules","style::properties::declaration_block","The animation rules.",null,null],[12,"0","","",463,null],[12,"1","","",463,null],[3,"PropertyDeclarationBlock","","Overridden declarations are skipped.",null,null],[3,"DeclarationImportanceIterator","","Iterator over `(PropertyDeclaration, Importance)` pairs.",null,null],[3,"NormalDeclarationIterator","","Iterator over `PropertyDeclaration` for Importance::Normal.",null,null],[3,"AnimationValueIterator","","Iterator for AnimationValue to be generated from PropertyDeclarationBlock.",null,null],[4,"Importance","","A declaration [importance][importance].",null,null],[13,"Normal","","Indicates a declaration without `!important`.",464,null],[13,"Important","","Indicates a declaration with `!important`.",464,null],[4,"AppendableValue","","A convenient enum to represent different kinds of stuff that can represent a value in the serialization of a property declaration.",null,null],[13,"Declaration","","A given declaration, of which we'll serialize just the value.",465,null],[13,"DeclarationsForShorthand","","A set of declarations for a given shorthand.",465,null],[13,"Css","","A raw CSS string, coming for example from a property with CSS variables, or when storing a serialized shorthand value before appending directly.",465,null],[12,"css","style::properties::declaration_block::AppendableValue","The raw CSS string.",465,null],[12,"with_variables","","Whether the original serialization contained variables or not.",465,null],[5,"append_declaration_value","style::properties::declaration_block","Append a given kind of appendable value to a serialization.",null,{"inputs":[{"name":"w"},{"name":"appendablevalue"}],"output":{"name":"result"}}],[5,"append_serialization","","Append a given property and value pair to a serialization.",null,{"inputs":[{"name":"w"},{"name":"n"},{"name":"appendablevalue"},{"name":"importance"},{"name":"bool"}],"output":{"name":"result"}}],[5,"parse_style_attribute","","A helper to parse the style attribute of an element, in order for this to be shared between Servo and Gecko.",null,{"inputs":[{"name":"str"},{"name":"urlextradata"},{"name":"r"},{"name":"quirksmode"}],"output":{"name":"propertydeclarationblock"}}],[5,"parse_one_declaration_into","","Parse a given property declaration. Can result in multiple `PropertyDeclaration`s when expanding a shorthand, for example.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"propertyid"},{"name":"str"},{"name":"urlextradata"},{"name":"r"},{"name":"parsingmode"},{"name":"quirksmode"}],"output":{"name":"result"}}],[5,"parse_property_declaration_list","","Parse a list of property declarations and return a property declaration block.",null,{"inputs":[{"name":"parsercontext"},{"name":"parsererrorcontext"},{"name":"parser"}],"output":{"name":"propertydeclarationblock"}}],[11,"is_empty","","Returns whether these animation rules represents an actual rule or not.",463,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",464,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",464,{"inputs":[{"name":"self"}],"output":{"name":"importance"}}],[11,"fmt","","",464,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",464,null],[11,"eq","","",464,{"inputs":[{"name":"self"},{"name":"importance"}],"output":{"name":"bool"}}],[11,"important","","Return whether this is an important declaration.",464,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",466,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclarationblock"}}],[11,"new","","Constructor",467,null],[11,"next","","",467,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",467,null],[11,"next_back","","",467,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Constructor",468,null],[11,"next","","",468,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",468,null],[11,"next","","",469,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",466,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of declarations in the block.",466,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create an empty block",466,{"inputs":[],"output":{"name":"self"}}],[11,"with_one","","Create a block with a single declaration",466,{"inputs":[{"name":"propertydeclaration"},{"name":"importance"}],"output":{"name":"self"}}],[11,"declarations","","The declarations in this block",466,null],[11,"declarations_importance","","The `important` flags for declarations in this block",466,{"inputs":[{"name":"self"}],"output":{"name":"smallbitvec"}}],[11,"declaration_importance_iter","","Iterate over `(PropertyDeclaration, Importance)` pairs",466,{"inputs":[{"name":"self"}],"output":{"name":"declarationimportanceiterator"}}],[11,"normal_declaration_iter","","Iterate over `PropertyDeclaration` for Importance::Normal",466,{"inputs":[{"name":"self"}],"output":{"name":"normaldeclarationiterator"}}],[11,"to_animation_value_iter","","Return an iterator of (AnimatableLonghand, AnimationValue).",466,{"inputs":[{"name":"self"},{"name":"context"},{"name":"computedvalues"}],"output":{"name":"animationvalueiterator"}}],[11,"any_important","","Returns whether this block contains any declaration with `!important`.",466,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_normal","","Returns whether this block contains any declaration without `!important`.",466,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns whether this block contains a declaration of a given longhand.",466,{"inputs":[{"name":"self"},{"name":"longhandid"}],"output":{"name":"bool"}}],[11,"get","","Get a declaration for a given property.",466,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":{"name":"option"}}],[11,"property_value_to_css","","Find the value of the given property in this block and serialize it",466,{"inputs":[{"name":"self"},{"name":"propertyid"},{"name":"w"}],"output":{"name":"result"}}],[11,"property_priority","","https://dev.w3.org/csswg/cssom/#dom-cssstyledeclaration-getpropertypriority",466,{"inputs":[{"name":"self"},{"name":"propertyid"}],"output":{"name":"importance"}}],[11,"extend","","Adds or overrides the declaration for a given property in this block, except if an existing declaration for the same property is more important.",466,{"inputs":[{"name":"self"},{"name":"sourcepropertydeclarationdrain"},{"name":"importance"}],"output":null}],[11,"extend_reset","","Adds or overrides the declaration for a given property in this block, even if an existing declaration for the same property is more important, and reuses the same position in the block.",466,{"inputs":[{"name":"self"},{"name":"sourcepropertydeclarationdrain"},{"name":"importance"}],"output":{"name":"bool"}}],[11,"push","","Adds or overrides the declaration for a given property in this block, except if an existing declaration for the same property is more important.",466,{"inputs":[{"name":"self"},{"name":"propertydeclaration"},{"name":"importance"}],"output":null}],[11,"set_importance","","Set the declaration importance for a given property, if found.",466,{"inputs":[{"name":"self"},{"name":"propertyid"},{"name":"importance"}],"output":{"name":"bool"}}],[11,"remove_property","","https://dev.w3.org/csswg/cssom/#dom-cssstyledeclaration-removeproperty",466,{"inputs":[{"name":"self"},{"name":"propertyid"}],"output":{"name":"bool"}}],[11,"single_value_to_css","","Take a declaration block known to contain a single property and serialize it.",466,{"inputs":[{"name":"self"},{"name":"propertyid"},{"name":"w"},{"name":"option"}],"output":{"name":"result"}}],[11,"to_css","","",466,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"longhands","style::properties","A module with all the code for longhand properties.",null,null],[0,"background_color","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#background-color",null,null],[5,"get_initial_value","style::properties::longhands::background_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"background_image","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-image",null,null],[3,"SpecifiedValue","style::properties::longhands::background_image","The specified value of background-image.",null,null],[12,"0","","",470,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_image::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::background_image","The definition of the computed value for background-image.",null,null],[3,"T","style::properties::longhands::background_image::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",471,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",471,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",471,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",471,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",471,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",471,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",471,null],[11,"to_css","","",471,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_image","",470,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",470,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",470,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",470,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",470,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",470,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",470,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",470,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",470,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_position_x","style::properties::longhands","https://drafts.csswg.org/css-backgrounds-4/#propdef-background-position-x",null,null],[3,"SpecifiedValue","style::properties::longhands::background_position_x","The specified value of background-position-x.",null,null],[12,"0","","",472,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_position_x::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::background_position_x","The definition of the computed value for background-position-x.",null,null],[3,"T","style::properties::longhands::background_position_x::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",473,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",473,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",473,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",473,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",473,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",473,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"animate","","",473,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",473,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",473,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","",473,null],[11,"to_css","","",473,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_position_x","",472,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",472,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",472,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",472,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",472,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",472,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",472,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",472,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",472,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_position_y","style::properties::longhands","https://drafts.csswg.org/css-backgrounds-4/#propdef-background-position-y",null,null],[3,"SpecifiedValue","style::properties::longhands::background_position_y","The specified value of background-position-y.",null,null],[12,"0","","",474,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_position_y::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::background_position_y","The definition of the computed value for background-position-y.",null,null],[3,"T","style::properties::longhands::background_position_y::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",475,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",475,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",475,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",475,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",475,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"animate","","",475,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",475,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",475,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","",475,null],[11,"to_css","","",475,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_position_y","",474,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",474,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",474,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",474,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",474,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",474,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",474,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",474,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",474,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_repeat","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-repeat",null,null],[3,"SpecifiedValue","style::properties::longhands::background_repeat","The specified value of background-repeat.",null,null],[12,"0","","",476,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[4,"RepeatKeyword","style::properties::longhands::background_repeat::single_value","",null,null],[13,"Repeat","","",477,null],[13,"Space","","",477,null],[13,"Round","","",477,null],[13,"NoRepeat","","",477,null],[4,"SpecifiedValue","","",null,null],[13,"RepeatX","","",478,null],[13,"RepeatY","","",478,null],[13,"Other","","",478,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::background_repeat::single_value::computed_value","",null,null],[12,"0","","",479,null],[12,"1","","",479,null],[11,"clone","","",479,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",479,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",479,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",479,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","style::properties::longhands::background_repeat::single_value","",477,{"inputs":[{"name":"self"}],"output":{"name":"repeatkeyword"}}],[11,"fmt","","",477,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",477,null],[11,"eq","","",477,{"inputs":[{"name":"self"},{"name":"repeatkeyword"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",477,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",477,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",477,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",477,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",478,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",478,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",478,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",478,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",478,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",478,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","style::properties::longhands::background_repeat::single_value::computed_value","",479,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","style::properties::longhands::background_repeat::single_value","",478,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",478,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::background_repeat","The definition of the computed value for background-repeat.",null,null],[3,"T","style::properties::longhands::background_repeat::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",480,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",480,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",480,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",480,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",480,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",480,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",480,null],[11,"to_css","","",480,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_repeat","",476,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",476,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",476,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",476,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",476,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",476,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",476,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",476,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",476,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_attachment","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-attachment",null,null],[3,"SpecifiedValue","style::properties::longhands::background_attachment","The specified value of background-attachment.",null,null],[12,"0","","",481,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_attachment::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::background_attachment::single_value::computed_value","",null,null],[13,"scroll","","",482,null],[13,"fixed","","",482,null],[11,"clone","","",482,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",482,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",482,null],[11,"eq","","",482,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",482,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",482,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",482,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",482,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",482,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",482,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",482,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::background_attachment","The definition of the computed value for background-attachment.",null,null],[3,"T","style::properties::longhands::background_attachment::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",483,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",483,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",483,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",483,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",483,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",483,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",483,null],[11,"to_css","","",483,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_attachment","",481,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",481,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",481,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",481,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",481,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",481,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",481,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",481,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",481,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_clip","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-clip",null,null],[3,"SpecifiedValue","style::properties::longhands::background_clip","The specified value of background-clip.",null,null],[12,"0","","",484,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_clip::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::background_clip::single_value::computed_value","",null,null],[13,"border_box","","",485,null],[13,"padding_box","","",485,null],[13,"content_box","","",485,null],[11,"clone","","",485,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",485,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",485,null],[11,"eq","","",485,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",485,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",485,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",485,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",485,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",485,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",485,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",485,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::background_clip","The definition of the computed value for background-clip.",null,null],[3,"T","style::properties::longhands::background_clip::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",486,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",486,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",486,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",486,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",486,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",486,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",486,null],[11,"to_css","","",486,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_clip","",484,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",484,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",484,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",484,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",484,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",484,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",484,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",484,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",484,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_origin","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-origin",null,null],[3,"SpecifiedValue","style::properties::longhands::background_origin","The specified value of background-origin.",null,null],[12,"0","","",487,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_origin::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::background_origin::single_value::computed_value","",null,null],[13,"padding_box","","",488,null],[13,"border_box","","",488,null],[13,"content_box","","",488,null],[11,"clone","","",488,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",488,null],[11,"eq","","",488,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",488,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",488,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",488,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",488,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",488,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",488,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",488,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::background_origin","The definition of the computed value for background-origin.",null,null],[3,"T","style::properties::longhands::background_origin::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",489,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",489,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",489,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",489,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",489,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",489,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",489,null],[11,"to_css","","",489,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_origin","",487,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",487,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",487,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",487,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",487,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",487,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",487,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",487,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",487,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"background_size","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#the-background-size",null,null],[3,"SpecifiedValue","style::properties::longhands::background_size","The specified value of background-size.",null,null],[12,"0","","",490,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::background_size::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::background_size","The definition of the computed value for background-size.",null,null],[3,"T","style::properties::longhands::background_size::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",491,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",491,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",491,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",491,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",491,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",491,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"animate","","",491,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",491,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",491,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","",491,null],[11,"to_css","","",491,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::background_size","",490,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",490,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",490,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",490,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",490,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",490,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",490,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",490,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",490,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"border_top_color","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-top-color",null,null],[5,"get_initial_value","style::properties::longhands::border_top_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_top_style","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-top-style",null,null],[5,"get_initial_value","style::properties::longhands::border_top_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_top_width","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-top-width",null,null],[5,"get_initial_value","style::properties::longhands::border_top_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_left_color","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-left-color",null,null],[5,"get_initial_value","style::properties::longhands::border_left_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_left_style","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-left-style",null,null],[5,"get_initial_value","style::properties::longhands::border_left_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_left_width","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-left-width",null,null],[5,"get_initial_value","style::properties::longhands::border_left_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_bottom_color","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-bottom-color",null,null],[5,"get_initial_value","style::properties::longhands::border_bottom_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_bottom_style","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-bottom-style",null,null],[5,"get_initial_value","style::properties::longhands::border_bottom_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_bottom_width","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-bottom-width",null,null],[5,"get_initial_value","style::properties::longhands::border_bottom_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_right_color","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-right-color",null,null],[5,"get_initial_value","style::properties::longhands::border_right_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_right_style","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-right-style",null,null],[5,"get_initial_value","style::properties::longhands::border_right_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_right_width","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-right-width",null,null],[5,"get_initial_value","style::properties::longhands::border_right_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_start_color","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-start-color",null,null],[5,"get_initial_value","style::properties::longhands::border_block_start_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_start_style","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-start-style",null,null],[5,"get_initial_value","style::properties::longhands::border_block_start_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_start_width","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-start-width",null,null],[5,"get_initial_value","style::properties::longhands::border_block_start_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_end_color","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-end-color",null,null],[5,"get_initial_value","style::properties::longhands::border_block_end_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_end_style","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-end-style",null,null],[5,"get_initial_value","style::properties::longhands::border_block_end_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_block_end_width","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-end-width",null,null],[5,"get_initial_value","style::properties::longhands::border_block_end_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_start_color","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-start-color",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_start_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_start_style","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-start-style",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_start_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_start_width","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-start-width",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_start_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_end_color","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-end-color",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_end_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_end_style","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-end-style",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_end_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_inline_end_width","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-end-width",null,null],[5,"get_initial_value","style::properties::longhands::border_inline_end_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_top_left_radius","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-top-left-radius",null,null],[5,"get_initial_value","style::properties::longhands::border_top_left_radius","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_top_right_radius","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-top-right-radius",null,null],[5,"get_initial_value","style::properties::longhands::border_top_right_radius","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_bottom_right_radius","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-bottom-right-radius",null,null],[5,"get_initial_value","style::properties::longhands::border_bottom_right_radius","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_bottom_left_radius","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-bottom-left-radius",null,null],[5,"get_initial_value","style::properties::longhands::border_bottom_left_radius","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_image_source","style::properties::longhands","-moz-border-*-colors: color, string, enum, none, inherit/initial These non-spec properties are just for Gecko (Stylo) internal use. https://drafts.csswg.org/css-backgrounds/#the-background-image",null,null],[5,"get_initial_value","style::properties::longhands::border_image_source","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_image_outset","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-image-outset",null,null],[5,"get_initial_value","style::properties::longhands::border_image_outset","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_image_repeat","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-image-repeat",null,null],[3,"SpecifiedValue","style::properties::longhands::border_image_repeat","",null,null],[12,"0","","",492,null],[12,"1","","",492,null],[4,"RepeatKeyword","","",null,null],[13,"Stretch","","",493,null],[13,"Repeat","","",493,null],[13,"Round","","",493,null],[13,"Space","","",493,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::border_image_repeat::computed_value","",null,null],[12,"0","","",494,null],[12,"1","","",494,null],[11,"heap_size_of_children","","",494,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",494,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",494,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",494,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",494,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_css","","",494,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","style::properties::longhands::border_image_repeat","",492,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",492,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",492,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",492,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",492,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",492,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",493,{"inputs":[{"name":"self"}],"output":{"name":"repeatkeyword"}}],[11,"fmt","","",493,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",493,null],[11,"eq","","",493,{"inputs":[{"name":"self"},{"name":"repeatkeyword"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",493,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",493,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",493,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",493,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",492,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",492,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"border_image_width","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-image-width",null,null],[5,"get_initial_value","style::properties::longhands::border_image_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"border_image_slice","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#border-image-slice",null,null],[5,"get_initial_value","style::properties::longhands::border_image_slice","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"display","style::properties::longhands","https://drafts.csswg.org/css-display/#propdef-display",null,null],[4,"SpecifiedValue","style::properties::longhands::display","",null,null],[13,"inline","","",495,null],[13,"block","","",495,null],[13,"inline_block","","",495,null],[13,"table","","",495,null],[13,"inline_table","","",495,null],[13,"table_row_group","","",495,null],[13,"table_header_group","","",495,null],[13,"table_footer_group","","",495,null],[13,"table_row","","",495,null],[13,"table_column_group","","",495,null],[13,"table_column","","",495,null],[13,"table_cell","","",495,null],[13,"table_caption","","",495,null],[13,"list_item","","",495,null],[13,"none","","",495,null],[13,"flex","","",495,null],[13,"inline_flex","","",495,null],[5,"get_initial_value","","The initial display value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","Parse a display value.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[11,"is_item_container","","Returns whether this \"display\" value is the display of a flex or grid container.",495,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_line_participant","","Returns whether an element with this display type is a line participant, which means it may lay its children on the same line as itself.",495,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equivalent_block_display","","Convert this display into an equivalent block display.",495,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","","",495,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",495,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",495,null],[11,"eq","","",495,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",495,null],[11,"from_computed_value","","",495,null],[11,"heap_size_of_children","","",495,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",495,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"position","style::properties::longhands","https://drafts.csswg.org/css-position/#position-property",null,null],[5,"get_initial_value","style::properties::longhands::position","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::position::computed_value","",null,null],[13,"static_","","",496,null],[13,"absolute","","",496,null],[13,"relative","","",496,null],[13,"fixed","","",496,null],[13,"sticky","","",496,null],[11,"clone","","",496,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",496,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",496,null],[11,"eq","","",496,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",496,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",496,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",496,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",496,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",496,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",496,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",496,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"float","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-float",null,null],[4,"SpecifiedValue","style::properties::longhands::float","",null,null],[13,"none","","",497,null],[13,"left","","",497,null],[13,"right","","",497,null],[13,"inline_start","","",497,null],[13,"inline_end","","",497,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::float::computed_value","",null,null],[13,"none","","",498,null],[13,"left","","",498,null],[13,"right","","",498,null],[11,"clone","","",498,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",498,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",498,null],[11,"eq","","",498,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",498,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",498,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",498,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",498,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::float","",497,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",497,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",497,null],[11,"eq","","",497,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",497,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",497,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",497,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",497,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",497,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",497,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",497,{"inputs":[{"name":"t"}],"output":{"name":"specifiedvalue"}}],[0,"clear","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#flow-control",null,null],[4,"SpecifiedValue","style::properties::longhands::clear","",null,null],[13,"none","","",499,null],[13,"left","","",499,null],[13,"right","","",499,null],[13,"both","","",499,null],[13,"inline_start","","",499,null],[13,"inline_end","","",499,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::clear::computed_value","",null,null],[13,"none","","",500,null],[13,"left","","",500,null],[13,"right","","",500,null],[13,"both","","",500,null],[11,"clone","","",500,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",500,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",500,null],[11,"eq","","",500,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",500,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",500,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",500,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",500,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::clear","",499,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",499,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",499,null],[11,"eq","","",499,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",499,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",499,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",499,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",499,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",499,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",499,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",499,{"inputs":[{"name":"t"}],"output":{"name":"specifiedvalue"}}],[0,"_servo_display_for_hypothetical_box","style::properties::longhands","Internal (not web-exposed)",null,null],[5,"derive_from_display","style::properties::longhands::_servo_display_for_hypothetical_box","",null,{"inputs":[{"name":"context"}],"output":null}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[0,"computed_value","","",null,null],[6,"T","style::properties::longhands::_servo_display_for_hypothetical_box::computed_value","",null,null],[0,"vertical_align","style::properties::longhands","https://www.w3.org/TR/CSS2/visudet.html#propdef-vertical-align",null,null],[5,"get_initial_value","style::properties::longhands::vertical_align","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"_servo_overflow_clip_box","style::properties::longhands","Internal, not web-exposed,           may be standardized in the future (https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-box)",null,null],[5,"get_initial_value","style::properties::longhands::_servo_overflow_clip_box","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::_servo_overflow_clip_box::computed_value","",null,null],[13,"padding_box","","",501,null],[13,"content_box","","",501,null],[11,"clone","","",501,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",501,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",501,null],[11,"eq","","",501,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",501,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",501,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",501,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",501,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",501,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",501,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",501,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"overflow_x","style::properties::longhands","https://drafts.csswg.org/css-overflow/#propdef-overflow-x",null,null],[5,"get_initial_value","style::properties::longhands::overflow_x","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::overflow_x::computed_value","",null,null],[13,"visible","","",502,null],[13,"hidden","","",502,null],[13,"scroll","","",502,null],[13,"auto","","",502,null],[11,"clone","","",502,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",502,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",502,null],[11,"eq","","",502,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",502,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",502,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",502,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",502,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",502,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",502,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",502,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"overflow_y","style::properties::longhands","https://drafts.csswg.org/css-overflow/#propdef-overflow-y",null,null],[5,"cascade_property","style::properties::longhands::overflow_y","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"transition_duration","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-transition-duration",null,null],[3,"SpecifiedValue","style::properties::longhands::transition_duration","The specified value of transition-duration.",null,null],[12,"0","","",503,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::transition_duration::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::transition_duration","The definition of the computed value for transition-duration.",null,null],[3,"T","style::properties::longhands::transition_duration::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",504,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",504,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",504,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",504,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",504,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",504,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",504,null],[11,"to_css","","",504,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::transition_duration","",503,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",503,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",503,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",503,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",503,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",503,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",503,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",503,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",503,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transition_timing_function","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-transition-timing-function",null,null],[3,"SpecifiedValue","style::properties::longhands::transition_timing_function","The specified value of transition-timing-function.",null,null],[12,"0","","",505,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::transition_timing_function::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::transition_timing_function","The definition of the computed value for transition-timing-function.",null,null],[3,"T","style::properties::longhands::transition_timing_function::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",506,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",506,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",506,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",506,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",506,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",506,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",506,null],[11,"to_css","","",506,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::transition_timing_function","",505,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",505,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",505,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",505,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",505,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",505,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",505,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",505,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",505,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transition_property","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-transition-property",null,null],[3,"SpecifiedValue","style::properties::longhands::transition_property","The specified value of transition-property.",null,null],[12,"0","","",507,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::transition_property::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::transition_property","The definition of the computed value for transition-property.",null,null],[3,"T","style::properties::longhands::transition_property::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",508,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",508,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",508,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",508,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",508,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",508,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",508,null],[11,"to_css","","",508,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::transition_property","",507,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",507,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",507,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",507,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",507,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",507,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",507,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",507,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transition_delay","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-transition-delay",null,null],[3,"SpecifiedValue","style::properties::longhands::transition_delay","The specified value of transition-delay.",null,null],[12,"0","","",509,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::transition_delay::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::transition_delay","The definition of the computed value for transition-delay.",null,null],[3,"T","style::properties::longhands::transition_delay::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",510,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",510,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",510,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",510,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",510,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",510,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",510,null],[11,"to_css","","",510,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::transition_delay","",509,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",509,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",509,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",509,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",509,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",509,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",509,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",509,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",509,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_name","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-name",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_name","The specified value of animation-name.",null,null],[12,"0","","",511,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_name::single_value","",null,null],[12,"0","","",512,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[11,"clone","","",512,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",512,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",512,null],[11,"eq","","",512,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",512,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",512,null],[11,"from_computed_value","","",512,null],[11,"heap_size_of_children","","",512,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_atom","","As an Atom",512,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",512,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",512,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",512,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","style::properties::longhands::animation_name","The definition of the computed value for animation-name.",null,null],[3,"T","style::properties::longhands::animation_name::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",513,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",513,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",513,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",513,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",513,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",513,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",513,null],[11,"to_css","","",513,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_name","",511,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",511,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",511,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",511,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",511,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",511,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",511,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",511,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",511,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_duration","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-transition-duration",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_duration","The specified value of animation-duration.",null,null],[12,"0","","",514,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_duration::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::animation_duration","The definition of the computed value for animation-duration.",null,null],[3,"T","style::properties::longhands::animation_duration::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",515,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",515,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",515,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",515,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",515,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",515,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",515,null],[11,"to_css","","",515,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_duration","",514,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",514,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",514,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",514,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",514,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",514,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",514,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",514,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",514,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_timing_function","style::properties::longhands","https://drafts.csswg.org/css-transitions/#propdef-animation-timing-function",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_timing_function","The specified value of animation-timing-function.",null,null],[12,"0","","",516,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_timing_function::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::animation_timing_function","The definition of the computed value for animation-timing-function.",null,null],[3,"T","style::properties::longhands::animation_timing_function::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",517,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",517,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",517,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",517,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",517,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",517,null],[11,"to_css","","",517,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_timing_function","",516,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",516,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",516,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",516,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",516,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",516,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",516,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",516,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",516,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_iteration_count","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-iteration-count",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_iteration_count","The specified value of animation-iteration-count.",null,null],[12,"0","","",518,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[4,"SpecifiedValue","style::properties::longhands::animation_iteration_count::single_value","",null,null],[13,"Number","","",519,null],[13,"Infinite","","",519,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[11,"heap_size_of_children","","",519,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",519,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",519,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",519,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",519,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",519,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",519,null],[11,"from_computed_value","","",519,null],[11,"parse","","",519,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","style::properties::longhands::animation_iteration_count","The definition of the computed value for animation-iteration-count.",null,null],[3,"T","style::properties::longhands::animation_iteration_count::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",520,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",520,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",520,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",520,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",520,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",520,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",520,null],[11,"to_css","","",520,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_iteration_count","",518,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",518,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",518,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",518,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",518,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",518,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",518,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",518,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",518,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_direction","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-direction",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_direction","The specified value of animation-direction.",null,null],[12,"0","","",521,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_direction::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::animation_direction::single_value::computed_value","",null,null],[13,"normal","","",522,null],[13,"reverse","","",522,null],[13,"alternate","","",522,null],[13,"alternate_reverse","","",522,null],[11,"clone","","",522,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",522,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",522,null],[11,"eq","","",522,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",522,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",522,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",522,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",522,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",522,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",522,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",522,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::animation_direction","The definition of the computed value for animation-direction.",null,null],[3,"T","style::properties::longhands::animation_direction::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",523,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",523,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",523,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",523,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",523,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",523,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",523,null],[11,"to_css","","",523,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_direction","",521,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",521,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",521,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",521,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",521,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",521,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",521,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",521,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",521,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_play_state","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-play-state",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_play_state","The specified value of animation-play-state.",null,null],[12,"0","","",524,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_play_state::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::animation_play_state::single_value::computed_value","",null,null],[13,"running","","",525,null],[13,"paused","","",525,null],[11,"clone","","",525,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",525,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",525,null],[11,"eq","","",525,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",525,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",525,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",525,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",525,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",525,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",525,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",525,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::animation_play_state","The definition of the computed value for animation-play-state.",null,null],[3,"T","style::properties::longhands::animation_play_state::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",526,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",526,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",526,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",526,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",526,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",526,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",526,null],[11,"to_css","","",526,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_play_state","",524,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",524,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",524,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",524,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",524,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",524,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",524,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",524,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_fill_mode","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-fill-mode",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_fill_mode","The specified value of animation-fill-mode.",null,null],[12,"0","","",527,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_fill_mode::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::animation_fill_mode::single_value::computed_value","",null,null],[13,"none","","",528,null],[13,"forwards","","",528,null],[13,"backwards","","",528,null],[13,"both","","",528,null],[11,"clone","","",528,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",528,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",528,null],[11,"eq","","",528,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",528,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",528,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",528,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",528,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",528,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",528,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",528,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"computed_value","style::properties::longhands::animation_fill_mode","The definition of the computed value for animation-fill-mode.",null,null],[3,"T","style::properties::longhands::animation_fill_mode::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",529,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",529,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",529,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",529,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",529,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",529,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",529,null],[11,"to_css","","",529,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_fill_mode","",527,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",527,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",527,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",527,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",527,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",527,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",527,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",527,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",527,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"animation_delay","style::properties::longhands","https://drafts.csswg.org/css-animations/#propdef-animation-delay",null,null],[3,"SpecifiedValue","style::properties::longhands::animation_delay","The specified value of animation-delay.",null,null],[12,"0","","",530,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"get_initial_value","style::properties::longhands::animation_delay::single_value","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::animation_delay","The definition of the computed value for animation-delay.",null,null],[3,"T","style::properties::longhands::animation_delay::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",531,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",531,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",531,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",531,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",531,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",531,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",531,null],[11,"to_css","","",531,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::animation_delay","",530,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",530,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",530,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",530,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",530,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",530,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",530,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",530,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",530,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transform","style::properties::longhands","https://drafts.csswg.org/css-transforms/#propdef-transform",null,null],[3,"SpecifiedValue","style::properties::longhands::transform","",null,null],[4,"SpecifiedOperation","","Describes a single parsed Transform Function.",null,null],[13,"Matrix","","Represents a 2D 2x3 matrix.",532,null],[13,"PrefixedMatrix","","Represents a 3D 4x4 matrix with percentage and length values. For `moz-transform`.",532,null],[13,"Matrix3D","","Represents a 3D 4x4 matrix.",532,null],[12,"m11","style::properties::longhands::transform::SpecifiedOperation","",532,null],[12,"m12","","",532,null],[12,"m13","","",532,null],[12,"m14","","",532,null],[12,"m21","","",532,null],[12,"m22","","",532,null],[12,"m23","","",532,null],[12,"m24","","",532,null],[12,"m31","","",532,null],[12,"m32","","",532,null],[12,"m33","","",532,null],[12,"m34","","",532,null],[12,"m41","","",532,null],[12,"m42","","",532,null],[12,"m43","","",532,null],[12,"m44","","",532,null],[13,"PrefixedMatrix3D","style::properties::longhands::transform","Represents a 3D 4x4 matrix with percentage and length values. For `moz-transform`.",532,null],[12,"m11","style::properties::longhands::transform::SpecifiedOperation","",532,null],[12,"m12","","",532,null],[12,"m13","","",532,null],[12,"m14","","",532,null],[12,"m21","","",532,null],[12,"m22","","",532,null],[12,"m23","","",532,null],[12,"m24","","",532,null],[12,"m31","","",532,null],[12,"m32","","",532,null],[12,"m33","","",532,null],[12,"m34","","",532,null],[12,"m41","","",532,null],[12,"m42","","",532,null],[12,"m43","","",532,null],[12,"m44","","",532,null],[13,"Skew","style::properties::longhands::transform","A 2D skew.",532,null],[13,"SkewX","","",532,null],[13,"SkewY","","",532,null],[13,"Translate","","",532,null],[13,"TranslateX","","",532,null],[13,"TranslateY","","",532,null],[13,"TranslateZ","","",532,null],[13,"Translate3D","","",532,null],[13,"Scale","","A 2D scaling factor.",532,null],[13,"ScaleX","","",532,null],[13,"ScaleY","","",532,null],[13,"ScaleZ","","",532,null],[13,"Scale3D","","",532,null],[13,"Rotate","","Describes a 2D Rotation.",532,null],[13,"RotateX","","Rotation in 3D space around the x-axis.",532,null],[13,"RotateY","","Rotation in 3D space around the y-axis.",532,null],[13,"RotateZ","","Rotation in 3D space around the z-axis.",532,null],[13,"Rotate3D","","Rotation in 3D space.",532,null],[13,"Perspective","","Specifies a perspective projection matrix.",532,null],[13,"InterpolateMatrix","","A intermediate type for interpolation of mismatched transform lists.",532,null],[12,"from_list","style::properties::longhands::transform::SpecifiedOperation","",532,null],[12,"to_list","","",532,null],[12,"progress","","",532,null],[13,"AccumulateMatrix","style::properties::longhands::transform","A intermediate type for accumulation of mismatched transform lists.",532,null],[12,"from_list","style::properties::longhands::transform::SpecifiedOperation","",532,null],[12,"to_list","","",532,null],[12,"count","","",532,null],[5,"get_initial_value","style::properties::longhands::transform","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","Parses `transform` property.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_prefixed","","Parses `-moz-transform` property. This prefixed property also accepts LengthOrPercentage in the nondiagonal homogeneous components of matrix and matrix3d.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"ComputedMatrix","style::properties::longhands::transform::computed_value","",null,null],[12,"m11","","",533,null],[12,"m12","","",533,null],[12,"m13","","",533,null],[12,"m14","","",533,null],[12,"m21","","",533,null],[12,"m22","","",533,null],[12,"m23","","",533,null],[12,"m24","","",533,null],[12,"m31","","",533,null],[12,"m32","","",533,null],[12,"m33","","",533,null],[12,"m34","","",533,null],[12,"m41","","",533,null],[12,"m42","","",533,null],[12,"m43","","",533,null],[12,"m44","","",533,null],[3,"ComputedMatrixWithPercents","","",null,null],[12,"m11","","",534,null],[12,"m12","","",534,null],[12,"m13","","",534,null],[12,"m14","","",534,null],[12,"m21","","",534,null],[12,"m22","","",534,null],[12,"m23","","",534,null],[12,"m24","","",534,null],[12,"m31","","",534,null],[12,"m32","","",534,null],[12,"m33","","",534,null],[12,"m34","","",534,null],[12,"m41","","",534,null],[12,"m42","","",534,null],[12,"m43","","",534,null],[12,"m44","","",534,null],[3,"T","","",null,null],[12,"0","","",535,null],[4,"ComputedOperation","","",null,null],[13,"Matrix","","",536,null],[13,"MatrixWithPercents","","",536,null],[13,"Skew","","",536,null],[13,"Translate","","",536,null],[13,"Scale","","",536,null],[13,"Rotate","","",536,null],[13,"Perspective","","",536,null],[13,"InterpolateMatrix","","",536,null],[12,"from_list","style::properties::longhands::transform::computed_value::ComputedOperation","",536,null],[12,"to_list","","",536,null],[12,"progress","","",536,null],[13,"AccumulateMatrix","style::properties::longhands::transform::computed_value","",536,null],[12,"from_list","style::properties::longhands::transform::computed_value::ComputedOperation","",536,null],[12,"to_list","","",536,null],[12,"count","","",536,null],[11,"clone","style::properties::longhands::transform::computed_value","",533,{"inputs":[{"name":"self"}],"output":{"name":"computedmatrix"}}],[11,"fmt","","",533,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",533,{"inputs":[{"name":"self"},{"name":"computedmatrix"}],"output":{"name":"bool"}}],[11,"ne","","",533,{"inputs":[{"name":"self"},{"name":"computedmatrix"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",533,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",534,{"inputs":[{"name":"self"}],"output":{"name":"computedmatrixwithpercents"}}],[11,"fmt","","",534,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",534,{"inputs":[{"name":"self"},{"name":"computedmatrixwithpercents"}],"output":{"name":"bool"}}],[11,"ne","","",534,{"inputs":[{"name":"self"},{"name":"computedmatrixwithpercents"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",534,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"identity","","",533,{"inputs":[],"output":{"name":"computedmatrix"}}],[11,"identity","","",534,{"inputs":[],"output":{"name":"computedmatrixwithpercents"}}],[11,"clone","","",536,{"inputs":[{"name":"self"}],"output":{"name":"computedoperation"}}],[11,"fmt","","",536,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",536,{"inputs":[{"name":"self"},{"name":"computedoperation"}],"output":{"name":"bool"}}],[11,"ne","","",536,{"inputs":[{"name":"self"},{"name":"computedoperation"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",536,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",535,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",535,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",535,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",535,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",535,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","style::properties::longhands::transform","",532,{"inputs":[{"name":"self"}],"output":{"name":"specifiedoperation"}}],[11,"fmt","","",532,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",532,{"inputs":[{"name":"self"},{"name":"specifiedoperation"}],"output":{"name":"bool"}}],[11,"ne","","",532,{"inputs":[{"name":"self"},{"name":"specifiedoperation"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",532,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","style::properties::longhands::transform::computed_value","",535,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","style::properties::longhands::transform","",532,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",537,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",537,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",537,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",537,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",537,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",537,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",537,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",537,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"perspective","style::properties::longhands","https://drafts.csswg.org/css-transforms/#perspective",null,null],[5,"get_initial_value","style::properties::longhands::perspective","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"perspective_origin","style::properties::longhands","https://drafts.csswg.org/css-transforms-2/#perspective-origin-property",null,null],[5,"get_initial_value","style::properties::longhands::perspective_origin","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"backface_visibility","style::properties::longhands","https://drafts.csswg.org/css-transforms/#backface-visibility-property",null,null],[5,"get_initial_value","style::properties::longhands::backface_visibility","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::backface_visibility::computed_value","",null,null],[13,"visible","","",538,null],[13,"hidden","","",538,null],[11,"clone","","",538,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",538,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",538,null],[11,"eq","","",538,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",538,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",538,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",538,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",538,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",538,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",538,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",538,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transform_style","style::properties::longhands","https://drafts.csswg.org/css-transforms/#transform-style-property",null,null],[5,"get_initial_value","style::properties::longhands::transform_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::transform_style::computed_value","",null,null],[13,"auto","","",539,null],[13,"flat","","",539,null],[13,"preserve_3d","","",539,null],[11,"clone","","",539,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",539,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",539,null],[11,"eq","","",539,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",539,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",539,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",539,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",539,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",539,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",539,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",539,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"transform_origin","style::properties::longhands","https://drafts.csswg.org/css-transforms/#transform-origin-property",null,null],[5,"get_initial_value","style::properties::longhands::transform_origin","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"color","style::properties::longhands","https://drafts.csswg.org/css-color/#color",null,null],[5,"get_initial_value","style::properties::longhands::color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"column_width","style::properties::longhands","https://drafts.csswg.org/css-multicol/#propdef-column-width",null,null],[5,"get_initial_value","style::properties::longhands::column_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"column_count","style::properties::longhands","https://drafts.csswg.org/css-multicol/#propdef-column-count",null,null],[5,"get_initial_value","style::properties::longhands::column_count","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"column_gap","style::properties::longhands","https://drafts.csswg.org/css-multicol/#propdef-column-gap",null,null],[5,"get_initial_value","style::properties::longhands::column_gap","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"content","style::properties::longhands","https://drafts.csswg.org/css-content/#propdef-content",null,null],[5,"get_initial_value","style::properties::longhands::content","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"ContentItem","style::properties::longhands::content::computed_value","",null,null],[13,"String","","Literal string content.",540,null],[13,"Counter","","`counter(name, style)`.",540,null],[13,"Counters","","`counters(name, separator, style)`.",540,null],[13,"OpenQuote","","`open-quote`.",540,null],[13,"CloseQuote","","`close-quote`.",540,null],[13,"NoOpenQuote","","`no-open-quote`.",540,null],[13,"NoCloseQuote","","`no-close-quote`.",540,null],[4,"T","","",null,null],[13,"Normal","","",541,null],[13,"None","","",541,null],[13,"Items","","",541,null],[11,"heap_size_of_children","","",540,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",540,{"inputs":[{"name":"self"}],"output":{"name":"contentitem"}}],[11,"fmt","","",540,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",540,{"inputs":[{"name":"self"},{"name":"contentitem"}],"output":{"name":"bool"}}],[11,"ne","","",540,{"inputs":[{"name":"self"},{"name":"contentitem"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",540,null],[11,"from_computed_value","","",540,null],[11,"to_css","","",540,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",541,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",541,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",541,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",541,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",541,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",541,null],[11,"from_computed_value","","",541,null],[11,"to_css","","",541,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"counter_increment","style::properties::longhands","https://drafts.csswg.org/css-lists/#propdef-counter-increment",null,null],[3,"SpecifiedValue","style::properties::longhands::counter_increment","",null,null],[12,"0","","",542,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_common","","",null,{"inputs":[{"name":"parsercontext"},{"name":"i32"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::counter_increment::computed_value","",null,null],[12,"0","","",543,null],[11,"clone","","",543,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",543,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",543,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",543,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",543,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",543,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::counter_increment","",542,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",542,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",542,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",542,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",542,null],[11,"from_computed_value","","",542,null],[11,"to_css","","",542,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"counter_reset","style::properties::longhands","https://drafts.csswg.org/css-lists-3/#propdef-counter-reset",null,null],[5,"parse","style::properties::longhands::counter_reset","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"opacity","style::properties::longhands","https://drafts.csswg.org/css-color/#opacity",null,null],[5,"get_initial_value","style::properties::longhands::opacity","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"box_shadow","style::properties::longhands","https://drafts.csswg.org/css-backgrounds/#box-shadow",null,null],[3,"SpecifiedValue","style::properties::longhands::box_shadow","The specified value of box-shadow.",null,null],[12,"0","","",544,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"parse","style::properties::longhands::box_shadow::single_value","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::box_shadow","The definition of the computed value for box-shadow.",null,null],[3,"T","style::properties::longhands::box_shadow::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",545,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",545,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",545,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",545,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",545,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",545,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",545,null],[11,"to_css","","",545,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::box_shadow","",544,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",544,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",544,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",544,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",544,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",544,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",544,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",544,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",544,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"clip","style::properties::longhands","https://drafts.fxtf.org/css-masking/#clip-property",null,null],[5,"get_initial_value","style::properties::longhands::clip","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"filter","style::properties::longhands","https://drafts.fxtf.org/filters/#propdef-filter",null,null],[3,"SpecifiedValue","style::properties::longhands::filter","The specified value of filter.",null,null],[12,"0","","",546,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"parse","style::properties::longhands::filter::single_value","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::filter","The definition of the computed value for filter.",null,null],[3,"T","style::properties::longhands::filter::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",547,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",547,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",547,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",547,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",547,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",547,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",547,null],[11,"to_css","","",547,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::filter","",546,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",546,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",546,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",546,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",546,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",546,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",546,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",546,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",546,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"mix_blend_mode","style::properties::longhands","https://drafts.fxtf.org/compositing/#propdef-mix-blend-mode",null,null],[5,"get_initial_value","style::properties::longhands::mix_blend_mode","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::mix_blend_mode::computed_value","",null,null],[13,"normal","","",548,null],[13,"multiply","","",548,null],[13,"screen","","",548,null],[13,"overlay","","",548,null],[13,"darken","","",548,null],[13,"lighten","","",548,null],[13,"color_dodge","","",548,null],[13,"color_burn","","",548,null],[13,"hard_light","","",548,null],[13,"soft_light","","",548,null],[13,"difference","","",548,null],[13,"exclusion","","",548,null],[13,"hue","","",548,null],[13,"saturation","","",548,null],[13,"color","","",548,null],[13,"luminosity","","",548,null],[11,"clone","","",548,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",548,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",548,null],[11,"eq","","",548,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",548,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",548,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",548,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",548,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",548,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",548,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",548,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"font_family","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-family",null,null],[4,"SpecifiedValue","style::properties::longhands::font_family","",null,null],[13,"Values","","",549,null],[13,"System","","",549,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","<family-name># <family-name> =  | [ + ] TODO: <generic-family>",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"FamilyName","style::properties::longhands::font_family::computed_value","",null,null],[12,"name","","",550,null],[12,"syntax","","",550,null],[3,"T","","",null,null],[12,"0","","",551,null],[4,"FontFamily","","",null,null],[13,"FamilyName","","",552,null],[13,"Generic","","",552,null],[4,"FamilyNameSyntax","","",null,null],[13,"Quoted","","The family name was specified in a quoted form, e.g. \"Font Name\" or 'Font Name'.",553,null],[13,"Identifiers","","The family name was specified in an unquoted form as a sequence of identifiers.  The `String` is the serialization of the sequence of identifiers.",553,null],[11,"clone","","",552,{"inputs":[{"name":"self"}],"output":{"name":"fontfamily"}}],[11,"fmt","","",552,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",552,null],[11,"eq","","",552,{"inputs":[{"name":"self"},{"name":"fontfamily"}],"output":{"name":"bool"}}],[11,"ne","","",552,{"inputs":[{"name":"self"},{"name":"fontfamily"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",552,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",550,{"inputs":[{"name":"self"}],"output":{"name":"familyname"}}],[11,"fmt","","",550,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",550,null],[11,"eq","","",550,{"inputs":[{"name":"self"},{"name":"familyname"}],"output":{"name":"bool"}}],[11,"ne","","",550,{"inputs":[{"name":"self"},{"name":"familyname"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",550,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",553,{"inputs":[{"name":"self"}],"output":{"name":"familynamesyntax"}}],[11,"fmt","","",553,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",553,null],[11,"eq","","",553,{"inputs":[{"name":"self"},{"name":"familynamesyntax"}],"output":{"name":"bool"}}],[11,"ne","","",553,{"inputs":[{"name":"self"},{"name":"familynamesyntax"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",553,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"atom","","",552,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"name","","",552,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_atom","","",552,{"inputs":[{"name":"atom"}],"output":{"name":"fontfamily"}}],[11,"parse","","Parse a font-family value",552,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",550,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",552,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",551,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",551,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",551,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",551,null],[11,"eq","","",551,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",551,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",551,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","style::properties::longhands::font_family","",549,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",549,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",549,null],[11,"eq","","",549,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",549,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",549,null],[11,"from_computed_value","","",549,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"system_font","","",549,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",549,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse","","",549,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",549,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","style::properties::longhands::font_family::computed_value","",550,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"font_style","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-style",null,null],[4,"SpecifiedValue","style::properties::longhands::font_style","",null,null],[13,"Keyword","","",554,null],[13,"System","","",554,null],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::font_style::computed_value","",null,null],[13,"normal","","",555,null],[13,"italic","","",555,null],[13,"oblique","","",555,null],[11,"clone","","",555,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",555,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",555,null],[11,"eq","","",555,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",555,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",555,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",555,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",555,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",555,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::font_style","",554,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",554,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",554,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",554,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",554,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",554,null],[11,"from_computed_value","","",554,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"system_font","","",554,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",554,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"font_variant_caps","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-variant-caps",null,null],[4,"SpecifiedValue","style::properties::longhands::font_variant_caps","",null,null],[13,"Keyword","","",556,null],[13,"System","","",556,null],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::font_variant_caps::computed_value","",null,null],[13,"normal","","",557,null],[13,"small_caps","","",557,null],[11,"clone","","",557,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",557,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",557,null],[11,"eq","","",557,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",557,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",557,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",557,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",557,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",557,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::font_variant_caps","",556,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",556,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",556,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",556,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",556,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",556,null],[11,"from_computed_value","","",556,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"system_font","","",556,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",556,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"font_weight","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-weight",null,null],[4,"SpecifiedValue","style::properties::longhands::font_weight","",null,null],[13,"Normal","","",558,null],[13,"Bold","","",558,null],[13,"Bolder","","",558,null],[13,"Lighter","","",558,null],[13,"Weight","","",558,null],[13,"System","","",558,null],[5,"parse","","normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::font_weight::computed_value","As of CSS Fonts Module Level 3, only the following values are valid: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900",null,null],[12,"0","","",559,null],[11,"clone","","",559,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"compute_squared_distance","","",559,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",559,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",559,null],[11,"eq","","",559,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",559,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_css","","",559,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",559,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"normal","","Value for normal",559,{"inputs":[],"output":{"name":"self"}}],[11,"bold","","Value for bold",559,{"inputs":[],"output":{"name":"self"}}],[11,"from_int","","Convert from an integer to Weight",559,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"from_gecko_weight","","Convert from an Gecko weight",559,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"is_bold","","Weither this weight is bold",559,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bolder","","Return the bolder weight",559,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lighter","","Returns the lighter weight",559,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"heap_size_of_children","style::properties::longhands::font_weight","",558,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",558,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",558,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",558,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",558,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",558,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_gecko_keyword","","",558,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"system_font","","",558,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",558,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse","style::properties::longhands::font_weight::computed_value","",559,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","style::properties::longhands::font_weight","",558,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",558,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"font_size","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-size",null,null],[4,"SpecifiedValue","style::properties::longhands::font_size","",null,null],[13,"Length","","",560,null],[13,"Keyword","","A keyword value, along with a ratio and absolute offset. The ratio in any specified keyword value will be 1 (with offset 0), but we cascade keywordness even after font-relative (percent and em) values have been applied, which is where the ratio comes in. The offset comes in if we cascaded a calc value, where the font-relative portion (em and percentage) will go into the ratio, and the remaining units all computed together will go into the offset. See bug 1355707.",560,null],[13,"Smaller","","",560,null],[13,"Larger","","",560,null],[13,"System","","",560,null],[4,"KeywordSize","","CSS font keywords",null,null],[13,"XXSmall","","",561,null],[13,"XSmall","","",561,null],[13,"Small","","",561,null],[13,"Medium","","",561,null],[13,"Large","","",561,null],[13,"XLarge","","",561,null],[13,"XXLarge","","",561,null],[13,"XXXLarge","","",561,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse",""," |  | <absolute-size> | <relative-size>",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_quirky","","Parses a font-size, with quirks.",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"},{"name":"allowquirks"}],"output":{"name":"result"}}],[5,"cascade_specified_font_size","","",null,{"inputs":[{"name":"context"},{"name":"specifiedvalue"},{"name":"nonnegativelength"}],"output":null}],[5,"cascade_inherit_font_size","","FIXME(emilio): This is very complex. Also, it should move to StyleBuilder.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"cascade_initial_font_size","","Cascade the initial value for the `font-size` property.",null,{"inputs":[{"name":"context"}],"output":null}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[6,"T","style::properties::longhands::font_size::computed_value","",null,null],[11,"to_css","style::properties::longhands::font_size","",560,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",560,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",560,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",560,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",560,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",560,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","",560,{"inputs":[{"name":"lengthorpercentage"}],"output":{"name":"self"}}],[11,"clone","","",561,{"inputs":[{"name":"self"}],"output":{"name":"keywordsize"}}],[11,"fmt","","",561,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",561,{"inputs":[{"name":"self"},{"name":"keywordsize"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",561,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",561,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"html_size","","",561,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"default","","",561,{"inputs":[],"output":{"name":"self"}}],[11,"to_css","","",561,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",561,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",561,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_html_size","","https://html.spec.whatwg.org/multipage/#rules-for-parsing-a-legacy-font-size",560,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"as_font_ratio","","If this value is specified as a ratio of the parent font (em units or percent) return the ratio",560,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"option"}}],[11,"to_computed_value_against","","Compute it against a given base font size",560,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontbasesize"}],"output":{"name":"nonnegativelength"}}],[11,"to_computed_value","","",560,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",560,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"system_font","","",560,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",560,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"font_stretch","style::properties::longhands","https://drafts.csswg.org/css-fonts/#propdef-font-stretch",null,null],[4,"SpecifiedValue","style::properties::longhands::font_stretch","",null,null],[13,"Keyword","","",562,null],[13,"System","","",562,null],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::font_stretch::computed_value","",null,null],[13,"normal","","",563,null],[13,"ultra_condensed","","",563,null],[13,"extra_condensed","","",563,null],[13,"condensed","","",563,null],[13,"semi_condensed","","",563,null],[13,"semi_expanded","","",563,null],[13,"expanded","","",563,null],[13,"extra_expanded","","",563,null],[13,"ultra_expanded","","",563,null],[11,"clone","","",563,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",563,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",563,null],[11,"eq","","",563,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",563,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",563,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",563,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",563,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",563,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::font_stretch","",562,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",562,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",562,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",562,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",562,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",562,null],[11,"from_computed_value","","",562,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"system_font","","",562,{"inputs":[{"name":"systemfont"}],"output":{"name":"self"}}],[11,"get_system","","",562,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"system_font","style::properties::longhands","",null,null],[4,"SystemFont","style::properties::longhands::system_font","void enum for system font, can never exist",null,null],[11,"clone","","",564,{"inputs":[{"name":"self"}],"output":{"name":"systemfont"}}],[11,"fmt","","",564,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",564,null],[11,"eq","","",564,{"inputs":[{"name":"self"},{"name":"systemfont"}],"output":{"name":"bool"}}],[11,"to_css","","",564,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",564,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","",564,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[0,"visibility","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-visibility",null,null],[5,"get_initial_value","style::properties::longhands::visibility","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::visibility::computed_value","",null,null],[13,"visible","","",565,null],[13,"hidden","","",565,null],[11,"clone","","",565,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",565,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",565,null],[11,"eq","","",565,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",565,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",565,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",565,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",565,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",565,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",565,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",565,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"writing_mode","style::properties::longhands","https://drafts.csswg.org/css-writing-modes/#propdef-writing-mode",null,null],[5,"get_initial_value","style::properties::longhands::writing_mode","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::writing_mode::computed_value","",null,null],[13,"horizontal_tb","","",566,null],[13,"vertical_rl","","",566,null],[13,"vertical_lr","","",566,null],[11,"clone","","",566,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",566,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",566,null],[11,"eq","","",566,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",566,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",566,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",566,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",566,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",566,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",566,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",566,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"direction","style::properties::longhands","https://drafts.csswg.org/css-writing-modes/#propdef-direction",null,null],[5,"get_initial_value","style::properties::longhands::direction","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::direction::computed_value","",null,null],[13,"ltr","","",567,null],[13,"rtl","","",567,null],[11,"clone","","",567,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",567,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",567,null],[11,"eq","","",567,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",567,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",567,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",567,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",567,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",567,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",567,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",567,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"image_rendering","style::properties::longhands","https://drafts.csswg.org/css-images/#propdef-image-rendering",null,null],[5,"get_initial_value","style::properties::longhands::image_rendering","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::image_rendering::computed_value","",null,null],[13,"auto","","",568,null],[13,"pixelated","","",568,null],[13,"crisp_edges","","",568,null],[11,"clone","","",568,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",568,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",568,null],[11,"eq","","",568,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",568,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",568,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",568,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",568,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",568,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",568,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",568,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"border_collapse","style::properties::longhands","https://drafts.csswg.org/css-tables/#propdef-border-collapse",null,null],[5,"get_initial_value","style::properties::longhands::border_collapse","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::border_collapse::computed_value","",null,null],[13,"separate","","",569,null],[13,"collapse","","",569,null],[11,"clone","","",569,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",569,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",569,null],[11,"eq","","",569,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",569,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",569,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",569,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",569,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",569,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",569,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",569,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"empty_cells","style::properties::longhands","https://drafts.csswg.org/css-tables/#propdef-empty-cells",null,null],[5,"get_initial_value","style::properties::longhands::empty_cells","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::empty_cells::computed_value","",null,null],[13,"show","","",570,null],[13,"hide","","",570,null],[11,"clone","","",570,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",570,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",570,null],[11,"eq","","",570,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",570,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",570,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",570,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",570,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",570,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",570,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",570,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"caption_side","style::properties::longhands","https://drafts.csswg.org/css-tables/#propdef-caption-side",null,null],[5,"get_initial_value","style::properties::longhands::caption_side","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::caption_side::computed_value","",null,null],[13,"top","","",571,null],[13,"bottom","","",571,null],[11,"clone","","",571,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",571,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",571,null],[11,"eq","","",571,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",571,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",571,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",571,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",571,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",571,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",571,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",571,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"border_spacing","style::properties::longhands","https://drafts.csswg.org/css-tables/#propdef-border-spacing",null,null],[5,"get_initial_value","style::properties::longhands::border_spacing","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"line_height","style::properties::longhands","https://drafts.csswg.org/css2/visudet.html#propdef-line-height",null,null],[5,"get_initial_value","style::properties::longhands::line_height","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"text_transform","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-text-transform",null,null],[5,"get_initial_value","style::properties::longhands::text_transform","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::text_transform::computed_value","",null,null],[13,"none","","",572,null],[13,"capitalize","","",572,null],[13,"uppercase","","",572,null],[13,"lowercase","","",572,null],[11,"clone","","",572,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",572,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",572,null],[11,"eq","","",572,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",572,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",572,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",572,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",572,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",572,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",572,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",572,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"text_indent","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-text-indent",null,null],[5,"get_initial_value","style::properties::longhands::text_indent","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"overflow_wrap","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-overflow-wrap",null,null],[5,"get_initial_value","style::properties::longhands::overflow_wrap","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::overflow_wrap::computed_value","",null,null],[13,"normal","","",573,null],[13,"break_word","","",573,null],[11,"clone","","",573,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",573,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",573,null],[11,"eq","","",573,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",573,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",573,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",573,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",573,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",573,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",573,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",573,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"word_break","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-word-break",null,null],[5,"get_initial_value","style::properties::longhands::word_break","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::word_break::computed_value","",null,null],[13,"normal","","",574,null],[13,"break_all","","",574,null],[13,"keep_all","","",574,null],[11,"clone","","",574,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",574,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",574,null],[11,"eq","","",574,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",574,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",574,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",574,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",574,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",574,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",574,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",574,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"text_justify","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-text-justify",null,null],[5,"get_initial_value","style::properties::longhands::text_justify","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::text_justify::computed_value","",null,null],[13,"auto","","",575,null],[13,"none","","",575,null],[13,"inter_word","","",575,null],[11,"clone","","",575,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",575,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",575,null],[11,"eq","","",575,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",575,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",575,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",575,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",575,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",575,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",575,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",575,{"inputs":[{"name":"t"}],"output":{"name":"specifiedvalue"}}],[0,"text_align","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-text-align",null,null],[5,"get_initial_value","style::properties::longhands::text_align","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::text_align::computed_value","",null,null],[13,"start","","",576,null],[13,"end","","",576,null],[13,"left","","",576,null],[13,"right","","",576,null],[13,"center","","",576,null],[13,"justify","","",576,null],[13,"servo_center","","",576,null],[13,"servo_left","","",576,null],[13,"servo_right","","",576,null],[11,"clone","","",576,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",576,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",576,null],[11,"eq","","",576,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",576,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",576,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",576,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",576,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_u32","","",576,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",576,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"parse","","",576,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",576,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",576,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"letter_spacing","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-letter-spacing",null,null],[5,"get_initial_value","style::properties::longhands::letter_spacing","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"word_spacing","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-word-spacing",null,null],[5,"get_initial_value","style::properties::longhands::word_spacing","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"_servo_text_decorations_in_effect","style::properties::longhands","Nonstandard (Internal property used by Servo)",null,null],[3,"SpecifiedValue","style::properties::longhands::_servo_text_decorations_in_effect","",null,null],[12,"underline","","",577,null],[12,"overline","","",577,null],[12,"line_through","","",577,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"derive_from_text_decoration","","",null,{"inputs":[{"name":"context"}],"output":null}],[5,"derive_from_display","","",null,{"inputs":[{"name":"context"}],"output":null}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[0,"computed_value","","",null,null],[6,"T","style::properties::longhands::_servo_text_decorations_in_effect::computed_value","",null,null],[11,"clone","style::properties::longhands::_servo_text_decorations_in_effect","",577,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",577,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",577,{"inputs":[],"output":{"name":"specifiedvalue"}}],[11,"eq","","",577,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",577,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",577,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_computed_value","","",577,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",577,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_css","","",577,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"white_space","style::properties::longhands","https://drafts.csswg.org/css-text/#propdef-white-space",null,null],[5,"get_initial_value","style::properties::longhands::white_space","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::white_space::computed_value","",null,null],[13,"normal","","",578,null],[13,"pre","","",578,null],[13,"nowrap","","",578,null],[13,"pre_wrap","","",578,null],[13,"pre_line","","",578,null],[11,"clone","","",578,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",578,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",578,null],[11,"eq","","",578,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",578,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",578,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",578,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",578,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",578,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",578,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",578,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allow_wrap","","",578,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"preserve_newlines","","",578,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"preserve_spaces","","",578,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"text_shadow","style::properties::longhands","https://drafts.csswg.org/css-text-decor-3/#text-shadow-property",null,null],[3,"SpecifiedValue","style::properties::longhands::text_shadow","The specified value of text-shadow.",null,null],[12,"0","","",579,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"single_value","","",null,null],[5,"parse","style::properties::longhands::text_shadow::single_value","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"computed_value","style::properties::longhands::text_shadow","The definition of the computed value for text-shadow.",null,null],[3,"T","style::properties::longhands::text_shadow::computed_value","The computed value, effectively a list of single values.",null,null],[12,"0","","",580,null],[6,"Iter","","",null,null],[11,"heap_size_of_children","","",580,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",580,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",580,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",580,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",580,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"into_iter","","",580,null],[11,"to_css","","",580,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","style::properties::longhands::text_shadow","",579,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",579,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",579,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",579,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",579,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",579,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"compute_iter","","",579,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"iter"}}],[11,"to_computed_value","","",579,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",579,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"text_rendering","style::properties::longhands","https://www.w3.org/TR/SVG11/painting.html#TextRenderingProperty",null,null],[5,"get_initial_value","style::properties::longhands::text_rendering","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::text_rendering::computed_value","",null,null],[13,"auto","","",581,null],[13,"optimizespeed","","",581,null],[13,"optimizelegibility","","",581,null],[13,"geometricprecision","","",581,null],[11,"clone","","",581,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",581,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",581,null],[11,"eq","","",581,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",581,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",581,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",581,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",581,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",581,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",581,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",581,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"list_style_position","style::properties::longhands","https://drafts.csswg.org/css-lists/#propdef-list-style-position",null,null],[5,"get_initial_value","style::properties::longhands::list_style_position","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::list_style_position::computed_value","",null,null],[13,"outside","","",582,null],[13,"inside","","",582,null],[11,"clone","","",582,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",582,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",582,null],[11,"eq","","",582,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",582,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",582,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",582,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",582,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",582,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",582,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",582,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"list_style_type","style::properties::longhands","https://drafts.csswg.org/css-lists/#propdef-list-style-type",null,null],[5,"get_initial_value","style::properties::longhands::list_style_type","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::list_style_type::computed_value","",null,null],[13,"disc","","",583,null],[13,"none","","",583,null],[13,"circle","","",583,null],[13,"square","","",583,null],[13,"decimal","","",583,null],[13,"disclosure_open","","",583,null],[13,"disclosure_closed","","",583,null],[13,"lower_alpha","","",583,null],[13,"upper_alpha","","",583,null],[13,"arabic_indic","","",583,null],[13,"bengali","","",583,null],[13,"cambodian","","",583,null],[13,"cjk_decimal","","",583,null],[13,"devanagari","","",583,null],[13,"gujarati","","",583,null],[13,"gurmukhi","","",583,null],[13,"kannada","","",583,null],[13,"khmer","","",583,null],[13,"lao","","",583,null],[13,"malayalam","","",583,null],[13,"mongolian","","",583,null],[13,"myanmar","","",583,null],[13,"oriya","","",583,null],[13,"persian","","",583,null],[13,"telugu","","",583,null],[13,"thai","","",583,null],[13,"tibetan","","",583,null],[13,"cjk_earthly_branch","","",583,null],[13,"cjk_heavenly_stem","","",583,null],[13,"lower_greek","","",583,null],[13,"hiragana","","",583,null],[13,"hiragana_iroha","","",583,null],[13,"katakana","","",583,null],[13,"katakana_iroha","","",583,null],[11,"clone","","",583,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",583,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",583,null],[11,"eq","","",583,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",583,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",583,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",583,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",583,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",583,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",583,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",583,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"list_style_image","style::properties::longhands","https://drafts.csswg.org/css-lists/#propdef-list-style-image",null,null],[5,"get_initial_value","style::properties::longhands::list_style_image","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::list_style_image::computed_value","",null,null],[12,"0","","",584,null],[11,"heap_size_of_children","","",584,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",584,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",584,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",584,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",584,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_css","","",584,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",584,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",584,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"quotes","style::properties::longhands","https://drafts.csswg.org/css-content/#propdef-quotes",null,null],[5,"get_initial_value","style::properties::longhands::quotes","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::quotes::computed_value","",null,null],[12,"0","","",585,null],[11,"heap_size_of_children","","",585,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",585,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",585,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",585,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",585,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",585,null],[11,"from_computed_value","","",585,null],[11,"to_css","","",585,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"margin_top","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-margin-top",null,null],[5,"get_initial_value","style::properties::longhands::margin_top","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_left","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-margin-left",null,null],[5,"get_initial_value","style::properties::longhands::margin_left","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_bottom","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-margin-bottom",null,null],[5,"get_initial_value","style::properties::longhands::margin_bottom","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_right","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-margin-right",null,null],[5,"get_initial_value","style::properties::longhands::margin_right","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_block_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-margin-True",null,null],[5,"get_initial_value","style::properties::longhands::margin_block_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_block_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-margin-True",null,null],[5,"get_initial_value","style::properties::longhands::margin_block_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_inline_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-margin-True",null,null],[5,"get_initial_value","style::properties::longhands::margin_inline_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"margin_inline_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-margin-True",null,null],[5,"get_initial_value","style::properties::longhands::margin_inline_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"outline_color","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-outline-color",null,null],[5,"get_initial_value","style::properties::longhands::outline_color","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"outline_style","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-outline-style",null,null],[5,"get_initial_value","style::properties::longhands::outline_style","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[6,"T","style::properties::longhands::outline_style::computed_value","",null,null],[6,"SpecifiedValue","style::properties::longhands::outline_style","",null,null],[11,"none_or_hidden","","",586,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"outline_width","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-outline-width",null,null],[5,"get_initial_value","style::properties::longhands::outline_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"outline_offset","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-outline-offset",null,null],[5,"get_initial_value","style::properties::longhands::outline_offset","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_top","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-padding-top",null,null],[5,"get_initial_value","style::properties::longhands::padding_top","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_left","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-padding-left",null,null],[5,"get_initial_value","style::properties::longhands::padding_left","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_bottom","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-padding-bottom",null,null],[5,"get_initial_value","style::properties::longhands::padding_bottom","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_right","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-padding-right",null,null],[5,"get_initial_value","style::properties::longhands::padding_right","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_block_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-padding-True",null,null],[5,"get_initial_value","style::properties::longhands::padding_block_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_block_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-padding-True",null,null],[5,"get_initial_value","style::properties::longhands::padding_block_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_inline_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-padding-True",null,null],[5,"get_initial_value","style::properties::longhands::padding_inline_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"padding_inline_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-padding-True",null,null],[5,"get_initial_value","style::properties::longhands::padding_inline_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"cursor","style::properties::longhands","https://drafts.csswg.org/css-ui/#cursor",null,null],[5,"get_initial_value","style::properties::longhands::cursor","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"Keyword","style::properties::longhands::cursor::computed_value","",null,null],[13,"Auto","","",587,null],[13,"Cursor","","",587,null],[6,"T","","",null,null],[11,"heap_size_of_children","","",587,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",587,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"fmt","","",587,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",587,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",587,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"to_computed_value","","",587,null],[11,"from_computed_value","","",587,null],[11,"to_css","","",587,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",587,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"pointer_events","style::properties::longhands","https://www.w3.org/TR/SVG11/interact.html#PointerEventsProperty",null,null],[5,"get_initial_value","style::properties::longhands::pointer_events","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::pointer_events::computed_value","",null,null],[13,"auto","","",588,null],[13,"none","","",588,null],[11,"clone","","",588,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",588,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",588,null],[11,"eq","","",588,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",588,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",588,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",588,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",588,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",588,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",588,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",588,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"top","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#propdef-top",null,null],[5,"get_initial_value","style::properties::longhands::top","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"left","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#propdef-left",null,null],[5,"get_initial_value","style::properties::longhands::left","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"bottom","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#propdef-bottom",null,null],[5,"get_initial_value","style::properties::longhands::bottom","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"right","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#propdef-right",null,null],[5,"get_initial_value","style::properties::longhands::right","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"offset_block_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-offset-block-start",null,null],[5,"get_initial_value","style::properties::longhands::offset_block_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"offset_block_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-offset-block-end",null,null],[5,"get_initial_value","style::properties::longhands::offset_block_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"offset_inline_start","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-offset-inline-start",null,null],[5,"get_initial_value","style::properties::longhands::offset_inline_start","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"offset_inline_end","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-offset-inline-end",null,null],[5,"get_initial_value","style::properties::longhands::offset_inline_end","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"z_index","style::properties::longhands","https://www.w3.org/TR/CSS2/visuren.html#z-index",null,null],[5,"get_initial_value","style::properties::longhands::z_index","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"flex_direction","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#flex-direction-property",null,null],[5,"get_initial_value","style::properties::longhands::flex_direction","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::flex_direction::computed_value","",null,null],[13,"row","","",589,null],[13,"row_reverse","","",589,null],[13,"column","","",589,null],[13,"column_reverse","","",589,null],[11,"clone","","",589,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",589,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",589,null],[11,"eq","","",589,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",589,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",589,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",589,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",589,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",589,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",589,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",589,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"flex_wrap","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#flex-wrap-property",null,null],[5,"get_initial_value","style::properties::longhands::flex_wrap","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::flex_wrap::computed_value","",null,null],[13,"nowrap","","",590,null],[13,"wrap","","",590,null],[13,"wrap_reverse","","",590,null],[11,"clone","","",590,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",590,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",590,null],[11,"eq","","",590,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",590,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",590,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",590,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",590,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",590,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",590,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",590,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"justify_content","style::properties::longhands","https://drafts.csswg.org/css-align/#propdef-justify-content",null,null],[5,"get_initial_value","style::properties::longhands::justify_content","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::justify_content::computed_value","",null,null],[13,"flex_start","","",591,null],[13,"stretch","","",591,null],[13,"flex_end","","",591,null],[13,"center","","",591,null],[13,"space_between","","",591,null],[13,"space_around","","",591,null],[11,"clone","","",591,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",591,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",591,null],[11,"eq","","",591,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",591,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",591,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",591,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",591,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",591,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",591,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",591,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"align_content","style::properties::longhands","https://drafts.csswg.org/css-align/#propdef-align-content",null,null],[5,"get_initial_value","style::properties::longhands::align_content","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::align_content::computed_value","",null,null],[13,"stretch","","",592,null],[13,"flex_start","","",592,null],[13,"flex_end","","",592,null],[13,"center","","",592,null],[13,"space_between","","",592,null],[13,"space_around","","",592,null],[11,"clone","","",592,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",592,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",592,null],[11,"eq","","",592,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",592,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",592,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",592,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",592,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",592,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",592,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",592,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"align_items","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#align-items-property",null,null],[5,"get_initial_value","style::properties::longhands::align_items","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::align_items::computed_value","",null,null],[13,"stretch","","",593,null],[13,"flex_start","","",593,null],[13,"flex_end","","",593,null],[13,"center","","",593,null],[13,"baseline","","",593,null],[11,"clone","","",593,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",593,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",593,null],[11,"eq","","",593,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",593,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",593,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",593,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",593,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",593,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",593,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",593,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"flex_grow","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#flex-grow-property",null,null],[5,"get_initial_value","style::properties::longhands::flex_grow","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"flex_shrink","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#flex-shrink-property",null,null],[5,"get_initial_value","style::properties::longhands::flex_shrink","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"align_self","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#propdef-align-self",null,null],[5,"get_initial_value","style::properties::longhands::align_self","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::align_self::computed_value","",null,null],[13,"auto","","",594,null],[13,"stretch","","",594,null],[13,"flex_start","","",594,null],[13,"flex_end","","",594,null],[13,"center","","",594,null],[13,"baseline","","",594,null],[11,"clone","","",594,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",594,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",594,null],[11,"eq","","",594,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",594,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",594,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",594,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",594,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",594,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",594,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",594,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"order","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#order-property",null,null],[5,"get_initial_value","style::properties::longhands::order","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"flex_basis","style::properties::longhands","https://drafts.csswg.org/css-flexbox/#flex-basis-property",null,null],[5,"get_initial_value","style::properties::longhands::flex_basis","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"width","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-width",null,null],[5,"get_initial_value","style::properties::longhands::width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"min_width","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-min-width",null,null],[5,"get_initial_value","style::properties::longhands::min_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"max_width","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-min-width",null,null],[5,"get_initial_value","style::properties::longhands::max_width","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"height","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-height",null,null],[5,"get_initial_value","style::properties::longhands::height","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"min_height","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-min-height",null,null],[5,"get_initial_value","style::properties::longhands::min_height","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"max_height","style::properties::longhands","https://drafts.csswg.org/css-box/#propdef-min-height",null,null],[5,"get_initial_value","style::properties::longhands::max_height","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"block_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-block-size",null,null],[5,"get_initial_value","style::properties::longhands::block_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"min_block_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-min-block-size",null,null],[5,"get_initial_value","style::properties::longhands::min_block_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"max_block_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-min-block-size",null,null],[5,"get_initial_value","style::properties::longhands::max_block_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"inline_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-inline-size",null,null],[5,"get_initial_value","style::properties::longhands::inline_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"min_inline_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-min-inline-size",null,null],[5,"get_initial_value","style::properties::longhands::min_inline_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"max_inline_size","style::properties::longhands","https://drafts.csswg.org/css-logical-props/#propdef-min-inline-size",null,null],[5,"get_initial_value","style::properties::longhands::max_inline_size","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[0,"box_sizing","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-box-sizing",null,null],[5,"get_initial_value","style::properties::longhands::box_sizing","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::box_sizing::computed_value","",null,null],[13,"content_box","","",595,null],[13,"border_box","","",595,null],[11,"clone","","",595,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",595,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",595,null],[11,"eq","","",595,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",595,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",595,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",595,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",595,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",595,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",595,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",595,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"table_layout","style::properties::longhands","https://drafts.csswg.org/css-tables/#propdef-table-layout",null,null],[5,"get_initial_value","style::properties::longhands::table_layout","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::table_layout::computed_value","",null,null],[13,"auto","","",596,null],[13,"fixed","","",596,null],[11,"clone","","",596,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",596,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",596,null],[11,"eq","","",596,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",596,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",596,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",596,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",596,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",596,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",596,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",596,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"text_overflow","style::properties::longhands","https://drafts.csswg.org/css-ui/#propdef-text-overflow",null,null],[3,"SpecifiedValue","style::properties::longhands::text_overflow","",null,null],[12,"first","","",597,null],[12,"second","","",597,null],[4,"Side","","",null,null],[13,"Clip","","",598,null],[13,"Ellipsis","","",598,null],[13,"String","","",598,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[3,"T","style::properties::longhands::text_overflow::computed_value","",null,null],[12,"first","","",599,null],[12,"second","","",599,null],[12,"sides_are_logical","","",599,null],[11,"clone","","",599,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",599,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",599,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"ne","","",599,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",599,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","style::properties::longhands::text_overflow","",598,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",598,{"inputs":[{"name":"self"}],"output":{"name":"side"}}],[11,"fmt","","",598,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",598,{"inputs":[{"name":"self"},{"name":"side"}],"output":{"name":"bool"}}],[11,"ne","","",598,{"inputs":[{"name":"self"},{"name":"side"}],"output":{"name":"bool"}}],[11,"to_css","","",598,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",597,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",597,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"fmt","","",597,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",597,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",597,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",597,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","style::properties::longhands::text_overflow::computed_value","",599,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","style::properties::longhands::text_overflow","",597,null],[11,"from_computed_value","","",597,null],[11,"parse","","",598,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"unicode_bidi","style::properties::longhands","https://drafts.csswg.org/css-writing-modes/#propdef-unicode-bidi",null,null],[5,"get_initial_value","style::properties::longhands::unicode_bidi","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[4,"T","style::properties::longhands::unicode_bidi::computed_value","",null,null],[13,"normal","","",600,null],[13,"embed","","",600,null],[13,"isolate","","",600,null],[13,"bidi_override","","",600,null],[13,"isolate_override","","",600,null],[13,"plaintext","","",600,null],[11,"clone","","",600,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",600,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",600,null],[11,"eq","","",600,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",600,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",600,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",600,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",600,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","",600,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_computed_value","","",600,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"t"}}],[11,"from_computed_value","","",600,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"text_decoration_line","style::properties::longhands","https://drafts.csswg.org/css-text-decor/#propdef-text-decoration-line",null,null],[3,"SpecifiedValue","style::properties::longhands::text_decoration_line","",null,null],[5,"get_initial_value","","",null,{"inputs":[],"output":{"name":"t"}}],[5,"get_initial_specified_value","","",null,{"inputs":[],"output":{"name":"specifiedvalue"}}],[5,"parse","","none | [ underline || overline || line-through || blink ]",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"cascade_property","","",null,{"inputs":[{"name":"propertydeclaration"},{"name":"context"}],"output":null}],[5,"parse_specified","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_declared","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"computed_value","","",null,null],[6,"T","style::properties::longhands::text_decoration_line::computed_value","",null,null],[17,"none","","",null,null],[17,"NONE","style::properties::longhands::text_decoration_line","",null,null],[17,"UNDERLINE","","",null,null],[17,"OVERLINE","","",null,null],[17,"LINE_THROUGH","","",null,null],[17,"BLINK","","",null,null],[11,"eq","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",601,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"partial_cmp","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"option"}}],[11,"lt","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"le","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"gt","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"ge","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"cmp","","",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"ordering"}}],[11,"hash","","",601,null],[11,"heap_size_of_children","","",601,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_computed_value","","",601,null],[11,"from_computed_value","","",601,null],[11,"fmt","","",601,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",601,{"inputs":[],"output":{"name":"specifiedvalue"}}],[11,"all","","Returns the set containing all flags.",601,{"inputs":[],"output":{"name":"specifiedvalue"}}],[11,"bits","","Returns the raw value of the flags currently stored.",601,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",601,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",601,{"inputs":[{"name":"u8"}],"output":{"name":"specifiedvalue"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",601,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"specifiedvalue"}}],[11,"bitor_assign","","Adds the set of flags.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"specifiedvalue"}}],[11,"bitxor_assign","","Toggles the set of flags.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"specifiedvalue"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":{"name":"specifiedvalue"}}],[11,"sub_assign","","Disables all flags enabled in the set.",601,{"inputs":[{"name":"self"},{"name":"specifiedvalue"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",601,{"inputs":[{"name":"self"}],"output":{"name":"specifiedvalue"}}],[11,"extend","","",601,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",601,{"inputs":[{"name":"t"}],"output":{"name":"specifiedvalue"}}],[11,"to_css","","",601,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"shorthands","style::properties","A module with code for all the shorthand css properties, and a few serialization helpers.",null,null],[5,"parse_border","style::properties::shorthands","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[0,"background","","https://drafts.csswg.org/css-backgrounds/#the-background",null,null],[3,"Longhands","style::properties::shorthands::background","",null,null],[12,"background_color","","",602,null],[12,"background_position_x","","",602,null],[12,"background_position_y","","",602,null],[12,"background_repeat","","",602,null],[12,"background_attachment","","",602,null],[12,"background_image","","",602,null],[12,"background_size","","",602,null],[12,"background_origin","","",602,null],[12,"background_clip","","",602,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"background_color","","",603,null],[12,"background_position_x","","",603,null],[12,"background_position_y","","",603,null],[12,"background_repeat","","",603,null],[12,"background_attachment","","",603,null],[12,"background_image","","",603,null],[12,"background_size","","",603,null],[12,"background_origin","","",603,null],[12,"background_clip","","",603,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",603,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from","style::properties::longhands::background_clip::single_value::computed_value","",485,{"inputs":[{"name":"specifiedvalue"}],"output":{"name":"specifiedvalue"}}],[11,"to_css","style::properties::shorthands::background","",603,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"background_position","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds-4/#the-background-position",null,null],[3,"Longhands","style::properties::shorthands::background_position","",null,null],[12,"background_position_x","","",604,null],[12,"background_position_y","","",604,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"background_position_x","","",605,null],[12,"background_position_y","","",605,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",605,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",605,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_color","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-color",null,null],[3,"Longhands","style::properties::shorthands::border_color","",null,null],[12,"border_top_color","","",606,null],[12,"border_right_color","","",606,null],[12,"border_bottom_color","","",606,null],[12,"border_left_color","","",606,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_color","","",607,null],[12,"border_right_color","","",607,null],[12,"border_bottom_color","","",607,null],[12,"border_left_color","","",607,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",607,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",607,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_style","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-style",null,null],[3,"Longhands","style::properties::shorthands::border_style","",null,null],[12,"border_top_style","","",608,null],[12,"border_right_style","","",608,null],[12,"border_bottom_style","","",608,null],[12,"border_left_style","","",608,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_style","","",609,null],[12,"border_right_style","","",609,null],[12,"border_bottom_style","","",609,null],[12,"border_left_style","","",609,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",609,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",609,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_width","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-width",null,null],[3,"Longhands","style::properties::shorthands::border_width","",null,null],[12,"border_top_width","","",610,null],[12,"border_left_width","","",610,null],[12,"border_bottom_width","","",610,null],[12,"border_right_width","","",610,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_width","","",611,null],[12,"border_left_width","","",611,null],[12,"border_bottom_width","","",611,null],[12,"border_right_width","","",611,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",611,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",611,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_top","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-top",null,null],[3,"Longhands","style::properties::shorthands::border_top","",null,null],[12,"border_top_color","","",612,null],[12,"border_top_style","","",612,null],[12,"border_top_width","","",612,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_color","","",613,null],[12,"border_top_style","","",613,null],[12,"border_top_width","","",613,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",613,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",613,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_left","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-left",null,null],[3,"Longhands","style::properties::shorthands::border_left","",null,null],[12,"border_left_color","","",614,null],[12,"border_left_style","","",614,null],[12,"border_left_width","","",614,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_left_color","","",615,null],[12,"border_left_style","","",615,null],[12,"border_left_width","","",615,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",615,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",615,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_bottom","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-bottom",null,null],[3,"Longhands","style::properties::shorthands::border_bottom","",null,null],[12,"border_bottom_color","","",616,null],[12,"border_bottom_style","","",616,null],[12,"border_bottom_width","","",616,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_bottom_color","","",617,null],[12,"border_bottom_style","","",617,null],[12,"border_bottom_width","","",617,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",617,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",617,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_right","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-right",null,null],[3,"Longhands","style::properties::shorthands::border_right","",null,null],[12,"border_right_color","","",618,null],[12,"border_right_style","","",618,null],[12,"border_right_width","","",618,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_right_color","","",619,null],[12,"border_right_style","","",619,null],[12,"border_right_width","","",619,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",619,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",619,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_block_start","style::properties::shorthands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-start",null,null],[3,"Longhands","style::properties::shorthands::border_block_start","",null,null],[12,"border_block_start_color","","",620,null],[12,"border_block_start_style","","",620,null],[12,"border_block_start_width","","",620,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_block_start_color","","",621,null],[12,"border_block_start_style","","",621,null],[12,"border_block_start_width","","",621,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",621,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",621,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_block_end","style::properties::shorthands","https://drafts.csswg.org/css-logical-props/#propdef-border-block-end",null,null],[3,"Longhands","style::properties::shorthands::border_block_end","",null,null],[12,"border_block_end_color","","",622,null],[12,"border_block_end_style","","",622,null],[12,"border_block_end_width","","",622,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_block_end_color","","",623,null],[12,"border_block_end_style","","",623,null],[12,"border_block_end_width","","",623,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",623,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",623,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_inline_start","style::properties::shorthands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-start",null,null],[3,"Longhands","style::properties::shorthands::border_inline_start","",null,null],[12,"border_inline_start_color","","",624,null],[12,"border_inline_start_style","","",624,null],[12,"border_inline_start_width","","",624,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_inline_start_color","","",625,null],[12,"border_inline_start_style","","",625,null],[12,"border_inline_start_width","","",625,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",625,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",625,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_inline_end","style::properties::shorthands","https://drafts.csswg.org/css-logical-props/#propdef-border-inline-end",null,null],[3,"Longhands","style::properties::shorthands::border_inline_end","",null,null],[12,"border_inline_end_color","","",626,null],[12,"border_inline_end_style","","",626,null],[12,"border_inline_end_width","","",626,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_inline_end_color","","",627,null],[12,"border_inline_end_style","","",627,null],[12,"border_inline_end_width","","",627,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",627,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",627,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border",null,null],[3,"Longhands","style::properties::shorthands::border","",null,null],[12,"border_top_color","","",628,null],[12,"border_top_style","","",628,null],[12,"border_top_width","","",628,null],[12,"border_left_color","","",628,null],[12,"border_left_style","","",628,null],[12,"border_left_width","","",628,null],[12,"border_bottom_color","","",628,null],[12,"border_bottom_style","","",628,null],[12,"border_bottom_width","","",628,null],[12,"border_right_color","","",628,null],[12,"border_right_style","","",628,null],[12,"border_right_width","","",628,null],[12,"border_image_outset","","",628,null],[12,"border_image_repeat","","",628,null],[12,"border_image_slice","","",628,null],[12,"border_image_source","","",628,null],[12,"border_image_width","","",628,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_color","","",629,null],[12,"border_top_style","","",629,null],[12,"border_top_width","","",629,null],[12,"border_left_color","","",629,null],[12,"border_left_style","","",629,null],[12,"border_left_width","","",629,null],[12,"border_bottom_color","","",629,null],[12,"border_bottom_style","","",629,null],[12,"border_bottom_width","","",629,null],[12,"border_right_color","","",629,null],[12,"border_right_style","","",629,null],[12,"border_right_width","","",629,null],[12,"border_image_outset","","",629,null],[12,"border_image_repeat","","",629,null],[12,"border_image_slice","","",629,null],[12,"border_image_source","","",629,null],[12,"border_image_width","","",629,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",629,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",629,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_radius","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds/#border-radius",null,null],[3,"Longhands","style::properties::shorthands::border_radius","",null,null],[12,"border_top_left_radius","","",630,null],[12,"border_top_right_radius","","",630,null],[12,"border_bottom_right_radius","","",630,null],[12,"border_bottom_left_radius","","",630,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_top_left_radius","","",631,null],[12,"border_top_right_radius","","",631,null],[12,"border_bottom_right_radius","","",631,null],[12,"border_bottom_left_radius","","",631,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",631,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",631,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"border_image","style::properties::shorthands","https://drafts.csswg.org/css-backgrounds-3/#border-image",null,null],[3,"Longhands","style::properties::shorthands::border_image","",null,null],[12,"border_image_outset","","",632,null],[12,"border_image_repeat","","",632,null],[12,"border_image_slice","","",632,null],[12,"border_image_source","","",632,null],[12,"border_image_width","","",632,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"border_image_outset","","",633,null],[12,"border_image_repeat","","",633,null],[12,"border_image_slice","","",633,null],[12,"border_image_source","","",633,null],[12,"border_image_width","","",633,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",633,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",633,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"overflow","style::properties::shorthands","https://drafts.csswg.org/css-overflow/#propdef-overflow",null,null],[3,"Longhands","style::properties::shorthands::overflow","",null,null],[12,"overflow_x","","",634,null],[12,"overflow_y","","",634,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"overflow_x","","",635,null],[12,"overflow_y","","",635,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",635,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",635,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"transition","style::properties::shorthands","https://drafts.csswg.org/css-transitions/#propdef-transition",null,null],[3,"Longhands","style::properties::shorthands::transition","",null,null],[12,"transition_property","","",636,null],[12,"transition_duration","","",636,null],[12,"transition_timing_function","","",636,null],[12,"transition_delay","","",636,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"transition_property","","",637,null],[12,"transition_duration","","",637,null],[12,"transition_timing_function","","",637,null],[12,"transition_delay","","",637,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",637,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",637,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"animation","style::properties::shorthands","https://drafts.csswg.org/css-animations/#propdef-animation",null,null],[3,"Longhands","style::properties::shorthands::animation","",null,null],[12,"animation_name","","",638,null],[12,"animation_duration","","",638,null],[12,"animation_timing_function","","",638,null],[12,"animation_delay","","",638,null],[12,"animation_iteration_count","","",638,null],[12,"animation_direction","","",638,null],[12,"animation_fill_mode","","",638,null],[12,"animation_play_state","","",638,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"animation_name","","",639,null],[12,"animation_duration","","",639,null],[12,"animation_timing_function","","",639,null],[12,"animation_delay","","",639,null],[12,"animation_iteration_count","","",639,null],[12,"animation_direction","","",639,null],[12,"animation_fill_mode","","",639,null],[12,"animation_play_state","","",639,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",639,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",639,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"columns","style::properties::shorthands","https://drafts.csswg.org/css-multicol/#propdef-columns",null,null],[3,"Longhands","style::properties::shorthands::columns","",null,null],[12,"column_width","","",640,null],[12,"column_count","","",640,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"column_width","","",641,null],[12,"column_count","","",641,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",641,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",641,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"font","style::properties::shorthands","https://drafts.csswg.org/css-fonts-3/#propdef-font",null,null],[3,"Longhands","style::properties::shorthands::font","",null,null],[12,"font_style","","",642,null],[12,"font_variant_caps","","",642,null],[12,"font_weight","","",642,null],[12,"font_stretch","","",642,null],[12,"font_size","","",642,null],[12,"line_height","","",642,null],[12,"font_family","","",642,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"font_style","","",643,null],[12,"font_variant_caps","","",643,null],[12,"font_weight","","",643,null],[12,"font_stretch","","",643,null],[12,"font_size","","",643,null],[12,"line_height","","",643,null],[12,"font_family","","",643,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",643,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",643,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"font_variant","style::properties::shorthands","https://drafts.csswg.org/css-fonts-3/#propdef-font-variant",null,null],[3,"Longhands","style::properties::shorthands::font_variant","",null,null],[12,"font_variant_caps","","",644,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"font_variant_caps","","",645,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",645,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",645,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"list_style","style::properties::shorthands","https://drafts.csswg.org/css-lists/#propdef-list-style",null,null],[3,"Longhands","style::properties::shorthands::list_style","",null,null],[12,"list_style_position","","",646,null],[12,"list_style_image","","",646,null],[12,"list_style_type","","",646,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"list_style_position","","",647,null],[12,"list_style_image","","",647,null],[12,"list_style_type","","",647,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",647,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",647,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"margin","style::properties::shorthands","https://drafts.csswg.org/css-box/#propdef-margin",null,null],[3,"Longhands","style::properties::shorthands::margin","",null,null],[12,"margin_top","","",648,null],[12,"margin_right","","",648,null],[12,"margin_bottom","","",648,null],[12,"margin_left","","",648,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"margin_top","","",649,null],[12,"margin_right","","",649,null],[12,"margin_bottom","","",649,null],[12,"margin_left","","",649,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",649,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",649,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"outline","style::properties::shorthands","https://drafts.csswg.org/css-ui/#propdef-outline",null,null],[3,"Longhands","style::properties::shorthands::outline","",null,null],[12,"outline_width","","",650,null],[12,"outline_style","","",650,null],[12,"outline_color","","",650,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"outline_width","","",651,null],[12,"outline_style","","",651,null],[12,"outline_color","","",651,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",651,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",651,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"padding","style::properties::shorthands","https://drafts.csswg.org/css-box-3/#propdef-padding",null,null],[3,"Longhands","style::properties::shorthands::padding","",null,null],[12,"padding_top","","",652,null],[12,"padding_right","","",652,null],[12,"padding_bottom","","",652,null],[12,"padding_left","","",652,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"padding_top","","",653,null],[12,"padding_right","","",653,null],[12,"padding_bottom","","",653,null],[12,"padding_left","","",653,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",653,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",653,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"flex_flow","style::properties::shorthands","https://drafts.csswg.org/css-flexbox/#flex-flow-property",null,null],[3,"Longhands","style::properties::shorthands::flex_flow","",null,null],[12,"flex_direction","","",654,null],[12,"flex_wrap","","",654,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"flex_direction","","",655,null],[12,"flex_wrap","","",655,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",655,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",655,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"flex","style::properties::shorthands","https://drafts.csswg.org/css-flexbox/#flex-property",null,null],[3,"Longhands","style::properties::shorthands::flex","",null,null],[12,"flex_grow","","",656,null],[12,"flex_shrink","","",656,null],[12,"flex_basis","","",656,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"flex_grow","","",657,null],[12,"flex_shrink","","",657,null],[12,"flex_basis","","",657,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",657,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",657,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"text_decoration","style::properties::shorthands","https://drafts.csswg.org/css-text-decor/#propdef-text-decoration",null,null],[3,"Longhands","style::properties::shorthands::text_decoration","",null,null],[12,"text_decoration_line","","",658,null],[3,"LonghandsToSerialize","","Represents a serializable set of all of the longhand properties that correspond to a shorthand.",null,null],[12,"text_decoration_line","","",659,null],[5,"parse_into","","Parse the given shorthand and fill the result into the `declarations` vector.",null,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_value","","",null,{"inputs":[{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"from_iter","","Tries to get a serializable set of longhands given a set of property declarations.",659,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"to_css","","",659,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"animated_properties","style::properties","A module with all the code related to animated properties.",null,null],[3,"InnerMatrix2D","style::properties::animated_properties","A 2d matrix for interpolation.",null,null],[12,"m11","","",660,null],[12,"m12","","",660,null],[12,"m21","","",660,null],[12,"m22","","",660,null],[3,"Translate2D","","A 2d translation function.",null,null],[3,"Scale2D","","A 2d scale function.",null,null],[3,"MatrixDecomposed2D","","A decomposed 2d matrix.",null,null],[12,"translate","","The translation function.",661,null],[12,"scale","","The scale function.",661,null],[12,"angle","","The rotation angle.",661,null],[12,"matrix","","The inner matrix.",661,null],[3,"Translate3D","","A 3d translation.",null,null],[3,"Scale3D","","A 3d scale function.",null,null],[3,"Skew","","A 3d skew function.",null,null],[3,"Perspective","","A 3d perspective transformation.",null,null],[3,"Quaternion","","A quaternion used to represent a rotation.",null,null],[3,"MatrixDecomposed3D","","A decomposed 3d matrix.",null,null],[12,"translate","","A translation function.",662,null],[12,"scale","","A scale function.",662,null],[12,"skew","","The skew component of the transformation.",662,null],[12,"perspective","","The perspective component of the transformation.",662,null],[12,"quaternion","","The quaternion used to represent the rotation.",662,null],[4,"AnimatableLonghand","","A longhand property whose animation type is not \"none\".",null,null],[13,"BackgroundColor","","background-color",663,null],[13,"BackgroundImage","","background-image",663,null],[13,"BackgroundPositionX","","background-position-x",663,null],[13,"BackgroundPositionY","","background-position-y",663,null],[13,"BackgroundRepeat","","background-repeat",663,null],[13,"BackgroundAttachment","","background-attachment",663,null],[13,"BackgroundClip","","background-clip",663,null],[13,"BackgroundOrigin","","background-origin",663,null],[13,"BackgroundSize","","background-size",663,null],[13,"BorderTopColor","","border-top-color",663,null],[13,"BorderTopStyle","","border-top-style",663,null],[13,"BorderTopWidth","","border-top-width",663,null],[13,"BorderLeftColor","","border-left-color",663,null],[13,"BorderLeftStyle","","border-left-style",663,null],[13,"BorderLeftWidth","","border-left-width",663,null],[13,"BorderBottomColor","","border-bottom-color",663,null],[13,"BorderBottomStyle","","border-bottom-style",663,null],[13,"BorderBottomWidth","","border-bottom-width",663,null],[13,"BorderRightColor","","border-right-color",663,null],[13,"BorderRightStyle","","border-right-style",663,null],[13,"BorderRightWidth","","border-right-width",663,null],[13,"BorderTopLeftRadius","","border-top-left-radius",663,null],[13,"BorderTopRightRadius","","border-top-right-radius",663,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",663,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",663,null],[13,"BorderImageSource","","border-image-source",663,null],[13,"BorderImageOutset","","border-image-outset",663,null],[13,"BorderImageRepeat","","border-image-repeat",663,null],[13,"BorderImageWidth","","border-image-width",663,null],[13,"BorderImageSlice","","border-image-slice",663,null],[13,"Display","","display",663,null],[13,"Position","","position",663,null],[13,"Float","","float",663,null],[13,"Clear","","clear",663,null],[13,"VerticalAlign","","vertical-align",663,null],[13,"OverflowX","","overflow-x",663,null],[13,"OverflowY","","overflow-y",663,null],[13,"Transform","","transform",663,null],[13,"Perspective","","perspective",663,null],[13,"PerspectiveOrigin","","perspective-origin",663,null],[13,"BackfaceVisibility","","backface-visibility",663,null],[13,"TransformStyle","","transform-style",663,null],[13,"TransformOrigin","","transform-origin",663,null],[13,"Color","","color",663,null],[13,"ColumnWidth","","column-width",663,null],[13,"ColumnCount","","column-count",663,null],[13,"ColumnGap","","column-gap",663,null],[13,"Content","","content",663,null],[13,"CounterIncrement","","counter-increment",663,null],[13,"CounterReset","","counter-reset",663,null],[13,"Opacity","","opacity",663,null],[13,"BoxShadow","","box-shadow",663,null],[13,"Clip","","clip",663,null],[13,"Filter","","filter",663,null],[13,"MixBlendMode","","mix-blend-mode",663,null],[13,"FontFamily","","font-family",663,null],[13,"FontStyle","","font-style",663,null],[13,"FontVariantCaps","","font-variant-caps",663,null],[13,"FontWeight","","font-weight",663,null],[13,"FontSize","","font-size",663,null],[13,"FontStretch","","font-stretch",663,null],[13,"Visibility","","visibility",663,null],[13,"WritingMode","","writing-mode",663,null],[13,"Direction","","direction",663,null],[13,"ImageRendering","","image-rendering",663,null],[13,"BorderCollapse","","border-collapse",663,null],[13,"EmptyCells","","empty-cells",663,null],[13,"CaptionSide","","caption-side",663,null],[13,"BorderSpacing","","border-spacing",663,null],[13,"LineHeight","","line-height",663,null],[13,"TextTransform","","text-transform",663,null],[13,"TextIndent","","text-indent",663,null],[13,"OverflowWrap","","overflow-wrap",663,null],[13,"WordBreak","","word-break",663,null],[13,"TextJustify","","text-justify",663,null],[13,"TextAlign","","text-align",663,null],[13,"LetterSpacing","","letter-spacing",663,null],[13,"WordSpacing","","word-spacing",663,null],[13,"WhiteSpace","","white-space",663,null],[13,"TextShadow","","text-shadow",663,null],[13,"TextRendering","","text-rendering",663,null],[13,"ListStylePosition","","list-style-position",663,null],[13,"ListStyleType","","list-style-type",663,null],[13,"ListStyleImage","","list-style-image",663,null],[13,"Quotes","","quotes",663,null],[13,"MarginTop","","margin-top",663,null],[13,"MarginLeft","","margin-left",663,null],[13,"MarginBottom","","margin-bottom",663,null],[13,"MarginRight","","margin-right",663,null],[13,"OutlineColor","","outline-color",663,null],[13,"OutlineStyle","","outline-style",663,null],[13,"OutlineWidth","","outline-width",663,null],[13,"OutlineOffset","","outline-offset",663,null],[13,"PaddingTop","","padding-top",663,null],[13,"PaddingLeft","","padding-left",663,null],[13,"PaddingBottom","","padding-bottom",663,null],[13,"PaddingRight","","padding-right",663,null],[13,"Cursor","","cursor",663,null],[13,"PointerEvents","","pointer-events",663,null],[13,"Top","","top",663,null],[13,"Left","","left",663,null],[13,"Bottom","","bottom",663,null],[13,"Right","","right",663,null],[13,"ZIndex","","z-index",663,null],[13,"FlexDirection","","flex-direction",663,null],[13,"FlexWrap","","flex-wrap",663,null],[13,"JustifyContent","","justify-content",663,null],[13,"AlignContent","","align-content",663,null],[13,"AlignItems","","align-items",663,null],[13,"FlexGrow","","flex-grow",663,null],[13,"FlexShrink","","flex-shrink",663,null],[13,"AlignSelf","","align-self",663,null],[13,"Order","","order",663,null],[13,"Width","","width",663,null],[13,"MinWidth","","min-width",663,null],[13,"MaxWidth","","max-width",663,null],[13,"Height","","height",663,null],[13,"MinHeight","","min-height",663,null],[13,"MaxHeight","","max-height",663,null],[13,"BoxSizing","","box-sizing",663,null],[13,"TableLayout","","table-layout",663,null],[13,"TextOverflow","","text-overflow",663,null],[13,"UnicodeBidi","","unicode-bidi",663,null],[13,"TextDecorationLine","","text-decoration-line",663,null],[4,"TransitionProperty","","A given transition property, that is either `All`, a transitionable longhand property, a shorthand with at least one transitionable longhand component, or an unsupported property.",null,null],[13,"All","","All, any transitionable property changing should generate a transition.",664,null],[13,"BackgroundColor","","background-color",664,null],[13,"BackgroundPositionX","","background-position-x",664,null],[13,"BackgroundPositionY","","background-position-y",664,null],[13,"BackgroundSize","","background-size",664,null],[13,"BorderTopColor","","border-top-color",664,null],[13,"BorderTopWidth","","border-top-width",664,null],[13,"BorderLeftColor","","border-left-color",664,null],[13,"BorderLeftWidth","","border-left-width",664,null],[13,"BorderBottomColor","","border-bottom-color",664,null],[13,"BorderBottomWidth","","border-bottom-width",664,null],[13,"BorderRightColor","","border-right-color",664,null],[13,"BorderRightWidth","","border-right-width",664,null],[13,"BorderTopLeftRadius","","border-top-left-radius",664,null],[13,"BorderTopRightRadius","","border-top-right-radius",664,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",664,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",664,null],[13,"VerticalAlign","","vertical-align",664,null],[13,"Transform","","transform",664,null],[13,"Perspective","","perspective",664,null],[13,"PerspectiveOrigin","","perspective-origin",664,null],[13,"TransformOrigin","","transform-origin",664,null],[13,"Color","","color",664,null],[13,"ColumnWidth","","column-width",664,null],[13,"ColumnCount","","column-count",664,null],[13,"ColumnGap","","column-gap",664,null],[13,"Opacity","","opacity",664,null],[13,"BoxShadow","","box-shadow",664,null],[13,"Clip","","clip",664,null],[13,"Filter","","filter",664,null],[13,"FontWeight","","font-weight",664,null],[13,"FontSize","","font-size",664,null],[13,"FontStretch","","font-stretch",664,null],[13,"Visibility","","visibility",664,null],[13,"BorderSpacing","","border-spacing",664,null],[13,"LineHeight","","line-height",664,null],[13,"TextIndent","","text-indent",664,null],[13,"LetterSpacing","","letter-spacing",664,null],[13,"WordSpacing","","word-spacing",664,null],[13,"TextShadow","","text-shadow",664,null],[13,"MarginTop","","margin-top",664,null],[13,"MarginLeft","","margin-left",664,null],[13,"MarginBottom","","margin-bottom",664,null],[13,"MarginRight","","margin-right",664,null],[13,"OutlineColor","","outline-color",664,null],[13,"OutlineWidth","","outline-width",664,null],[13,"OutlineOffset","","outline-offset",664,null],[13,"PaddingTop","","padding-top",664,null],[13,"PaddingLeft","","padding-left",664,null],[13,"PaddingBottom","","padding-bottom",664,null],[13,"PaddingRight","","padding-right",664,null],[13,"Top","","top",664,null],[13,"Left","","left",664,null],[13,"Bottom","","bottom",664,null],[13,"Right","","right",664,null],[13,"ZIndex","","z-index",664,null],[13,"FlexGrow","","flex-grow",664,null],[13,"FlexShrink","","flex-shrink",664,null],[13,"Order","","order",664,null],[13,"Width","","width",664,null],[13,"MinWidth","","min-width",664,null],[13,"MaxWidth","","max-width",664,null],[13,"Height","","height",664,null],[13,"MinHeight","","min-height",664,null],[13,"MaxHeight","","max-height",664,null],[13,"Background","","background",664,null],[13,"BackgroundPosition","","background-position",664,null],[13,"BorderColor","","border-color",664,null],[13,"BorderWidth","","border-width",664,null],[13,"BorderTop","","border-top",664,null],[13,"BorderLeft","","border-left",664,null],[13,"BorderBottom","","border-bottom",664,null],[13,"BorderRight","","border-right",664,null],[13,"Border","","border",664,null],[13,"BorderRadius","","border-radius",664,null],[13,"Columns","","columns",664,null],[13,"Font","","font",664,null],[13,"Margin","","margin",664,null],[13,"Outline","","outline",664,null],[13,"Padding","","padding",664,null],[13,"Flex","","flex",664,null],[13,"Unsupported","","Unrecognized property which could be any non-transitionable, custom property, or unknown property.",664,null],[4,"AnimatedProperty","","An animated property interpolation between two computed values for that property.",null,null],[13,"BackgroundColor","","background-color",665,null],[13,"BackgroundImage","","background-image",665,null],[13,"BackgroundPositionX","","background-position-x",665,null],[13,"BackgroundPositionY","","background-position-y",665,null],[13,"BackgroundRepeat","","background-repeat",665,null],[13,"BackgroundAttachment","","background-attachment",665,null],[13,"BackgroundClip","","background-clip",665,null],[13,"BackgroundOrigin","","background-origin",665,null],[13,"BackgroundSize","","background-size",665,null],[13,"BorderTopColor","","border-top-color",665,null],[13,"BorderTopStyle","","border-top-style",665,null],[13,"BorderTopWidth","","border-top-width",665,null],[13,"BorderLeftColor","","border-left-color",665,null],[13,"BorderLeftStyle","","border-left-style",665,null],[13,"BorderLeftWidth","","border-left-width",665,null],[13,"BorderBottomColor","","border-bottom-color",665,null],[13,"BorderBottomStyle","","border-bottom-style",665,null],[13,"BorderBottomWidth","","border-bottom-width",665,null],[13,"BorderRightColor","","border-right-color",665,null],[13,"BorderRightStyle","","border-right-style",665,null],[13,"BorderRightWidth","","border-right-width",665,null],[13,"BorderTopLeftRadius","","border-top-left-radius",665,null],[13,"BorderTopRightRadius","","border-top-right-radius",665,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",665,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",665,null],[13,"BorderImageSource","","border-image-source",665,null],[13,"BorderImageOutset","","border-image-outset",665,null],[13,"BorderImageRepeat","","border-image-repeat",665,null],[13,"BorderImageWidth","","border-image-width",665,null],[13,"BorderImageSlice","","border-image-slice",665,null],[13,"Display","","display",665,null],[13,"Position","","position",665,null],[13,"Float","","float",665,null],[13,"Clear","","clear",665,null],[13,"VerticalAlign","","vertical-align",665,null],[13,"OverflowX","","overflow-x",665,null],[13,"OverflowY","","overflow-y",665,null],[13,"Transform","","transform",665,null],[13,"Perspective","","perspective",665,null],[13,"PerspectiveOrigin","","perspective-origin",665,null],[13,"BackfaceVisibility","","backface-visibility",665,null],[13,"TransformStyle","","transform-style",665,null],[13,"TransformOrigin","","transform-origin",665,null],[13,"Color","","color",665,null],[13,"ColumnWidth","","column-width",665,null],[13,"ColumnCount","","column-count",665,null],[13,"ColumnGap","","column-gap",665,null],[13,"Content","","content",665,null],[13,"CounterIncrement","","counter-increment",665,null],[13,"CounterReset","","counter-reset",665,null],[13,"Opacity","","opacity",665,null],[13,"BoxShadow","","box-shadow",665,null],[13,"Clip","","clip",665,null],[13,"Filter","","filter",665,null],[13,"MixBlendMode","","mix-blend-mode",665,null],[13,"FontFamily","","font-family",665,null],[13,"FontStyle","","font-style",665,null],[13,"FontVariantCaps","","font-variant-caps",665,null],[13,"FontWeight","","font-weight",665,null],[13,"FontSize","","font-size",665,null],[13,"FontStretch","","font-stretch",665,null],[13,"Visibility","","visibility",665,null],[13,"WritingMode","","writing-mode",665,null],[13,"Direction","","direction",665,null],[13,"ImageRendering","","image-rendering",665,null],[13,"BorderCollapse","","border-collapse",665,null],[13,"EmptyCells","","empty-cells",665,null],[13,"CaptionSide","","caption-side",665,null],[13,"BorderSpacing","","border-spacing",665,null],[13,"LineHeight","","line-height",665,null],[13,"TextTransform","","text-transform",665,null],[13,"TextIndent","","text-indent",665,null],[13,"OverflowWrap","","overflow-wrap",665,null],[13,"WordBreak","","word-break",665,null],[13,"TextJustify","","text-justify",665,null],[13,"TextAlign","","text-align",665,null],[13,"LetterSpacing","","letter-spacing",665,null],[13,"WordSpacing","","word-spacing",665,null],[13,"WhiteSpace","","white-space",665,null],[13,"TextShadow","","text-shadow",665,null],[13,"TextRendering","","text-rendering",665,null],[13,"ListStylePosition","","list-style-position",665,null],[13,"ListStyleType","","list-style-type",665,null],[13,"ListStyleImage","","list-style-image",665,null],[13,"Quotes","","quotes",665,null],[13,"MarginTop","","margin-top",665,null],[13,"MarginLeft","","margin-left",665,null],[13,"MarginBottom","","margin-bottom",665,null],[13,"MarginRight","","margin-right",665,null],[13,"OutlineColor","","outline-color",665,null],[13,"OutlineStyle","","outline-style",665,null],[13,"OutlineWidth","","outline-width",665,null],[13,"OutlineOffset","","outline-offset",665,null],[13,"PaddingTop","","padding-top",665,null],[13,"PaddingLeft","","padding-left",665,null],[13,"PaddingBottom","","padding-bottom",665,null],[13,"PaddingRight","","padding-right",665,null],[13,"Cursor","","cursor",665,null],[13,"PointerEvents","","pointer-events",665,null],[13,"Top","","top",665,null],[13,"Left","","left",665,null],[13,"Bottom","","bottom",665,null],[13,"Right","","right",665,null],[13,"ZIndex","","z-index",665,null],[13,"FlexDirection","","flex-direction",665,null],[13,"FlexWrap","","flex-wrap",665,null],[13,"JustifyContent","","justify-content",665,null],[13,"AlignContent","","align-content",665,null],[13,"AlignItems","","align-items",665,null],[13,"FlexGrow","","flex-grow",665,null],[13,"FlexShrink","","flex-shrink",665,null],[13,"AlignSelf","","align-self",665,null],[13,"Order","","order",665,null],[13,"Width","","width",665,null],[13,"MinWidth","","min-width",665,null],[13,"MaxWidth","","max-width",665,null],[13,"Height","","height",665,null],[13,"MinHeight","","min-height",665,null],[13,"MaxHeight","","max-height",665,null],[13,"BoxSizing","","box-sizing",665,null],[13,"TableLayout","","table-layout",665,null],[13,"TextOverflow","","text-overflow",665,null],[13,"UnicodeBidi","","unicode-bidi",665,null],[13,"TextDecorationLine","","text-decoration-line",665,null],[4,"AnimationValue","","An enum to represent a single computed value belonging to an animated property in order to be interpolated with another one. When interpolating, both values need to belong to the same property.",null,null],[13,"BackgroundColor","","background-color",666,null],[13,"BackgroundImage","","background-image",666,null],[13,"BackgroundPositionX","","background-position-x",666,null],[13,"BackgroundPositionY","","background-position-y",666,null],[13,"BackgroundRepeat","","background-repeat",666,null],[13,"BackgroundAttachment","","background-attachment",666,null],[13,"BackgroundClip","","background-clip",666,null],[13,"BackgroundOrigin","","background-origin",666,null],[13,"BackgroundSize","","background-size",666,null],[13,"BorderTopColor","","border-top-color",666,null],[13,"BorderTopStyle","","border-top-style",666,null],[13,"BorderTopWidth","","border-top-width",666,null],[13,"BorderLeftColor","","border-left-color",666,null],[13,"BorderLeftStyle","","border-left-style",666,null],[13,"BorderLeftWidth","","border-left-width",666,null],[13,"BorderBottomColor","","border-bottom-color",666,null],[13,"BorderBottomStyle","","border-bottom-style",666,null],[13,"BorderBottomWidth","","border-bottom-width",666,null],[13,"BorderRightColor","","border-right-color",666,null],[13,"BorderRightStyle","","border-right-style",666,null],[13,"BorderRightWidth","","border-right-width",666,null],[13,"BorderTopLeftRadius","","border-top-left-radius",666,null],[13,"BorderTopRightRadius","","border-top-right-radius",666,null],[13,"BorderBottomRightRadius","","border-bottom-right-radius",666,null],[13,"BorderBottomLeftRadius","","border-bottom-left-radius",666,null],[13,"BorderImageSource","","border-image-source",666,null],[13,"BorderImageOutset","","border-image-outset",666,null],[13,"BorderImageRepeat","","border-image-repeat",666,null],[13,"BorderImageWidth","","border-image-width",666,null],[13,"BorderImageSlice","","border-image-slice",666,null],[13,"Display","","display",666,null],[13,"Position","","position",666,null],[13,"Float","","float",666,null],[13,"Clear","","clear",666,null],[13,"VerticalAlign","","vertical-align",666,null],[13,"OverflowX","","overflow-x",666,null],[13,"OverflowY","","overflow-y",666,null],[13,"Transform","","transform",666,null],[13,"Perspective","","perspective",666,null],[13,"PerspectiveOrigin","","perspective-origin",666,null],[13,"BackfaceVisibility","","backface-visibility",666,null],[13,"TransformStyle","","transform-style",666,null],[13,"TransformOrigin","","transform-origin",666,null],[13,"Color","","color",666,null],[13,"ColumnWidth","","column-width",666,null],[13,"ColumnCount","","column-count",666,null],[13,"ColumnGap","","column-gap",666,null],[13,"Content","","content",666,null],[13,"CounterIncrement","","counter-increment",666,null],[13,"CounterReset","","counter-reset",666,null],[13,"Opacity","","opacity",666,null],[13,"BoxShadow","","box-shadow",666,null],[13,"Clip","","clip",666,null],[13,"Filter","","filter",666,null],[13,"MixBlendMode","","mix-blend-mode",666,null],[13,"FontFamily","","font-family",666,null],[13,"FontStyle","","font-style",666,null],[13,"FontVariantCaps","","font-variant-caps",666,null],[13,"FontWeight","","font-weight",666,null],[13,"FontSize","","font-size",666,null],[13,"FontStretch","","font-stretch",666,null],[13,"Visibility","","visibility",666,null],[13,"WritingMode","","writing-mode",666,null],[13,"Direction","","direction",666,null],[13,"ImageRendering","","image-rendering",666,null],[13,"BorderCollapse","","border-collapse",666,null],[13,"EmptyCells","","empty-cells",666,null],[13,"CaptionSide","","caption-side",666,null],[13,"BorderSpacing","","border-spacing",666,null],[13,"LineHeight","","line-height",666,null],[13,"TextTransform","","text-transform",666,null],[13,"TextIndent","","text-indent",666,null],[13,"OverflowWrap","","overflow-wrap",666,null],[13,"WordBreak","","word-break",666,null],[13,"TextJustify","","text-justify",666,null],[13,"TextAlign","","text-align",666,null],[13,"LetterSpacing","","letter-spacing",666,null],[13,"WordSpacing","","word-spacing",666,null],[13,"WhiteSpace","","white-space",666,null],[13,"TextShadow","","text-shadow",666,null],[13,"TextRendering","","text-rendering",666,null],[13,"ListStylePosition","","list-style-position",666,null],[13,"ListStyleType","","list-style-type",666,null],[13,"ListStyleImage","","list-style-image",666,null],[13,"Quotes","","quotes",666,null],[13,"MarginTop","","margin-top",666,null],[13,"MarginLeft","","margin-left",666,null],[13,"MarginBottom","","margin-bottom",666,null],[13,"MarginRight","","margin-right",666,null],[13,"OutlineColor","","outline-color",666,null],[13,"OutlineStyle","","outline-style",666,null],[13,"OutlineWidth","","outline-width",666,null],[13,"OutlineOffset","","outline-offset",666,null],[13,"PaddingTop","","padding-top",666,null],[13,"PaddingLeft","","padding-left",666,null],[13,"PaddingBottom","","padding-bottom",666,null],[13,"PaddingRight","","padding-right",666,null],[13,"Cursor","","cursor",666,null],[13,"PointerEvents","","pointer-events",666,null],[13,"Top","","top",666,null],[13,"Left","","left",666,null],[13,"Bottom","","bottom",666,null],[13,"Right","","right",666,null],[13,"ZIndex","","z-index",666,null],[13,"FlexDirection","","flex-direction",666,null],[13,"FlexWrap","","flex-wrap",666,null],[13,"JustifyContent","","justify-content",666,null],[13,"AlignContent","","align-content",666,null],[13,"AlignItems","","align-items",666,null],[13,"FlexGrow","","flex-grow",666,null],[13,"FlexShrink","","flex-shrink",666,null],[13,"AlignSelf","","align-self",666,null],[13,"Order","","order",666,null],[13,"Width","","width",666,null],[13,"MinWidth","","min-width",666,null],[13,"MaxWidth","","max-width",666,null],[13,"Height","","height",666,null],[13,"MinHeight","","min-height",666,null],[13,"MaxHeight","","max-height",666,null],[13,"BoxSizing","","box-sizing",666,null],[13,"TableLayout","","table-layout",666,null],[13,"TextOverflow","","text-overflow",666,null],[13,"UnicodeBidi","","unicode-bidi",666,null],[13,"TextDecorationLine","","text-decoration-line",666,null],[6,"IntermediateSVGPaint","","Animated SVGPaint",null,null],[6,"IntermediateSVGPaintKind","","Animated SVGPaintKind",null,null],[8,"RepeatableListAnimatable","","https://drafts.csswg.org/css-transitions/#animtype-repeatable-list",null,null],[11,"clone","","",663,{"inputs":[{"name":"self"}],"output":{"name":"animatablelonghand"}}],[11,"hash","","",663,null],[11,"eq","","",663,{"inputs":[{"name":"self"},{"name":"animatablelonghand"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",663,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",663,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_discrete","","Returns true if this AnimatableLonghand is one of the discretely animatable properties.",663,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_transition_property","","Converts from TransitionProperty. Returns None if the property is not an animatable longhand.",663,{"inputs":[{"name":"transitionproperty"}],"output":{"name":"option"}}],[11,"from_declaration","","Get an animatable longhand property from a property declaration.",663,{"inputs":[{"name":"propertydeclaration"}],"output":{"name":"option"}}],[11,"heap_size_of_children","","",664,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",664,{"inputs":[{"name":"self"}],"output":{"name":"transitionproperty"}}],[11,"hash","","",664,null],[11,"eq","","",664,{"inputs":[{"name":"self"},{"name":"transitionproperty"}],"output":{"name":"bool"}}],[11,"ne","","",664,{"inputs":[{"name":"self"},{"name":"transitionproperty"}],"output":{"name":"bool"}}],[11,"to_css","","",664,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_computed_value","","",664,null],[11,"from_computed_value","","",664,null],[11,"fmt","","",664,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"each","","Iterates over each longhand property.",664,{"inputs":[{"name":"f"}],"output":null}],[11,"any","","Iterates over every longhand property that is not TransitionProperty::All, stopping and returning true when the provided callback returns true for the first time.",664,{"inputs":[{"name":"f"}],"output":{"name":"bool"}}],[11,"parse","","Parse a transition-property value.",664,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"longhands","","Return transitionable longhands of this shorthand TransitionProperty, except for \"all\".",664,null],[11,"is_shorthand","","Returns true if this TransitionProperty is a shorthand.",664,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",665,{"inputs":[{"name":"self"}],"output":{"name":"animatedproperty"}}],[11,"fmt","","",665,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",665,{"inputs":[{"name":"self"},{"name":"animatedproperty"}],"output":{"name":"bool"}}],[11,"ne","","",665,{"inputs":[{"name":"self"},{"name":"animatedproperty"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",665,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","Get the name of this property.",665,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"does_animate","","Whether this interpolation does animate, that is, whether the start and end values are different.",665,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_the_same_end_value_as","","Whether an animated property has the same end value as another.",665,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"update","","Update `style` with the proper computed style corresponding to this animation at `progress`.",665,{"inputs":[{"name":"self"},{"name":"computedvalues"},{"name":"f64"}],"output":null}],[11,"from_animatable_longhand","","Get an animatable value from a transition-property, an old style, and a new style.",665,{"inputs":[{"name":"animatablelonghand"},{"name":"computedvalues"},{"name":"computedvalues"}],"output":{"name":"animatedproperty"}}],[11,"clone","","",666,{"inputs":[{"name":"self"}],"output":{"name":"animationvalue"}}],[11,"eq","","",666,{"inputs":[{"name":"self"},{"name":"animationvalue"}],"output":{"name":"bool"}}],[11,"ne","","",666,{"inputs":[{"name":"self"},{"name":"animationvalue"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",666,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",666,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"uncompute","","\"Uncompute\" this animation value in order to be used inside the CSS cascade.",666,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclaration"}}],[11,"from_declaration","","Construct an AnimationValue from a property declaration.",666,{"inputs":[{"name":"propertydeclaration"},{"name":"context"},{"name":"computedvalues"}],"output":{"name":"option"}}],[11,"from_computed_values","","Get an AnimationValue for an AnimatableLonghand from a given computed values.",666,{"inputs":[{"name":"animatablelonghand"},{"name":"computedvalues"}],"output":{"name":"self"}}],[11,"animate","","",666,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",666,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",666,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::properties::longhands::visibility::computed_value","",565,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",565,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",565,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::values::computed::length","",263,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",265,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",266,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",268,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::properties::longhands::font_weight::computed_value","",559,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",559,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::properties::longhands::font_stretch::computed_value","",563,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",563,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",563,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::values::computed","",251,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",251,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","style::properties::longhands::transform::computed_value","",536,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","","",536,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","style::properties::animated_properties","",660,{"inputs":[{"name":"self"}],"output":{"name":"innermatrix2d"}}],[11,"compute_squared_distance","","",660,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",660,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",660,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",667,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",667,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",667,{"inputs":[{"name":"self"}],"output":{"name":"translate2d"}}],[11,"compute_squared_distance","","",667,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",667,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",668,{"inputs":[{"name":"self"}],"output":{"name":"scale2d"}}],[11,"compute_squared_distance","","",668,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",668,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",668,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",661,{"inputs":[{"name":"self"}],"output":{"name":"matrixdecomposed2d"}}],[11,"fmt","","",661,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",661,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",660,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","","",668,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","","https://drafts.csswg.org/css-transforms/#interpolation-of-decomposed-2d-matrix-values",661,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",661,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::properties::longhands::transform::computed_value","",533,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",533,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"from","style::properties::animated_properties","Decompose a 2D matrix. https://drafts.csswg.org/css-transforms/#decomposing-a-2d-matrix",661,{"inputs":[{"name":"computedmatrix"}],"output":{"name":"matrixdecomposed2d"}}],[11,"from","style::properties::longhands::transform::computed_value","Recompose a 2D matrix. https://drafts.csswg.org/css-transforms/#recomposing-to-a-2d-matrix",533,{"inputs":[{"name":"matrixdecomposed2d"}],"output":{"name":"computedmatrix"}}],[11,"heap_size_of_children","style::properties::animated_properties","",669,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",669,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",669,{"inputs":[{"name":"self"}],"output":{"name":"translate3d"}}],[11,"compute_squared_distance","","",669,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",669,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",670,{"inputs":[{"name":"self"}],"output":{"name":"scale3d"}}],[11,"compute_squared_distance","","",670,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",670,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",670,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",671,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animate","","",671,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"clone","","",671,{"inputs":[{"name":"self"}],"output":{"name":"skew"}}],[11,"fmt","","",671,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",672,{"inputs":[{"name":"self"}],"output":{"name":"perspective"}}],[11,"compute_squared_distance","","",672,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",672,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",672,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",673,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"fmt","","",673,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",673,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",662,{"inputs":[{"name":"self"}],"output":{"name":"matrixdecomposed3d"}}],[11,"compute_squared_distance","","",662,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",662,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",662,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compute_squared_distance","","",673,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"animate","","",670,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",671,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"animate","","",672,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","","https://drafts.csswg.org/css-transforms/#interpolation-of-decomposed-3d-matrix-values",662,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"from","style::properties::longhands::transform::computed_value","Recompose a 3D matrix. https://drafts.csswg.org/css-transforms/#recomposing-to-a-3d-matrix",533,{"inputs":[{"name":"matrixdecomposed3d"}],"output":{"name":"computedmatrix"}}],[11,"animate","","",535,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",536,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",535,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",535,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_zero","style::properties::animated_properties","",674,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","style::values::computed","",252,{"inputs":[{"name":"nonnegativelengthorpercentage"}],"output":{"name":"numberorpercentage"}}],[11,"from","","",252,{"inputs":[{"name":"nonnegativenumber"}],"output":{"name":"numberorpercentage"}}],[11,"from","","",252,{"inputs":[{"name":"lengthorpercentage"}],"output":{"name":"numberorpercentage"}}],[11,"from","","",252,{"inputs":[{"name":"number"}],"output":{"name":"numberorpercentage"}}],[11,"animate","style::values::generics::svg","",353,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","","",354,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","","",355,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",355,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"animate","","",356,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"animate","style::properties::animated_properties","",675,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_zero","","",675,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",675,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"animate","style::values::animated::effects","",243,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"compute_squared_distance","","",243,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[0,"style_structs","style::properties","The module where all the style structs are defined.",null,null],[3,"Background","style::properties::style_structs","The Background style struct.",null,null],[12,"background_color","","The background-color computed value.",676,null],[12,"background_image","","The background-image computed value.",676,null],[12,"background_position_x","","The background-position-x computed value.",676,null],[12,"background_position_y","","The background-position-y computed value.",676,null],[12,"background_repeat","","The background-repeat computed value.",676,null],[12,"background_attachment","","The background-attachment computed value.",676,null],[12,"background_clip","","The background-clip computed value.",676,null],[12,"background_origin","","The background-origin computed value.",676,null],[12,"background_size","","The background-size computed value.",676,null],[3,"Border","","The Border style struct.",null,null],[12,"border_top_color","","The border-top-color computed value.",677,null],[12,"border_top_style","","The border-top-style computed value.",677,null],[12,"border_top_width","","The border-top-width computed value.",677,null],[12,"border_left_color","","The border-left-color computed value.",677,null],[12,"border_left_style","","The border-left-style computed value.",677,null],[12,"border_left_width","","The border-left-width computed value.",677,null],[12,"border_bottom_color","","The border-bottom-color computed value.",677,null],[12,"border_bottom_style","","The border-bottom-style computed value.",677,null],[12,"border_bottom_width","","The border-bottom-width computed value.",677,null],[12,"border_right_color","","The border-right-color computed value.",677,null],[12,"border_right_style","","The border-right-style computed value.",677,null],[12,"border_right_width","","The border-right-width computed value.",677,null],[12,"border_block_start_color","","The border-block-start-color computed value.",677,null],[12,"border_block_start_style","","The border-block-start-style computed value.",677,null],[12,"border_block_start_width","","The border-block-start-width computed value.",677,null],[12,"border_block_end_color","","The border-block-end-color computed value.",677,null],[12,"border_block_end_style","","The border-block-end-style computed value.",677,null],[12,"border_block_end_width","","The border-block-end-width computed value.",677,null],[12,"border_inline_start_color","","The border-inline-start-color computed value.",677,null],[12,"border_inline_start_style","","The border-inline-start-style computed value.",677,null],[12,"border_inline_start_width","","The border-inline-start-width computed value.",677,null],[12,"border_inline_end_color","","The border-inline-end-color computed value.",677,null],[12,"border_inline_end_style","","The border-inline-end-style computed value.",677,null],[12,"border_inline_end_width","","The border-inline-end-width computed value.",677,null],[12,"border_top_left_radius","","The border-top-left-radius computed value.",677,null],[12,"border_top_right_radius","","The border-top-right-radius computed value.",677,null],[12,"border_bottom_right_radius","","The border-bottom-right-radius computed value.",677,null],[12,"border_bottom_left_radius","","The border-bottom-left-radius computed value.",677,null],[12,"border_image_source","","The border-image-source computed value.",677,null],[12,"border_image_outset","","The border-image-outset computed value.",677,null],[12,"border_image_repeat","","The border-image-repeat computed value.",677,null],[12,"border_image_width","","The border-image-width computed value.",677,null],[12,"border_image_slice","","The border-image-slice computed value.",677,null],[3,"Box","","The Box style struct.",null,null],[12,"display","","The display computed value.",678,null],[12,"position","","The position computed value.",678,null],[12,"float","","The float computed value.",678,null],[12,"clear","","The clear computed value.",678,null],[12,"_servo_display_for_hypothetical_box","","The -servo-display-for-hypothetical-box computed value.",678,null],[12,"vertical_align","","The vertical-align computed value.",678,null],[12,"_servo_overflow_clip_box","","The -servo-overflow-clip-box computed value.",678,null],[12,"overflow_x","","The overflow-x computed value.",678,null],[12,"overflow_y","","The overflow-y computed value.",678,null],[12,"transition_duration","","The transition-duration computed value.",678,null],[12,"transition_timing_function","","The transition-timing-function computed value.",678,null],[12,"transition_property","","The transition-property computed value.",678,null],[12,"transition_delay","","The transition-delay computed value.",678,null],[12,"animation_name","","The animation-name computed value.",678,null],[12,"animation_duration","","The animation-duration computed value.",678,null],[12,"animation_timing_function","","The animation-timing-function computed value.",678,null],[12,"animation_iteration_count","","The animation-iteration-count computed value.",678,null],[12,"animation_direction","","The animation-direction computed value.",678,null],[12,"animation_play_state","","The animation-play-state computed value.",678,null],[12,"animation_fill_mode","","The animation-fill-mode computed value.",678,null],[12,"animation_delay","","The animation-delay computed value.",678,null],[12,"transform","","The transform computed value.",678,null],[12,"perspective","","The perspective computed value.",678,null],[12,"perspective_origin","","The perspective-origin computed value.",678,null],[12,"backface_visibility","","The backface-visibility computed value.",678,null],[12,"transform_style","","The transform-style computed value.",678,null],[12,"transform_origin","","The transform-origin computed value.",678,null],[3,"Color","","The Color style struct.",null,null],[12,"color","","The color computed value.",679,null],[3,"Column","","The Column style struct.",null,null],[12,"column_width","","The column-width computed value.",680,null],[12,"column_count","","The column-count computed value.",680,null],[12,"column_gap","","The column-gap computed value.",680,null],[3,"Counters","","The Counters style struct.",null,null],[12,"content","","The content computed value.",681,null],[12,"counter_increment","","The counter-increment computed value.",681,null],[12,"counter_reset","","The counter-reset computed value.",681,null],[3,"Effects","","The Effects style struct.",null,null],[12,"opacity","","The opacity computed value.",682,null],[12,"box_shadow","","The box-shadow computed value.",682,null],[12,"clip","","The clip computed value.",682,null],[12,"filter","","The filter computed value.",682,null],[12,"mix_blend_mode","","The mix-blend-mode computed value.",682,null],[3,"Font","","The Font style struct.",null,null],[12,"font_family","","The font-family computed value.",683,null],[12,"font_style","","The font-style computed value.",683,null],[12,"font_variant_caps","","The font-variant-caps computed value.",683,null],[12,"font_weight","","The font-weight computed value.",683,null],[12,"font_size","","The font-size computed value.",683,null],[12,"font_stretch","","The font-stretch computed value.",683,null],[12,"hash","","The font hash, used for font caching.",683,null],[3,"InheritedBox","","The InheritedBox style struct.",null,null],[12,"visibility","","The visibility computed value.",684,null],[12,"writing_mode","","The writing-mode computed value.",684,null],[12,"direction","","The direction computed value.",684,null],[12,"image_rendering","","The image-rendering computed value.",684,null],[3,"InheritedTable","","The InheritedTable style struct.",null,null],[12,"border_collapse","","The border-collapse computed value.",685,null],[12,"empty_cells","","The empty-cells computed value.",685,null],[12,"caption_side","","The caption-side computed value.",685,null],[12,"border_spacing","","The border-spacing computed value.",685,null],[3,"InheritedText","","The InheritedText style struct.",null,null],[12,"line_height","","The line-height computed value.",686,null],[12,"text_transform","","The text-transform computed value.",686,null],[12,"text_indent","","The text-indent computed value.",686,null],[12,"overflow_wrap","","The overflow-wrap computed value.",686,null],[12,"word_break","","The word-break computed value.",686,null],[12,"text_justify","","The text-justify computed value.",686,null],[12,"text_align","","The text-align computed value.",686,null],[12,"letter_spacing","","The letter-spacing computed value.",686,null],[12,"word_spacing","","The word-spacing computed value.",686,null],[12,"_servo_text_decorations_in_effect","","The -servo-text-decorations-in-effect computed value.",686,null],[12,"white_space","","The white-space computed value.",686,null],[12,"text_shadow","","The text-shadow computed value.",686,null],[12,"text_rendering","","The text-rendering computed value.",686,null],[3,"List","","The List style struct.",null,null],[12,"list_style_position","","The list-style-position computed value.",687,null],[12,"list_style_type","","The list-style-type computed value.",687,null],[12,"list_style_image","","The list-style-image computed value.",687,null],[12,"quotes","","The quotes computed value.",687,null],[3,"Margin","","The Margin style struct.",null,null],[12,"margin_top","","The margin-top computed value.",688,null],[12,"margin_left","","The margin-left computed value.",688,null],[12,"margin_bottom","","The margin-bottom computed value.",688,null],[12,"margin_right","","The margin-right computed value.",688,null],[12,"margin_block_start","","The margin-block-start computed value.",688,null],[12,"margin_block_end","","The margin-block-end computed value.",688,null],[12,"margin_inline_start","","The margin-inline-start computed value.",688,null],[12,"margin_inline_end","","The margin-inline-end computed value.",688,null],[3,"Outline","","The Outline style struct.",null,null],[12,"outline_color","","The outline-color computed value.",689,null],[12,"outline_style","","The outline-style computed value.",689,null],[12,"outline_width","","The outline-width computed value.",689,null],[12,"outline_offset","","The outline-offset computed value.",689,null],[3,"Padding","","The Padding style struct.",null,null],[12,"padding_top","","The padding-top computed value.",690,null],[12,"padding_left","","The padding-left computed value.",690,null],[12,"padding_bottom","","The padding-bottom computed value.",690,null],[12,"padding_right","","The padding-right computed value.",690,null],[12,"padding_block_start","","The padding-block-start computed value.",690,null],[12,"padding_block_end","","The padding-block-end computed value.",690,null],[12,"padding_inline_start","","The padding-inline-start computed value.",690,null],[12,"padding_inline_end","","The padding-inline-end computed value.",690,null],[3,"Pointing","","The Pointing style struct.",null,null],[12,"cursor","","The cursor computed value.",691,null],[12,"pointer_events","","The pointer-events computed value.",691,null],[3,"Position","","The Position style struct.",null,null],[12,"top","","The top computed value.",692,null],[12,"left","","The left computed value.",692,null],[12,"bottom","","The bottom computed value.",692,null],[12,"right","","The right computed value.",692,null],[12,"offset_block_start","","The offset-block-start computed value.",692,null],[12,"offset_block_end","","The offset-block-end computed value.",692,null],[12,"offset_inline_start","","The offset-inline-start computed value.",692,null],[12,"offset_inline_end","","The offset-inline-end computed value.",692,null],[12,"z_index","","The z-index computed value.",692,null],[12,"flex_direction","","The flex-direction computed value.",692,null],[12,"flex_wrap","","The flex-wrap computed value.",692,null],[12,"justify_content","","The justify-content computed value.",692,null],[12,"align_content","","The align-content computed value.",692,null],[12,"align_items","","The align-items computed value.",692,null],[12,"flex_grow","","The flex-grow computed value.",692,null],[12,"flex_shrink","","The flex-shrink computed value.",692,null],[12,"align_self","","The align-self computed value.",692,null],[12,"order","","The order computed value.",692,null],[12,"flex_basis","","The flex-basis computed value.",692,null],[12,"width","","The width computed value.",692,null],[12,"min_width","","The min-width computed value.",692,null],[12,"max_width","","The max-width computed value.",692,null],[12,"height","","The height computed value.",692,null],[12,"min_height","","The min-height computed value.",692,null],[12,"max_height","","The max-height computed value.",692,null],[12,"block_size","","The block-size computed value.",692,null],[12,"min_block_size","","The min-block-size computed value.",692,null],[12,"max_block_size","","The max-block-size computed value.",692,null],[12,"inline_size","","The inline-size computed value.",692,null],[12,"min_inline_size","","The min-inline-size computed value.",692,null],[12,"max_inline_size","","The max-inline-size computed value.",692,null],[12,"box_sizing","","The box-sizing computed value.",692,null],[3,"Table","","The Table style struct.",null,null],[12,"table_layout","","The table-layout computed value.",693,null],[3,"Text","","The Text style struct.",null,null],[12,"text_overflow","","The text-overflow computed value.",694,null],[12,"unicode_bidi","","The unicode-bidi computed value.",694,null],[12,"text_decoration_line","","The text-decoration-line computed value.",694,null],[11,"clone","","",676,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"fmt","","",676,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",676,{"inputs":[{"name":"self"},{"name":"background"}],"output":{"name":"bool"}}],[11,"ne","","",676,{"inputs":[{"name":"self"},{"name":"background"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",676,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_background_color","","Set background-color.",676,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_background_color_from","","Set background-color from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_color","","Reset background-color from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_color","","Get the computed value for background-color.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_image","","Set background-image.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_image_from","","Set background-image from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_image","","Reset background-image from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_image","","Get the computed value for background-image.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_position_x","","Set background-position-x.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_position_x_from","","Set background-position-x from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_position_x","","Reset background-position-x from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_position_x","","Get the computed value for background-position-x.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_position_y","","Set background-position-y.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_position_y_from","","Set background-position-y from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_position_y","","Reset background-position-y from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_position_y","","Get the computed value for background-position-y.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_repeat","","Set background-repeat.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_repeat_from","","Set background-repeat from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_repeat","","Reset background-repeat from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_repeat","","Get the computed value for background-repeat.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_attachment","","Set background-attachment.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_attachment_from","","Set background-attachment from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_attachment","","Reset background-attachment from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_attachment","","Get the computed value for background-attachment.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_clip","","Set background-clip.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_clip_from","","Set background-clip from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_clip","","Reset background-clip from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_clip","","Get the computed value for background-clip.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_origin","","Set background-origin.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_origin_from","","Set background-origin from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_origin","","Reset background-origin from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_origin","","Get the computed value for background-origin.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_background_size","","Set background-size.",676,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_background_size_from","","Set background-size from other struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_background_size","","Reset background-size from the initial struct.",676,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_background_size","","Get the computed value for background-size.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",677,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"fmt","","",677,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",677,{"inputs":[{"name":"self"},{"name":"border"}],"output":{"name":"bool"}}],[11,"ne","","",677,{"inputs":[{"name":"self"},{"name":"border"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",677,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_border_top_color","","Set border-top-color.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_top_color_from","","Set border-top-color from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_top_color","","Reset border-top-color from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_top_color","","Get the computed value for border-top-color.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_top_style","","Set border-top-style.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_top_style_from","","Set border-top-style from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_top_style","","Reset border-top-style from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_top_style","","Get the computed value for border-top-style.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_top_width","","Set border-top-width.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_top_width_from","","Set border-top-width from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_top_width","","Reset border-top-width from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_top_width","","Get the computed value for border-top-width.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_left_color","","Set border-left-color.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_left_color_from","","Set border-left-color from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_left_color","","Reset border-left-color from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_left_color","","Get the computed value for border-left-color.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_left_style","","Set border-left-style.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_left_style_from","","Set border-left-style from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_left_style","","Reset border-left-style from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_left_style","","Get the computed value for border-left-style.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_left_width","","Set border-left-width.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_left_width_from","","Set border-left-width from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_left_width","","Reset border-left-width from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_left_width","","Get the computed value for border-left-width.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_bottom_color","","Set border-bottom-color.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_bottom_color_from","","Set border-bottom-color from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_bottom_color","","Reset border-bottom-color from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_bottom_color","","Get the computed value for border-bottom-color.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_bottom_style","","Set border-bottom-style.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_bottom_style_from","","Set border-bottom-style from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_bottom_style","","Reset border-bottom-style from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_bottom_style","","Get the computed value for border-bottom-style.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_bottom_width","","Set border-bottom-width.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_bottom_width_from","","Set border-bottom-width from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_bottom_width","","Reset border-bottom-width from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_bottom_width","","Get the computed value for border-bottom-width.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_right_color","","Set border-right-color.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_right_color_from","","Set border-right-color from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_right_color","","Reset border-right-color from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_right_color","","Get the computed value for border-right-color.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_right_style","","Set border-right-style.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_right_style_from","","Set border-right-style from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_right_style","","Reset border-right-style from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_right_style","","Get the computed value for border-right-style.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_right_width","","Set border-right-width.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_right_width_from","","Set border-right-width from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_right_width","","Reset border-right-width from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_right_width","","Get the computed value for border-right-width.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_block_start_color","","Set the appropriate physical property for border-block-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_start_color_from","","Copy the appropriate physical property from another struct for border-block-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_start_color","","Copy the appropriate physical property from another struct for border-block-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_start_color","","Get the computed value for the appropriate physical property for border-block-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_block_start_style","","Set the appropriate physical property for border-block-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_start_style_from","","Copy the appropriate physical property from another struct for border-block-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_start_style","","Copy the appropriate physical property from another struct for border-block-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_start_style","","Get the computed value for the appropriate physical property for border-block-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_block_start_width","","Set the appropriate physical property for border-block-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_start_width_from","","Copy the appropriate physical property from another struct for border-block-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_start_width","","Copy the appropriate physical property from another struct for border-block-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_start_width","","Get the computed value for the appropriate physical property for border-block-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_block_end_color","","Set the appropriate physical property for border-block-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_end_color_from","","Copy the appropriate physical property from another struct for border-block-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_end_color","","Copy the appropriate physical property from another struct for border-block-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_end_color","","Get the computed value for the appropriate physical property for border-block-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_block_end_style","","Set the appropriate physical property for border-block-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_end_style_from","","Copy the appropriate physical property from another struct for border-block-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_end_style","","Copy the appropriate physical property from another struct for border-block-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_end_style","","Get the computed value for the appropriate physical property for border-block-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_block_end_width","","Set the appropriate physical property for border-block-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_block_end_width_from","","Copy the appropriate physical property from another struct for border-block-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_block_end_width","","Copy the appropriate physical property from another struct for border-block-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_block_end_width","","Get the computed value for the appropriate physical property for border-block-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_start_color","","Set the appropriate physical property for border-inline-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_start_color_from","","Copy the appropriate physical property from another struct for border-inline-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_start_color","","Copy the appropriate physical property from another struct for border-inline-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_start_color","","Get the computed value for the appropriate physical property for border-inline-start-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_start_style","","Set the appropriate physical property for border-inline-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_start_style_from","","Copy the appropriate physical property from another struct for border-inline-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_start_style","","Copy the appropriate physical property from another struct for border-inline-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_start_style","","Get the computed value for the appropriate physical property for border-inline-start-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_start_width","","Set the appropriate physical property for border-inline-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_start_width_from","","Copy the appropriate physical property from another struct for border-inline-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_start_width","","Copy the appropriate physical property from another struct for border-inline-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_start_width","","Get the computed value for the appropriate physical property for border-inline-start-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_end_color","","Set the appropriate physical property for border-inline-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_end_color_from","","Copy the appropriate physical property from another struct for border-inline-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_end_color","","Copy the appropriate physical property from another struct for border-inline-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_end_color","","Get the computed value for the appropriate physical property for border-inline-end-color given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_end_style","","Set the appropriate physical property for border-inline-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_end_style_from","","Copy the appropriate physical property from another struct for border-inline-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_end_style","","Copy the appropriate physical property from another struct for border-inline-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_end_style","","Get the computed value for the appropriate physical property for border-inline-end-style given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_inline_end_width","","Set the appropriate physical property for border-inline-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_border_inline_end_width_from","","Copy the appropriate physical property from another struct for border-inline-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_border_inline_end_width","","Copy the appropriate physical property from another struct for border-inline-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_border_inline_end_width","","Get the computed value for the appropriate physical property for border-inline-end-width given a writing mode.",677,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_border_top_left_radius","","Set border-top-left-radius.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_top_left_radius_from","","Set border-top-left-radius from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_top_left_radius","","Reset border-top-left-radius from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_top_left_radius","","Get the computed value for border-top-left-radius.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_top_right_radius","","Set border-top-right-radius.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_top_right_radius_from","","Set border-top-right-radius from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_top_right_radius","","Reset border-top-right-radius from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_top_right_radius","","Get the computed value for border-top-right-radius.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_bottom_right_radius","","Set border-bottom-right-radius.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_bottom_right_radius_from","","Set border-bottom-right-radius from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_bottom_right_radius","","Reset border-bottom-right-radius from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_bottom_right_radius","","Get the computed value for border-bottom-right-radius.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_bottom_left_radius","","Set border-bottom-left-radius.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_bottom_left_radius_from","","Set border-bottom-left-radius from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_bottom_left_radius","","Reset border-bottom-left-radius from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_bottom_left_radius","","Get the computed value for border-bottom-left-radius.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_image_source","","Set border-image-source.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_image_source_from","","Set border-image-source from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_image_source","","Reset border-image-source from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_image_source","","Get the computed value for border-image-source.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_image_outset","","Set border-image-outset.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_image_outset_from","","Set border-image-outset from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_image_outset","","Reset border-image-outset from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_image_outset","","Get the computed value for border-image-outset.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_image_repeat","","Set border-image-repeat.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_image_repeat_from","","Set border-image-repeat from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_image_repeat","","Reset border-image-repeat from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_image_repeat","","Get the computed value for border-image-repeat.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_image_width","","Set border-image-width.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_image_width_from","","Set border-image-width from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_image_width","","Reset border-image-width from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_image_width","","Get the computed value for border-image-width.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_image_slice","","Set border-image-slice.",677,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_image_slice_from","","Set border-image-slice from other struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_image_slice","","Reset border-image-slice from the initial struct.",677,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_image_slice","","Get the computed value for border-image-slice.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"border_top_has_nonzero_width","","Whether the border-top property has nonzero width.",677,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"border_right_has_nonzero_width","","Whether the border-right property has nonzero width.",677,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"border_bottom_has_nonzero_width","","Whether the border-bottom property has nonzero width.",677,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"border_left_has_nonzero_width","","Whether the border-left property has nonzero width.",677,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",678,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"fmt","","",678,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",678,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",678,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_display","","Set display.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_display_from","","Set display from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_display","","Reset display from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_display","","Get the computed value for display.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_position","","Set position.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_position_from","","Set position from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_position","","Reset position from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_position","","Get the computed value for position.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_float","","Set float.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_float_from","","Set float from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_float","","Reset float from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_float","","Get the computed value for float.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_clear","","Set clear.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_clear_from","","Set clear from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_clear","","Reset clear from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_clear","","Get the computed value for clear.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set__servo_display_for_hypothetical_box","","Set -servo-display-for-hypothetical-box.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy__servo_display_for_hypothetical_box_from","","Set -servo-display-for-hypothetical-box from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset__servo_display_for_hypothetical_box","","Reset -servo-display-for-hypothetical-box from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone__servo_display_for_hypothetical_box","","Get the computed value for -servo-display-for-hypothetical-box.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_vertical_align","","Set vertical-align.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_vertical_align_from","","Set vertical-align from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_vertical_align","","Reset vertical-align from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_vertical_align","","Get the computed value for vertical-align.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set__servo_overflow_clip_box","","Set -servo-overflow-clip-box.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy__servo_overflow_clip_box_from","","Set -servo-overflow-clip-box from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset__servo_overflow_clip_box","","Reset -servo-overflow-clip-box from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone__servo_overflow_clip_box","","Get the computed value for -servo-overflow-clip-box.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_overflow_x","","Set overflow-x.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_overflow_x_from","","Set overflow-x from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_overflow_x","","Reset overflow-x from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_overflow_x","","Get the computed value for overflow-x.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_overflow_y","","Set overflow-y.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_overflow_y_from","","Set overflow-y from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_overflow_y","","Reset overflow-y from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_overflow_y","","Get the computed value for overflow-y.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_transition_duration","","Set transition-duration.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_transition_duration_from","","Set transition-duration from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transition_duration","","Reset transition-duration from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transition_duration","","Get the computed value for transition-duration.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transition_duration_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transition_duration_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_transition_timing_function","","Set transition-timing-function.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_transition_timing_function_from","","Set transition-timing-function from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transition_timing_function","","Reset transition-timing-function from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transition_timing_function","","Get the computed value for transition-timing-function.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transition_timing_function_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transition_timing_function_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_transition_property","","Set transition-property.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_transition_property_from","","Set transition-property from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transition_property","","Reset transition-property from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transition_property","","Get the computed value for transition-property.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transition_property_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transition_property_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_transition_delay","","Set transition-delay.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_transition_delay_from","","Set transition-delay from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transition_delay","","Reset transition-delay from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transition_delay","","Get the computed value for transition-delay.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transition_delay_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transition_delay_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_name","","Set animation-name.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_name_from","","Set animation-name from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_name","","Reset animation-name from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_name","","Get the computed value for animation-name.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_name_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_name_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_duration","","Set animation-duration.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_duration_from","","Set animation-duration from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_duration","","Reset animation-duration from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_duration","","Get the computed value for animation-duration.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_duration_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_duration_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_timing_function","","Set animation-timing-function.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_timing_function_from","","Set animation-timing-function from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_timing_function","","Reset animation-timing-function from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_timing_function","","Get the computed value for animation-timing-function.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_timing_function_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_timing_function_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_iteration_count","","Set animation-iteration-count.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_iteration_count_from","","Set animation-iteration-count from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_iteration_count","","Reset animation-iteration-count from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_iteration_count","","Get the computed value for animation-iteration-count.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_iteration_count_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_iteration_count_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_direction","","Set animation-direction.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_direction_from","","Set animation-direction from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_direction","","Reset animation-direction from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_direction","","Get the computed value for animation-direction.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_direction_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_direction_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_play_state","","Set animation-play-state.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_play_state_from","","Set animation-play-state from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_play_state","","Reset animation-play-state from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_play_state","","Get the computed value for animation-play-state.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_play_state_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_play_state_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_fill_mode","","Set animation-fill-mode.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_fill_mode_from","","Set animation-fill-mode from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_fill_mode","","Reset animation-fill-mode from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_fill_mode","","Get the computed value for animation-fill-mode.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_fill_mode_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_fill_mode_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_animation_delay","","Set animation-delay.",678,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_animation_delay_from","","Set animation-delay from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_animation_delay","","Reset animation-delay from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_animation_delay","","Get the computed value for animation-delay.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"animation_delay_count","","If this longhand is indexed, get the number of elements.",678,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"animation_delay_at","","If this longhand is indexed, get the element at given index.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"set_transform","","Set transform.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_transform_from","","Set transform from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transform","","Reset transform from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transform","","Get the computed value for transform.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_perspective","","Set perspective.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_perspective_from","","Set perspective from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_perspective","","Reset perspective from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_perspective","","Get the computed value for perspective.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_perspective_origin","","Set perspective-origin.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_perspective_origin_from","","Set perspective-origin from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_perspective_origin","","Reset perspective-origin from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_perspective_origin","","Get the computed value for perspective-origin.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_backface_visibility","","Set backface-visibility.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_backface_visibility_from","","Set backface-visibility from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_backface_visibility","","Reset backface-visibility from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_backface_visibility","","Get the computed value for backface-visibility.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_transform_style","","Set transform-style.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_transform_style_from","","Set transform-style from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transform_style","","Reset transform-style from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transform_style","","Get the computed value for transform-style.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_transform_origin","","Set transform-origin.",678,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_transform_origin_from","","Set transform-origin from other struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_transform_origin","","Reset transform-origin from the initial struct.",678,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_transform_origin","","Get the computed value for transform-origin.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_adjusted_display","","Sets the display property, but without touching __servo_display_for_hypothetical_box, except when the adjustment comes from root or item display fixups.",678,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[11,"clone","","",679,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",679,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",679,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",679,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",679,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_color","","Set color.",679,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_color_from","","Set color from other struct.",679,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_color","","Reset color from the initial struct.",679,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_color","","Get the computed value for color.",679,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",680,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"fmt","","",680,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",680,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",680,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",680,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column_width","","Set column-width.",680,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_column_width_from","","Set column-width from other struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_column_width","","Reset column-width from the initial struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_column_width","","Get the computed value for column-width.",680,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_column_count","","Set column-count.",680,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_column_count_from","","Set column-count from other struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_column_count","","Reset column-count from the initial struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_column_count","","Get the computed value for column-count.",680,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_column_gap","","Set column-gap.",680,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_column_gap_from","","Set column-gap from other struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_column_gap","","Reset column-gap from the initial struct.",680,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_column_gap","","Get the computed value for column-gap.",680,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",681,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"fmt","","",681,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",681,{"inputs":[{"name":"self"},{"name":"counters"}],"output":{"name":"bool"}}],[11,"ne","","",681,{"inputs":[{"name":"self"},{"name":"counters"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",681,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_content","","Set content.",681,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_content_from","","Set content from other struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_content","","Reset content from the initial struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_content","","Get the computed value for content.",681,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_counter_increment","","Set counter-increment.",681,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_counter_increment_from","","Set counter-increment from other struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_counter_increment","","Reset counter-increment from the initial struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_counter_increment","","Get the computed value for counter-increment.",681,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_counter_reset","","Set counter-reset.",681,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_counter_reset_from","","Set counter-reset from other struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_counter_reset","","Reset counter-reset from the initial struct.",681,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_counter_reset","","Get the computed value for counter-reset.",681,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",682,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"fmt","","",682,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",682,{"inputs":[{"name":"self"},{"name":"effects"}],"output":{"name":"bool"}}],[11,"ne","","",682,{"inputs":[{"name":"self"},{"name":"effects"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",682,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_opacity","","Set opacity.",682,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_opacity_from","","Set opacity from other struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_opacity","","Reset opacity from the initial struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_opacity","","Get the computed value for opacity.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_box_shadow","","Set box-shadow.",682,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_box_shadow_from","","Set box-shadow from other struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_box_shadow","","Reset box-shadow from the initial struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_box_shadow","","Get the computed value for box-shadow.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_clip","","Set clip.",682,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_clip_from","","Set clip from other struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_clip","","Reset clip from the initial struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_clip","","Get the computed value for clip.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_filter","","Set filter.",682,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_filter_from","","Set filter from other struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_filter","","Reset filter from the initial struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_filter","","Get the computed value for filter.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_mix_blend_mode","","Set mix-blend-mode.",682,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_mix_blend_mode_from","","Set mix-blend-mode from other struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_mix_blend_mode","","Reset mix-blend-mode from the initial struct.",682,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_mix_blend_mode","","Get the computed value for mix-blend-mode.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",683,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"fmt","","",683,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",683,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",683,{"inputs":[{"name":"self"},{"name":"font"}],"output":{"name":"bool"}}],[11,"set_font_family","","Set font-family.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_family_from","","Set font-family from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_family","","Reset font-family from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_family","","Get the computed value for font-family.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_font_style","","Set font-style.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_style_from","","Set font-style from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_style","","Reset font-style from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_style","","Get the computed value for font-style.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_font_variant_caps","","Set font-variant-caps.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_variant_caps_from","","Set font-variant-caps from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_variant_caps","","Reset font-variant-caps from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_variant_caps","","Get the computed value for font-variant-caps.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_font_weight","","Set font-weight.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_weight_from","","Set font-weight from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_weight","","Reset font-weight from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_weight","","Get the computed value for font-weight.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_font_size","","Set font-size.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_size_from","","Set font-size from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_size","","Reset font-size from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_size","","Get the computed value for font-size.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_font_stretch","","Set font-stretch.",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_font_stretch_from","","Set font-stretch from other struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_font_stretch","","Reset font-stretch from the initial struct.",683,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_font_stretch","","Get the computed value for font-stretch.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"compute_font_hash","","Computes a font hash in order to be able to cache fonts effectively in GFX and layout.",683,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_font_size_from","","(Servo does not handle MathML, so this just calls copy_font_size_from)",683,{"inputs":[{"name":"self"},{"name":"self"},{"name":"option"},{"name":"device"}],"output":{"name":"bool"}}],[11,"apply_font_size","","(Servo does not handle MathML, so this just calls set_font_size)",683,{"inputs":[{"name":"self"},{"name":"t"},{"name":"self"},{"name":"device"}],"output":{"name":"option"}}],[11,"apply_unconstrained_font_size","","(Servo does not handle MathML, so this does nothing)",683,{"inputs":[{"name":"self"},{"name":"nonnegativelength"}],"output":null}],[11,"clone","","",684,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"fmt","","",684,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",684,{"inputs":[{"name":"self"},{"name":"inheritedbox"}],"output":{"name":"bool"}}],[11,"ne","","",684,{"inputs":[{"name":"self"},{"name":"inheritedbox"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",684,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_visibility","","Set visibility.",684,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_visibility_from","","Set visibility from other struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_visibility","","Reset visibility from the initial struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_visibility","","Get the computed value for visibility.",684,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_writing_mode","","Set writing-mode.",684,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_writing_mode_from","","Set writing-mode from other struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_writing_mode","","Reset writing-mode from the initial struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_writing_mode","","Get the computed value for writing-mode.",684,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_direction","","Set direction.",684,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_direction_from","","Set direction from other struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_direction","","Reset direction from the initial struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_direction","","Get the computed value for direction.",684,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_image_rendering","","Set image-rendering.",684,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_image_rendering_from","","Set image-rendering from other struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_image_rendering","","Reset image-rendering from the initial struct.",684,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_image_rendering","","Get the computed value for image-rendering.",684,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",685,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"fmt","","",685,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",685,{"inputs":[{"name":"self"},{"name":"inheritedtable"}],"output":{"name":"bool"}}],[11,"ne","","",685,{"inputs":[{"name":"self"},{"name":"inheritedtable"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",685,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_border_collapse","","Set border-collapse.",685,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_collapse_from","","Set border-collapse from other struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_collapse","","Reset border-collapse from the initial struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_collapse","","Get the computed value for border-collapse.",685,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_empty_cells","","Set empty-cells.",685,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_empty_cells_from","","Set empty-cells from other struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_empty_cells","","Reset empty-cells from the initial struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_empty_cells","","Get the computed value for empty-cells.",685,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_caption_side","","Set caption-side.",685,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_caption_side_from","","Set caption-side from other struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_caption_side","","Reset caption-side from the initial struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_caption_side","","Get the computed value for caption-side.",685,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_border_spacing","","Set border-spacing.",685,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_border_spacing_from","","Set border-spacing from other struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_border_spacing","","Reset border-spacing from the initial struct.",685,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_border_spacing","","Get the computed value for border-spacing.",685,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",686,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"fmt","","",686,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",686,{"inputs":[{"name":"self"},{"name":"inheritedtext"}],"output":{"name":"bool"}}],[11,"ne","","",686,{"inputs":[{"name":"self"},{"name":"inheritedtext"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",686,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_line_height","","Set line-height.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_line_height_from","","Set line-height from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_line_height","","Reset line-height from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_line_height","","Get the computed value for line-height.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_transform","","Set text-transform.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_transform_from","","Set text-transform from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_transform","","Reset text-transform from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_transform","","Get the computed value for text-transform.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_indent","","Set text-indent.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_indent_from","","Set text-indent from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_indent","","Reset text-indent from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_indent","","Get the computed value for text-indent.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_overflow_wrap","","Set overflow-wrap.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_overflow_wrap_from","","Set overflow-wrap from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_overflow_wrap","","Reset overflow-wrap from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_overflow_wrap","","Get the computed value for overflow-wrap.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_word_break","","Set word-break.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_word_break_from","","Set word-break from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_word_break","","Reset word-break from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_word_break","","Get the computed value for word-break.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_justify","","Set text-justify.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_justify_from","","Set text-justify from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_justify","","Reset text-justify from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_justify","","Get the computed value for text-justify.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_align","","Set text-align.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_align_from","","Set text-align from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_align","","Reset text-align from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_align","","Get the computed value for text-align.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_letter_spacing","","Set letter-spacing.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_letter_spacing_from","","Set letter-spacing from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_letter_spacing","","Reset letter-spacing from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_letter_spacing","","Get the computed value for letter-spacing.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_word_spacing","","Set word-spacing.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_word_spacing_from","","Set word-spacing from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_word_spacing","","Reset word-spacing from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_word_spacing","","Get the computed value for word-spacing.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set__servo_text_decorations_in_effect","","Set -servo-text-decorations-in-effect.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy__servo_text_decorations_in_effect_from","","Set -servo-text-decorations-in-effect from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset__servo_text_decorations_in_effect","","Reset -servo-text-decorations-in-effect from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone__servo_text_decorations_in_effect","","Get the computed value for -servo-text-decorations-in-effect.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_white_space","","Set white-space.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_white_space_from","","Set white-space from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_white_space","","Reset white-space from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_white_space","","Get the computed value for white-space.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_shadow","","Set text-shadow.",686,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"copy_text_shadow_from","","Set text-shadow from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_shadow","","Reset text-shadow from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_shadow","","Get the computed value for text-shadow.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_rendering","","Set text-rendering.",686,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_rendering_from","","Set text-rendering from other struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_rendering","","Reset text-rendering from the initial struct.",686,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_rendering","","Get the computed value for text-rendering.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",687,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",687,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",687,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",687,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",687,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_list_style_position","","Set list-style-position.",687,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_list_style_position_from","","Set list-style-position from other struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_list_style_position","","Reset list-style-position from the initial struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_list_style_position","","Get the computed value for list-style-position.",687,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_list_style_type","","Set list-style-type.",687,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_list_style_type_from","","Set list-style-type from other struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_list_style_type","","Reset list-style-type from the initial struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_list_style_type","","Get the computed value for list-style-type.",687,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_list_style_image","","Set list-style-image.",687,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_list_style_image_from","","Set list-style-image from other struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_list_style_image","","Reset list-style-image from the initial struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_list_style_image","","Get the computed value for list-style-image.",687,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_quotes","","Set quotes.",687,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_quotes_from","","Set quotes from other struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_quotes","","Reset quotes from the initial struct.",687,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_quotes","","Get the computed value for quotes.",687,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",688,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"fmt","","",688,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",688,{"inputs":[{"name":"self"},{"name":"margin"}],"output":{"name":"bool"}}],[11,"ne","","",688,{"inputs":[{"name":"self"},{"name":"margin"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",688,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_margin_top","","Set margin-top.",688,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_margin_top_from","","Set margin-top from other struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_margin_top","","Reset margin-top from the initial struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_margin_top","","Get the computed value for margin-top.",688,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_margin_left","","Set margin-left.",688,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_margin_left_from","","Set margin-left from other struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_margin_left","","Reset margin-left from the initial struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_margin_left","","Get the computed value for margin-left.",688,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_margin_bottom","","Set margin-bottom.",688,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_margin_bottom_from","","Set margin-bottom from other struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_margin_bottom","","Reset margin-bottom from the initial struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_margin_bottom","","Get the computed value for margin-bottom.",688,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_margin_right","","Set margin-right.",688,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_margin_right_from","","Set margin-right from other struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_margin_right","","Reset margin-right from the initial struct.",688,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_margin_right","","Get the computed value for margin-right.",688,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_margin_block_start","","Set the appropriate physical property for margin-block-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_margin_block_start_from","","Copy the appropriate physical property from another struct for margin-block-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_margin_block_start","","Copy the appropriate physical property from another struct for margin-block-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_margin_block_start","","Get the computed value for the appropriate physical property for margin-block-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_margin_block_end","","Set the appropriate physical property for margin-block-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_margin_block_end_from","","Copy the appropriate physical property from another struct for margin-block-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_margin_block_end","","Copy the appropriate physical property from another struct for margin-block-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_margin_block_end","","Get the computed value for the appropriate physical property for margin-block-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_margin_inline_start","","Set the appropriate physical property for margin-inline-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_margin_inline_start_from","","Copy the appropriate physical property from another struct for margin-inline-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_margin_inline_start","","Copy the appropriate physical property from another struct for margin-inline-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_margin_inline_start","","Get the computed value for the appropriate physical property for margin-inline-start given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_margin_inline_end","","Set the appropriate physical property for margin-inline-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_margin_inline_end_from","","Copy the appropriate physical property from another struct for margin-inline-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_margin_inline_end","","Copy the appropriate physical property from another struct for margin-inline-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_margin_inline_end","","Get the computed value for the appropriate physical property for margin-inline-end given a writing mode.",688,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"clone","","",689,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"fmt","","",689,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",689,{"inputs":[{"name":"self"},{"name":"outline"}],"output":{"name":"bool"}}],[11,"ne","","",689,{"inputs":[{"name":"self"},{"name":"outline"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",689,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_outline_color","","Set outline-color.",689,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_outline_color_from","","Set outline-color from other struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_outline_color","","Reset outline-color from the initial struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_outline_color","","Get the computed value for outline-color.",689,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_outline_style","","Set outline-style.",689,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_outline_style_from","","Set outline-style from other struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_outline_style","","Reset outline-style from the initial struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_outline_style","","Get the computed value for outline-style.",689,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_outline_width","","Set outline-width.",689,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_outline_width_from","","Set outline-width from other struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_outline_width","","Reset outline-width from the initial struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_outline_width","","Get the computed value for outline-width.",689,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_outline_offset","","Set outline-offset.",689,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_outline_offset_from","","Set outline-offset from other struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_outline_offset","","Reset outline-offset from the initial struct.",689,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_outline_offset","","Get the computed value for outline-offset.",689,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"outline_has_nonzero_width","","Whether the outline-width property is non-zero.",689,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",690,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",690,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",690,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",690,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_padding_top","","Set padding-top.",690,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_padding_top_from","","Set padding-top from other struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_padding_top","","Reset padding-top from the initial struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_padding_top","","Get the computed value for padding-top.",690,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_padding_left","","Set padding-left.",690,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_padding_left_from","","Set padding-left from other struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_padding_left","","Reset padding-left from the initial struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_padding_left","","Get the computed value for padding-left.",690,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_padding_bottom","","Set padding-bottom.",690,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_padding_bottom_from","","Set padding-bottom from other struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_padding_bottom","","Reset padding-bottom from the initial struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_padding_bottom","","Get the computed value for padding-bottom.",690,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_padding_right","","Set padding-right.",690,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_padding_right_from","","Set padding-right from other struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_padding_right","","Reset padding-right from the initial struct.",690,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_padding_right","","Get the computed value for padding-right.",690,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_padding_block_start","","Set the appropriate physical property for padding-block-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_padding_block_start_from","","Copy the appropriate physical property from another struct for padding-block-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_padding_block_start","","Copy the appropriate physical property from another struct for padding-block-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_padding_block_start","","Get the computed value for the appropriate physical property for padding-block-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_padding_block_end","","Set the appropriate physical property for padding-block-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_padding_block_end_from","","Copy the appropriate physical property from another struct for padding-block-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_padding_block_end","","Copy the appropriate physical property from another struct for padding-block-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_padding_block_end","","Get the computed value for the appropriate physical property for padding-block-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_padding_inline_start","","Set the appropriate physical property for padding-inline-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_padding_inline_start_from","","Copy the appropriate physical property from another struct for padding-inline-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_padding_inline_start","","Copy the appropriate physical property from another struct for padding-inline-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_padding_inline_start","","Get the computed value for the appropriate physical property for padding-inline-start given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_padding_inline_end","","Set the appropriate physical property for padding-inline-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_padding_inline_end_from","","Copy the appropriate physical property from another struct for padding-inline-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_padding_inline_end","","Copy the appropriate physical property from another struct for padding-inline-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_padding_inline_end","","Get the computed value for the appropriate physical property for padding-inline-end given a writing mode.",690,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"clone","","",691,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"fmt","","",691,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",691,{"inputs":[{"name":"self"},{"name":"pointing"}],"output":{"name":"bool"}}],[11,"ne","","",691,{"inputs":[{"name":"self"},{"name":"pointing"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",691,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_cursor","","Set cursor.",691,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_cursor_from","","Set cursor from other struct.",691,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_cursor","","Reset cursor from the initial struct.",691,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_cursor","","Get the computed value for cursor.",691,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_pointer_events","","Set pointer-events.",691,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_pointer_events_from","","Set pointer-events from other struct.",691,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_pointer_events","","Reset pointer-events from the initial struct.",691,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_pointer_events","","Get the computed value for pointer-events.",691,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",692,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",692,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",692,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",692,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",692,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_top","","Set top.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_top_from","","Set top from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_top","","Reset top from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_top","","Get the computed value for top.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_left","","Set left.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_left_from","","Set left from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_left","","Reset left from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_left","","Get the computed value for left.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_bottom","","Set bottom.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_bottom_from","","Set bottom from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_bottom","","Reset bottom from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_bottom","","Get the computed value for bottom.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_right","","Set right.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_right_from","","Set right from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_right","","Reset right from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_right","","Get the computed value for right.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_offset_block_start","","Set the appropriate physical property for offset-block-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_offset_block_start_from","","Copy the appropriate physical property from another struct for offset-block-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_offset_block_start","","Copy the appropriate physical property from another struct for offset-block-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_offset_block_start","","Get the computed value for the appropriate physical property for offset-block-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_offset_block_end","","Set the appropriate physical property for offset-block-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_offset_block_end_from","","Copy the appropriate physical property from another struct for offset-block-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_offset_block_end","","Copy the appropriate physical property from another struct for offset-block-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_offset_block_end","","Get the computed value for the appropriate physical property for offset-block-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_offset_inline_start","","Set the appropriate physical property for offset-inline-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_offset_inline_start_from","","Copy the appropriate physical property from another struct for offset-inline-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_offset_inline_start","","Copy the appropriate physical property from another struct for offset-inline-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_offset_inline_start","","Get the computed value for the appropriate physical property for offset-inline-start given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_offset_inline_end","","Set the appropriate physical property for offset-inline-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_offset_inline_end_from","","Copy the appropriate physical property from another struct for offset-inline-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_offset_inline_end","","Copy the appropriate physical property from another struct for offset-inline-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_offset_inline_end","","Get the computed value for the appropriate physical property for offset-inline-end given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_z_index","","Set z-index.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_z_index_from","","Set z-index from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_z_index","","Reset z-index from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_z_index","","Get the computed value for z-index.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_flex_direction","","Set flex-direction.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_flex_direction_from","","Set flex-direction from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_flex_direction","","Reset flex-direction from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_flex_direction","","Get the computed value for flex-direction.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_flex_wrap","","Set flex-wrap.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_flex_wrap_from","","Set flex-wrap from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_flex_wrap","","Reset flex-wrap from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_flex_wrap","","Get the computed value for flex-wrap.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_justify_content","","Set justify-content.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_justify_content_from","","Set justify-content from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_justify_content","","Reset justify-content from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_justify_content","","Get the computed value for justify-content.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_align_content","","Set align-content.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_align_content_from","","Set align-content from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_align_content","","Reset align-content from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_align_content","","Get the computed value for align-content.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_align_items","","Set align-items.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_align_items_from","","Set align-items from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_align_items","","Reset align-items from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_align_items","","Get the computed value for align-items.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_flex_grow","","Set flex-grow.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_flex_grow_from","","Set flex-grow from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_flex_grow","","Reset flex-grow from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_flex_grow","","Get the computed value for flex-grow.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_flex_shrink","","Set flex-shrink.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_flex_shrink_from","","Set flex-shrink from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_flex_shrink","","Reset flex-shrink from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_flex_shrink","","Get the computed value for flex-shrink.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_align_self","","Set align-self.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_align_self_from","","Set align-self from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_align_self","","Reset align-self from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_align_self","","Get the computed value for align-self.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_order","","Set order.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_order_from","","Set order from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_order","","Reset order from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_order","","Get the computed value for order.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_flex_basis","","Set flex-basis.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_flex_basis_from","","Set flex-basis from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_flex_basis","","Reset flex-basis from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_flex_basis","","Get the computed value for flex-basis.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_width","","Set width.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_width_from","","Set width from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_width","","Reset width from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_width","","Get the computed value for width.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_min_width","","Set min-width.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_min_width_from","","Set min-width from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_min_width","","Reset min-width from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_min_width","","Get the computed value for min-width.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_max_width","","Set max-width.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_max_width_from","","Set max-width from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_max_width","","Reset max-width from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_max_width","","Get the computed value for max-width.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_height","","Set height.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_height_from","","Set height from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_height","","Reset height from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_height","","Get the computed value for height.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_min_height","","Set min-height.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_min_height_from","","Set min-height from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_min_height","","Reset min-height from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_min_height","","Get the computed value for min-height.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_max_height","","Set max-height.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_max_height_from","","Set max-height from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_max_height","","Reset max-height from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_max_height","","Get the computed value for max-height.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_block_size","","Set the appropriate physical property for block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_block_size_from","","Copy the appropriate physical property from another struct for block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_block_size","","Copy the appropriate physical property from another struct for block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_block_size","","Get the computed value for the appropriate physical property for block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_min_block_size","","Set the appropriate physical property for min-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_min_block_size_from","","Copy the appropriate physical property from another struct for min-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_min_block_size","","Copy the appropriate physical property from another struct for min-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_min_block_size","","Get the computed value for the appropriate physical property for min-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_max_block_size","","Set the appropriate physical property for max-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_max_block_size_from","","Copy the appropriate physical property from another struct for max-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_max_block_size","","Copy the appropriate physical property from another struct for max-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_max_block_size","","Get the computed value for the appropriate physical property for max-block-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_inline_size","","Set the appropriate physical property for inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_inline_size_from","","Copy the appropriate physical property from another struct for inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_inline_size","","Copy the appropriate physical property from another struct for inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_inline_size","","Get the computed value for the appropriate physical property for inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_min_inline_size","","Set the appropriate physical property for min-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_min_inline_size_from","","Copy the appropriate physical property from another struct for min-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_min_inline_size","","Copy the appropriate physical property from another struct for min-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_min_inline_size","","Get the computed value for the appropriate physical property for min-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_max_inline_size","","Set the appropriate physical property for max-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"t"},{"name":"writingmode"}],"output":null}],[11,"copy_max_inline_size_from","","Copy the appropriate physical property from another struct for max-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"reset_max_inline_size","","Copy the appropriate physical property from another struct for max-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"self"},{"name":"writingmode"}],"output":null}],[11,"clone_max_inline_size","","Get the computed value for the appropriate physical property for max-inline-size given a writing mode.",692,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"t"}}],[11,"set_box_sizing","","Set box-sizing.",692,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_box_sizing_from","","Set box-sizing from other struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_box_sizing","","Reset box-sizing from the initial struct.",692,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_box_sizing","","Get the computed value for box-sizing.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",693,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"fmt","","",693,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",693,{"inputs":[{"name":"self"},{"name":"table"}],"output":{"name":"bool"}}],[11,"ne","","",693,{"inputs":[{"name":"self"},{"name":"table"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",693,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_table_layout","","Set table-layout.",693,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_table_layout_from","","Set table-layout from other struct.",693,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_table_layout","","Reset table-layout from the initial struct.",693,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_table_layout","","Get the computed value for table-layout.",693,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",694,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"fmt","","",694,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",694,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",694,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",694,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_text_overflow","","Set text-overflow.",694,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_overflow_from","","Set text-overflow from other struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_overflow","","Reset text-overflow from the initial struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_overflow","","Get the computed value for text-overflow.",694,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_unicode_bidi","","Set unicode-bidi.",694,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_unicode_bidi_from","","Set unicode-bidi from other struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_unicode_bidi","","Reset unicode-bidi from the initial struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_unicode_bidi","","Get the computed value for unicode-bidi.",694,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_text_decoration_line","","Set text-decoration-line.",694,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"copy_text_decoration_line_from","","Set text-decoration-line from other struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"reset_text_decoration_line","","Reset text-decoration-line from the initial struct.",694,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone_text_decoration_line","","Get the computed value for text-decoration-line.",694,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"has_underline","","Whether the text decoration has an underline.",694,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_overline","","Whether the text decoration has an overline.",694,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_line_through","","Whether the text decoration has a line through.",694,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","style::properties","",695,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"initialize","","",695,{"inputs":[{"name":"self"}],"output":null}],[6,"FontComputationData","","This is where we store extra font data while while computing font sizes.",null,null],[6,"CascadePropertyFn","","A per-longhand function that performs the CSS cascade for that longhand.",null,null],[17,"CREATES_STACKING_CONTEXT","","This property requires a stacking context.",null,null],[17,"FIXPOS_CB","","This property has values that can establish a containing block for fixed positioned and absolutely positioned elements.",null,null],[17,"ABSPOS_CB","","This property has values that can establish a containing block for absolutely positioned elements.",null,null],[17,"SHORTHAND_ALIAS_PROPERTY","","This shorthand property is an alias of another property.",null,null],[17,"APPLIES_TO_FIRST_LETTER","","This longhand property applies to ::first-letter.",null,null],[17,"APPLIES_TO_FIRST_LINE","","This longhand property applies to ::first-line.",null,null],[17,"APPLIES_TO_PLACEHOLDER","","This longhand property applies to ::placeholder.",null,null],[17,"INHERIT_ALL","","Whether to inherit all styles from the parent. If this flag is not present, non-inherited styles are reset to their initial values.",null,null],[17,"SKIP_ROOT_AND_ITEM_BASED_DISPLAY_FIXUP","","Whether to skip any display style fixup for root element, flex/grid item, and ruby descendants.",null,null],[17,"VISITED_DEPENDENT_ONLY","","Whether to only cascade properties that are visited dependent.",null,null],[17,"IS_ROOT_ELEMENT","","Whether the given element we're styling is the document element, that is, matches :root.",null,null],[17,"PROHIBIT_DISPLAY_CONTENTS","","Whether to convert display:contents into display:inline.  This is used by Gecko to prevent display:contents on generated content.",null,null],[17,"IS_FIELDSET_CONTENT","","Whether we're styling the ::-moz-fieldset-content anonymous box.",null,null],[17,"IS_LINK","","Whether we're computing the style of a link, either visited or unvisited.",null,null],[17,"IS_VISITED_LINK","","Whether we're computing the style of a link element that happens to be visited.",null,null],[8,"MaybeBoxed","","Conversion with fewer impls than From/Into",null,null],[10,"maybe_boxed","","Convert",696,{"inputs":[{"name":"self"}],"output":{"name":"out"}}],[11,"clone","","",697,{"inputs":[{"name":"self"}],"output":{"name":"noncustompropertyid"}}],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",697,{"inputs":[{"name":"longhandid"}],"output":{"name":"self"}}],[11,"from","","",697,{"inputs":[{"name":"shorthandid"}],"output":{"name":"self"}}],[11,"from","","",697,{"inputs":[{"name":"aliasid"}],"output":{"name":"self"}}],[11,"clone","","",698,{"inputs":[{"name":"self"}],"output":{"name":"noncustompropertyidset"}}],[11,"eq","","",698,{"inputs":[{"name":"self"},{"name":"noncustompropertyidset"}],"output":{"name":"bool"}}],[11,"ne","","",698,{"inputs":[{"name":"self"},{"name":"noncustompropertyidset"}],"output":{"name":"bool"}}],[11,"contains","","Return whether the given property is in the set",698,{"inputs":[{"name":"self"},{"name":"noncustompropertyid"}],"output":{"name":"bool"}}],[11,"clone","","",699,{"inputs":[{"name":"self"}],"output":{"name":"longhandidset"}}],[11,"eq","","",699,{"inputs":[{"name":"self"},{"name":"longhandidset"}],"output":{"name":"bool"}}],[11,"ne","","",699,{"inputs":[{"name":"self"},{"name":"longhandidset"}],"output":{"name":"bool"}}],[11,"new","","Create an empty set",699,{"inputs":[],"output":{"name":"longhandidset"}}],[11,"contains","","Return whether the given property is in the set",699,{"inputs":[{"name":"self"},{"name":"longhandid"}],"output":{"name":"bool"}}],[11,"insert","","Add the given property to the set",699,{"inputs":[{"name":"self"},{"name":"longhandid"}],"output":null}],[11,"remove","","Remove the given property from the set",699,{"inputs":[{"name":"self"},{"name":"longhandid"}],"output":null}],[11,"clear","","Clear all bits",699,{"inputs":[{"name":"self"}],"output":null}],[11,"set_animatable_longhand_bit","","Set the corresponding bit of AnimatableLonghand.",699,{"inputs":[{"name":"self"},{"name":"animatablelonghand"}],"output":null}],[11,"has_animatable_longhand_bit","","Return true if the corresponding bit of AnimatableLonghand is set.",699,{"inputs":[{"name":"self"},{"name":"animatablelonghand"}],"output":{"name":"bool"}}],[11,"new","","Empty set",700,{"inputs":[],"output":{"name":"self"}}],[11,"contains","","Returns whether the given ID is in the set",700,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":{"name":"bool"}}],[11,"insert","","Insert the given ID in the set",700,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":null}],[11,"heap_size_of_children","","",452,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",452,{"inputs":[{"name":"self"}],"output":{"name":"csswidekeyword"}}],[11,"fmt","","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",452,{"inputs":[{"name":"self"},{"name":"csswidekeyword"}],"output":{"name":"bool"}}],[11,"to_css","","",452,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from_ident","","Takes the result of cssparser::Parser::expect_ident() and converts it to a CSSWideKeyword.",452,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"ne","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"clone","","",701,{"inputs":[{"name":"self"}],"output":{"name":"propertyflags"}}],[11,"partial_cmp","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"option"}}],[11,"lt","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"le","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"gt","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"ge","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",701,null],[11,"fmt","","",701,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",701,{"inputs":[],"output":{"name":"propertyflags"}}],[11,"all","","Returns the set containing all flags.",701,{"inputs":[],"output":{"name":"propertyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",701,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",701,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",701,{"inputs":[{"name":"u8"}],"output":{"name":"propertyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",701,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"propertyflags"}}],[11,"bitor_assign","","Adds the set of flags.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"propertyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"propertyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":{"name":"propertyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",701,{"inputs":[{"name":"self"},{"name":"propertyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",701,{"inputs":[{"name":"self"}],"output":{"name":"propertyflags"}}],[11,"extend","","",701,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",701,{"inputs":[{"name":"t"}],"output":{"name":"propertyflags"}}],[11,"clone","","",453,{"inputs":[{"name":"self"}],"output":{"name":"longhandid"}}],[11,"eq","","",453,{"inputs":[{"name":"self"},{"name":"longhandid"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",453,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",453,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Get the name of this longhand property.",453,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_physical","","If this is a logical property, return the corresponding physical one in the given writing mode. Otherwise, return unchanged.",453,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"self"}}],[11,"flags","","Returns PropertyFlags for given longhand property.",453,{"inputs":[{"name":"self"}],"output":{"name":"propertyflags"}}],[11,"stores_complex_colors_lossily","","Whether computed values of this property lossily convert any complex colors into RGBA colors.",453,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",454,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",454,{"inputs":[{"name":"self"}],"output":{"name":"shorthandid"}}],[11,"fmt","","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",454,{"inputs":[{"name":"self"},{"name":"shorthandid"}],"output":{"name":"bool"}}],[11,"to_css","","",454,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"name","","Get the name for this shorthand property.",454,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"longhands","","Get the longhand ids that form this shorthand.",454,null],[11,"longhands_to_css","","Try to serialize the given declarations as this shorthand.",454,{"inputs":[{"name":"self"},{"name":"i"},{"name":"w"}],"output":{"name":"result"}}],[11,"get_shorthand_appendable_value","","Finds and returns an appendable value for the given declarations.",454,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"flags","","Returns PropertyFlags for given shorthand property.",454,{"inputs":[{"name":"self"}],"output":{"name":"propertyflags"}}],[11,"clone","","",455,{"inputs":[{"name":"self"}],"output":{"name":"declaredvalue"}}],[11,"fmt","","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",455,{"inputs":[{"name":"self"},{"name":"declaredvalue"}],"output":{"name":"bool"}}],[11,"ne","","",455,{"inputs":[{"name":"self"},{"name":"declaredvalue"}],"output":{"name":"bool"}}],[11,"clone","","",456,{"inputs":[{"name":"self"}],"output":{"name":"declaredvalueowned"}}],[11,"fmt","","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",456,{"inputs":[{"name":"self"},{"name":"declaredvalueowned"}],"output":{"name":"bool"}}],[11,"ne","","",456,{"inputs":[{"name":"self"},{"name":"declaredvalueowned"}],"output":{"name":"bool"}}],[11,"fmt","","",702,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",702,{"inputs":[{"name":"self"},{"name":"unparsedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",702,{"inputs":[{"name":"self"},{"name":"unparsedvalue"}],"output":{"name":"bool"}}],[11,"to_css","","",455,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",457,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclarationid"}}],[11,"eq","","",457,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":{"name":"bool"}}],[11,"ne","","",457,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",457,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",457,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"is_or_is_longhand_of","","Whether a given declaration id is either the same as `other`, or a longhand of it.",457,{"inputs":[{"name":"self"},{"name":"propertyid"}],"output":{"name":"bool"}}],[11,"is_longhand_of","","Whether a given declaration id is a longhand belonging to this shorthand.",457,{"inputs":[{"name":"self"},{"name":"shorthandid"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the property without CSS escaping.",457,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",458,{"inputs":[{"name":"self"}],"output":{"name":"propertyid"}}],[11,"eq","","",458,{"inputs":[{"name":"self"},{"name":"propertyid"}],"output":{"name":"bool"}}],[11,"ne","","",458,{"inputs":[{"name":"self"},{"name":"propertyid"}],"output":{"name":"bool"}}],[11,"fmt","","",458,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",458,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Returns a given property from the string `s`.",458,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"as_shorthand","","Given this property id, get it either as a shorthand or as a `PropertyDeclarationId`.",458,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"name","","Returns the name of the property without CSS escaping.",458,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"new","","Creates a PropertyParserContext with given stylesheet origin and rule type.",449,{"inputs":[{"name":"parsercontext"}],"output":{"name":"self"}}],[11,"clone","","",459,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclaration"}}],[11,"eq","","",459,{"inputs":[{"name":"self"},{"name":"propertydeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"self"},{"name":"propertydeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_css","","",459,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"id","","Given a property declaration, return the property declaration id.",459,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclarationid"}}],[11,"get_css_wide_keyword","","Returns a CSS-wide keyword if the declaration's value is one.",459,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_default_line_height","","Is it the default value of line-height?",459,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_system","","Dummy method to avoid cfg()s",459,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"may_serialize_as_part_of_shorthand","","Returns whether the declaration may be serialized as part of a shorthand.",459,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"value_is_unparsed","","Return whether the value is stored as it was in the CSS source, preserving whitespace (as opposed to being parsed into a more abstract data structure).",459,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shorthands","","The shorthands that this longhand is part of.",459,null],[11,"is_animatable","","Returns true if this property is one of the animable properties, false otherwise.",459,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_into","","The `context` parameter controls this:",459,{"inputs":[{"name":"sourcepropertydeclaration"},{"name":"propertyid"},{"name":"cowrcstr"},{"name":"parsercontext"},{"name":"parser"}],"output":{"name":"result"}}],[11,"new","","Create one. It’s big, try not to move it around.",703,{"inputs":[],"output":{"name":"self"}}],[11,"drain","","Similar to Vec::drain: leaves this empty when the return value is dropped.",703,{"inputs":[{"name":"self"}],"output":{"name":"sourcepropertydeclarationdrain"}}],[11,"clear","","Reset to initial state",703,{"inputs":[{"name":"self"}],"output":null}],[11,"transition_duration_iter","style::properties::style_structs","Iterate over the values of transition-duration.",678,{"inputs":[{"name":"self"}],"output":{"name":"transitiondurationiter"}}],[11,"transition_duration_mod","","Get a value mod `index` for the property transition-duration.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"transition_timing_function_iter","","Iterate over the values of transition-timing-function.",678,{"inputs":[{"name":"self"}],"output":{"name":"transitiontimingfunctioniter"}}],[11,"transition_timing_function_mod","","Get a value mod `index` for the property transition-timing-function.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"transition_property_iter","","Iterate over the values of transition-property.",678,{"inputs":[{"name":"self"}],"output":{"name":"transitionpropertyiter"}}],[11,"transition_property_mod","","Get a value mod `index` for the property transition-property.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"transition_delay_iter","","Iterate over the values of transition-delay.",678,{"inputs":[{"name":"self"}],"output":{"name":"transitiondelayiter"}}],[11,"transition_delay_mod","","Get a value mod `index` for the property transition-delay.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_name_iter","","Iterate over the values of animation-name.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationnameiter"}}],[11,"animation_name_mod","","Get a value mod `index` for the property animation-name.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_duration_iter","","Iterate over the values of animation-duration.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationdurationiter"}}],[11,"animation_duration_mod","","Get a value mod `index` for the property animation-duration.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_timing_function_iter","","Iterate over the values of animation-timing-function.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationtimingfunctioniter"}}],[11,"animation_timing_function_mod","","Get a value mod `index` for the property animation-timing-function.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_iteration_count_iter","","Iterate over the values of animation-iteration-count.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationiterationcountiter"}}],[11,"animation_iteration_count_mod","","Get a value mod `index` for the property animation-iteration-count.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_direction_iter","","Iterate over the values of animation-direction.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationdirectioniter"}}],[11,"animation_direction_mod","","Get a value mod `index` for the property animation-direction.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_play_state_iter","","Iterate over the values of animation-play-state.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationplaystateiter"}}],[11,"animation_play_state_mod","","Get a value mod `index` for the property animation-play-state.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_fill_mode_iter","","Iterate over the values of animation-fill-mode.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationfillmodeiter"}}],[11,"animation_fill_mode_mod","","Get a value mod `index` for the property animation-fill-mode.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"animation_delay_iter","","Iterate over the values of animation-delay.",678,{"inputs":[{"name":"self"}],"output":{"name":"animationdelayiter"}}],[11,"animation_delay_mod","","Get a value mod `index` for the property animation-delay.",678,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"singlecomputedvalue"}}],[11,"specifies_animations","","Returns whether there is any animation specified with animation-name other than `none`.",678,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"specifies_transitions","","Returns whether there are any transitions specified.",678,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","style::properties","",704,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",705,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",706,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",707,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",708,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",709,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",710,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",711,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",712,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",713,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",714,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",715,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",450,{"inputs":[{"name":"self"}],"output":{"name":"computedvaluesinner"}}],[11,"fmt","","",450,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",716,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"fmt","","",716,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visited_rules","","Returns the visited rules, if applicable.",716,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_in_display_none_subtree","","Returns whether we're in a display: none subtree.",716,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new refcounted `ComputedValues`",716,{"inputs":[{"name":"device"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"writingmode"},{"name":"fontcomputationdata"},{"name":"computedvalueflags"},{"name":"option"},{"name":"option"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"initial_values","","Get the initial computed values.",716,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Construct a `ComputedValuesInner` instance.",450,{"inputs":[{"name":"option"},{"name":"writingmode"},{"name":"fontcomputationdata"},{"name":"computedvalueflags"},{"name":"option"},{"name":"option"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"deref","","",716,{"inputs":[{"name":"self"}],"output":{"name":"computedvaluesinner"}}],[11,"deref_mut","","",716,{"inputs":[{"name":"self"}],"output":{"name":"computedvaluesinner"}}],[11,"clone_background","","Clone the Background struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_background","","Get a immutable reference to the Background struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"background_arc","","Gets an immutable reference to the refcounted value that wraps `Background`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_background","","Get a mutable reference to the Background struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"clone_border","","Clone the Border struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_border","","Get a immutable reference to the Border struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"border_arc","","Gets an immutable reference to the refcounted value that wraps `Border`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_border","","Get a mutable reference to the Border struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"clone_box","","Clone the Box struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_box","","Get a immutable reference to the Box struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"box_arc","","Gets an immutable reference to the refcounted value that wraps `Box`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_box","","Get a mutable reference to the Box struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_color","","Clone the Color struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_color","","Get a immutable reference to the Color struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"color_arc","","Gets an immutable reference to the refcounted value that wraps `Color`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_color","","Get a mutable reference to the Color struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clone_column","","Clone the Column struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_column","","Get a immutable reference to the Column struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"column_arc","","Gets an immutable reference to the refcounted value that wraps `Column`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_column","","Get a mutable reference to the Column struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"clone_counters","","Clone the Counters struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_counters","","Get a immutable reference to the Counters struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"counters_arc","","Gets an immutable reference to the refcounted value that wraps `Counters`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_counters","","Get a mutable reference to the Counters struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"clone_effects","","Clone the Effects struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_effects","","Get a immutable reference to the Effects struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"effects_arc","","Gets an immutable reference to the refcounted value that wraps `Effects`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_effects","","Get a mutable reference to the Effects struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"clone_font","","Clone the Font struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_font","","Get a immutable reference to the Font struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"font_arc","","Gets an immutable reference to the refcounted value that wraps `Font`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_font","","Get a mutable reference to the Font struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"clone_inheritedbox","","Clone the InheritedBox struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_inheritedbox","","Get a immutable reference to the InheritedBox struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"inheritedbox_arc","","Gets an immutable reference to the refcounted value that wraps `InheritedBox`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_inheritedbox","","Get a mutable reference to the InheritedBox struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"clone_inheritedtable","","Clone the InheritedTable struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_inheritedtable","","Get a immutable reference to the InheritedTable struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"inheritedtable_arc","","Gets an immutable reference to the refcounted value that wraps `InheritedTable`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_inheritedtable","","Get a mutable reference to the InheritedTable struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"clone_inheritedtext","","Clone the InheritedText struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_inheritedtext","","Get a immutable reference to the InheritedText struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"inheritedtext_arc","","Gets an immutable reference to the refcounted value that wraps `InheritedText`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_inheritedtext","","Get a mutable reference to the InheritedText struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"clone_list","","Clone the List struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_list","","Get a immutable reference to the List struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"list_arc","","Gets an immutable reference to the refcounted value that wraps `List`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_list","","Get a mutable reference to the List struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"clone_margin","","Clone the Margin struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_margin","","Get a immutable reference to the Margin struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"margin_arc","","Gets an immutable reference to the refcounted value that wraps `Margin`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_margin","","Get a mutable reference to the Margin struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"clone_outline","","Clone the Outline struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_outline","","Get a immutable reference to the Outline struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"outline_arc","","Gets an immutable reference to the refcounted value that wraps `Outline`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_outline","","Get a mutable reference to the Outline struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"clone_padding","","Clone the Padding struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_padding","","Get a immutable reference to the Padding struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"padding_arc","","Gets an immutable reference to the refcounted value that wraps `Padding`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_padding","","Get a mutable reference to the Padding struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"clone_pointing","","Clone the Pointing struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_pointing","","Get a immutable reference to the Pointing struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"pointing_arc","","Gets an immutable reference to the refcounted value that wraps `Pointing`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_pointing","","Get a mutable reference to the Pointing struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"clone_position","","Clone the Position struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_position","","Get a immutable reference to the Position struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"position_arc","","Gets an immutable reference to the refcounted value that wraps `Position`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_position","","Get a mutable reference to the Position struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"clone_table","","Clone the Table struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_table","","Get a immutable reference to the Table struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"table_arc","","Gets an immutable reference to the refcounted value that wraps `Table`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_table","","Get a mutable reference to the Table struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"clone_text","","Clone the Text struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"get_text","","Get a immutable reference to the Text struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"text_arc","","Gets an immutable reference to the refcounted value that wraps `Text`.",450,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"mutate_text","","Get a mutable reference to the Text struct.",450,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"rules","","Gets a reference to the rule node. Panic if no rule node exists.",450,{"inputs":[{"name":"self"}],"output":{"name":"strongrulenode"}}],[11,"has_visited_style","","Whether there is a visited style.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_visited_style","","Gets a reference to the visited style, if any.",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"visited_style","","Gets a reference to the visited style. Panic if no visited style exists.",450,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"clone_visited_style","","Clone the visited style.  Used for inheriting parent styles in StyleBuilder::for_inheritance.",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_custom_properties","","Gets a reference to the custom properties map (if one exists).",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"custom_properties","","Get the custom properties map if necessary.",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_moz_binding","","Whether this style has a -moz-binding value. This is always false for Servo for obvious reasons.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_style_if_visited","","Whether we're a visited style.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_display_contents","","Returns whether this style's display value is equal to contents.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ineffective_content_property","","Returns whether the \"content\" property for the given style is completely ineffective, and would yield an empty `::before` or `::after` pseudo-element.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicol","","Whether the current style is multicolumn.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resolve_color","","Resolves the currentColor keyword.",450,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"rgba"}}],[11,"content_inline_size","","Get the logical computed inline size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"content_block_size","","Get the logical computed block size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"min_inline_size","","Get the logical computed min inline size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentage"}}],[11,"min_block_size","","Get the logical computed min block size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentage"}}],[11,"max_inline_size","","Get the logical computed max inline size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageornone"}}],[11,"max_block_size","","Get the logical computed max block size.",450,{"inputs":[{"name":"self"}],"output":{"name":"lengthorpercentageornone"}}],[11,"logical_padding","","Get the logical computed padding for this writing mode.",450,{"inputs":[{"name":"self"}],"output":{"name":"logicalmargin"}}],[11,"border_width_for_writing_mode","","Get the logical border width",450,{"inputs":[{"name":"self"},{"name":"writingmode"}],"output":{"name":"logicalmargin"}}],[11,"logical_border_width","","Gets the logical computed border widths for this style.",450,{"inputs":[{"name":"self"}],"output":{"name":"logicalmargin"}}],[11,"logical_margin","","Gets the logical computed margin from this style.",450,{"inputs":[{"name":"self"}],"output":{"name":"logicalmargin"}}],[11,"logical_position","","Gets the logical position from this style.",450,{"inputs":[{"name":"self"}],"output":{"name":"logicalmargin"}}],[11,"overrides_transform_style","","Return true if the effects force the transform style to be Flat",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_used_transform_style","","https://drafts.csswg.org/css-transforms/#grouping-property-values",450,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transform_requires_layer","","Whether given this transform value, the compositor would require a layer.",450,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"computed_value_to_string","","Serializes the computed value of this property as a string.",450,{"inputs":[{"name":"self"},{"name":"propertydeclarationid"}],"output":{"name":"string"}}],[11,"mutate","","Ensure a mutable reference of this value exists, either cloning the borrowed value, or returning the owned one.",460,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Extract a unique Arc from this struct, vacating it.",460,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put","","Replace vacated ref with an arc",460,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_if_mutated","","Get a mutable reference to the owned struct, or `None` if the struct hasn't been mutated.",460,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"build","","Returns an `Arc` to the internal struct, constructing one if appropriate.",460,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",460,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_style_if_visited","","Whether we're a visited style.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"for_derived_style","","Creates a StyleBuilder holding only references to the structs of `s`, in order to create a derived style.",451,{"inputs":[{"name":"device"},{"name":"computedvalues"},{"name":"option"},{"name":"option"}],"output":{"name":"self"}}],[11,"copy_reset_from","","Copy the reset properties from `style`.",451,{"inputs":[{"name":"self"},{"name":"computedvalues"}],"output":null}],[11,"inherit_background_color","","Inherit `background_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_color","","Reset `background_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_background_color","","Set the `background_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_background_image","","Inherit `background_image` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_image","","Reset `background_image` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_position_x","","Inherit `background_position_x` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_position_x","","Reset `background_position_x` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_position_y","","Inherit `background_position_y` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_position_y","","Reset `background_position_y` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_repeat","","Inherit `background_repeat` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_repeat","","Reset `background_repeat` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_attachment","","Inherit `background_attachment` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_attachment","","Reset `background_attachment` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_clip","","Inherit `background_clip` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_clip","","Reset `background_clip` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_origin","","Inherit `background_origin` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_origin","","Reset `background_origin` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_background_size","","Inherit `background_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_background_size","","Reset `background_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_border_top_color","","Inherit `border_top_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_top_color","","Reset `border_top_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_top_color","","Set the `border_top_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_top_style","","Inherit `border_top_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_top_style","","Reset `border_top_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_top_style","","Set the `border_top_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_top_width","","Inherit `border_top_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_top_width","","Reset `border_top_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_top_width","","Set the `border_top_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_left_color","","Inherit `border_left_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_left_color","","Reset `border_left_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_left_color","","Set the `border_left_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_left_style","","Inherit `border_left_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_left_style","","Reset `border_left_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_left_style","","Set the `border_left_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_left_width","","Inherit `border_left_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_left_width","","Reset `border_left_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_left_width","","Set the `border_left_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_bottom_color","","Inherit `border_bottom_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_bottom_color","","Reset `border_bottom_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_bottom_color","","Set the `border_bottom_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_bottom_style","","Inherit `border_bottom_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_bottom_style","","Reset `border_bottom_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_bottom_style","","Set the `border_bottom_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_bottom_width","","Inherit `border_bottom_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_bottom_width","","Reset `border_bottom_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_bottom_width","","Set the `border_bottom_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_right_color","","Inherit `border_right_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_right_color","","Reset `border_right_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_right_color","","Set the `border_right_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_right_style","","Inherit `border_right_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_right_style","","Reset `border_right_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_right_style","","Set the `border_right_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_right_width","","Inherit `border_right_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_right_width","","Reset `border_right_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_right_width","","Set the `border_right_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_start_color","","Inherit `border_block_start_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_start_color","","Reset `border_block_start_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_start_color","","Set the `border_block_start_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_start_style","","Inherit `border_block_start_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_start_style","","Reset `border_block_start_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_start_style","","Set the `border_block_start_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_start_width","","Inherit `border_block_start_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_start_width","","Reset `border_block_start_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_start_width","","Set the `border_block_start_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_end_color","","Inherit `border_block_end_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_end_color","","Reset `border_block_end_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_end_color","","Set the `border_block_end_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_end_style","","Inherit `border_block_end_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_end_style","","Reset `border_block_end_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_end_style","","Set the `border_block_end_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_block_end_width","","Inherit `border_block_end_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_block_end_width","","Reset `border_block_end_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_block_end_width","","Set the `border_block_end_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_start_color","","Inherit `border_inline_start_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_start_color","","Reset `border_inline_start_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_start_color","","Set the `border_inline_start_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_start_style","","Inherit `border_inline_start_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_start_style","","Reset `border_inline_start_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_start_style","","Set the `border_inline_start_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_start_width","","Inherit `border_inline_start_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_start_width","","Reset `border_inline_start_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_start_width","","Set the `border_inline_start_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_end_color","","Inherit `border_inline_end_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_end_color","","Reset `border_inline_end_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_end_color","","Set the `border_inline_end_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_end_style","","Inherit `border_inline_end_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_end_style","","Reset `border_inline_end_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_end_style","","Set the `border_inline_end_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_inline_end_width","","Inherit `border_inline_end_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_inline_end_width","","Reset `border_inline_end_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_inline_end_width","","Set the `border_inline_end_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_top_left_radius","","Inherit `border_top_left_radius` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_top_left_radius","","Reset `border_top_left_radius` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_top_left_radius","","Set the `border_top_left_radius` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_top_right_radius","","Inherit `border_top_right_radius` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_top_right_radius","","Reset `border_top_right_radius` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_top_right_radius","","Set the `border_top_right_radius` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_bottom_right_radius","","Inherit `border_bottom_right_radius` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_bottom_right_radius","","Reset `border_bottom_right_radius` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_bottom_right_radius","","Set the `border_bottom_right_radius` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_bottom_left_radius","","Inherit `border_bottom_left_radius` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_bottom_left_radius","","Reset `border_bottom_left_radius` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_bottom_left_radius","","Set the `border_bottom_left_radius` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_image_source","","Inherit `border_image_source` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_image_source","","Reset `border_image_source` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_image_source","","Set the `border_image_source` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_image_outset","","Inherit `border_image_outset` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_image_outset","","Reset `border_image_outset` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_image_outset","","Set the `border_image_outset` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_image_repeat","","Inherit `border_image_repeat` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_image_repeat","","Reset `border_image_repeat` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_image_repeat","","Set the `border_image_repeat` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_image_width","","Inherit `border_image_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_image_width","","Reset `border_image_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_image_width","","Set the `border_image_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_image_slice","","Inherit `border_image_slice` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_image_slice","","Reset `border_image_slice` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_image_slice","","Set the `border_image_slice` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_display","","Inherit `display` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_display","","Reset `display` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_display","","Set the `display` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_position","","Inherit `position` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_position","","Reset `position` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_position","","Set the `position` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_float","","Inherit `float` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_float","","Reset `float` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_float","","Set the `float` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_clear","","Inherit `clear` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_clear","","Reset `clear` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_clear","","Set the `clear` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit__servo_display_for_hypothetical_box","","Inherit `_servo_display_for_hypothetical_box` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset__servo_display_for_hypothetical_box","","Reset `_servo_display_for_hypothetical_box` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set__servo_display_for_hypothetical_box","","Set the `_servo_display_for_hypothetical_box` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_vertical_align","","Inherit `vertical_align` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_vertical_align","","Reset `vertical_align` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_vertical_align","","Set the `vertical_align` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit__servo_overflow_clip_box","","Inherit `_servo_overflow_clip_box` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset__servo_overflow_clip_box","","Reset `_servo_overflow_clip_box` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set__servo_overflow_clip_box","","Set the `_servo_overflow_clip_box` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_overflow_x","","Inherit `overflow_x` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_overflow_x","","Reset `overflow_x` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_overflow_x","","Set the `overflow_x` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_overflow_y","","Inherit `overflow_y` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_overflow_y","","Reset `overflow_y` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_overflow_y","","Set the `overflow_y` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_transition_duration","","Inherit `transition_duration` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transition_duration","","Reset `transition_duration` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_transition_timing_function","","Inherit `transition_timing_function` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transition_timing_function","","Reset `transition_timing_function` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_transition_property","","Inherit `transition_property` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transition_property","","Reset `transition_property` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_transition_delay","","Inherit `transition_delay` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transition_delay","","Reset `transition_delay` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_name","","Inherit `animation_name` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_name","","Reset `animation_name` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_duration","","Inherit `animation_duration` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_duration","","Reset `animation_duration` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_timing_function","","Inherit `animation_timing_function` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_timing_function","","Reset `animation_timing_function` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_iteration_count","","Inherit `animation_iteration_count` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_iteration_count","","Reset `animation_iteration_count` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_direction","","Inherit `animation_direction` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_direction","","Reset `animation_direction` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_play_state","","Inherit `animation_play_state` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_play_state","","Reset `animation_play_state` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_fill_mode","","Inherit `animation_fill_mode` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_fill_mode","","Reset `animation_fill_mode` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_animation_delay","","Inherit `animation_delay` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_animation_delay","","Reset `animation_delay` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_transform","","Inherit `transform` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transform","","Reset `transform` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_transform","","Set the `transform` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_perspective","","Inherit `perspective` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_perspective","","Reset `perspective` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_perspective","","Set the `perspective` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_perspective_origin","","Inherit `perspective_origin` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_perspective_origin","","Reset `perspective_origin` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_perspective_origin","","Set the `perspective_origin` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_backface_visibility","","Inherit `backface_visibility` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_backface_visibility","","Reset `backface_visibility` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_backface_visibility","","Set the `backface_visibility` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_transform_style","","Inherit `transform_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transform_style","","Reset `transform_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_transform_style","","Set the `transform_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_transform_origin","","Inherit `transform_origin` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_transform_origin","","Reset `transform_origin` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_transform_origin","","Set the `transform_origin` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_color","","Inherit `color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_color","","Reset `color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_color","","Set the `color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_column_width","","Inherit `column_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_column_width","","Reset `column_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_width","","Set the `column_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_column_count","","Inherit `column_count` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_column_count","","Reset `column_count` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_count","","Set the `column_count` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_column_gap","","Inherit `column_gap` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_column_gap","","Reset `column_gap` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_gap","","Set the `column_gap` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_content","","Inherit `content` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_content","","Reset `content` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_content","","Set the `content` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_counter_increment","","Inherit `counter_increment` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_counter_increment","","Reset `counter_increment` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_counter_increment","","Set the `counter_increment` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_counter_reset","","Inherit `counter_reset` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_counter_reset","","Reset `counter_reset` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_counter_reset","","Set the `counter_reset` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_opacity","","Inherit `opacity` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_opacity","","Reset `opacity` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_opacity","","Set the `opacity` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_box_shadow","","Inherit `box_shadow` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_box_shadow","","Reset `box_shadow` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_clip","","Inherit `clip` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_clip","","Reset `clip` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_clip","","Set the `clip` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_filter","","Inherit `filter` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_filter","","Reset `filter` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_mix_blend_mode","","Inherit `mix_blend_mode` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_mix_blend_mode","","Reset `mix_blend_mode` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_mix_blend_mode","","Set the `mix_blend_mode` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_font_family","","Inherit `font_family` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_font_family","","Reset `font_family` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_font_family","","Set the `font_family` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_font_style","","Inherit `font_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_font_style","","Reset `font_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_font_style","","Set the `font_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_font_variant_caps","","Inherit `font_variant_caps` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_font_variant_caps","","Reset `font_variant_caps` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_font_variant_caps","","Set the `font_variant_caps` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_font_weight","","Inherit `font_weight` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_font_weight","","Reset `font_weight` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_font_weight","","Set the `font_weight` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_font_stretch","","Inherit `font_stretch` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_font_stretch","","Reset `font_stretch` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_font_stretch","","Set the `font_stretch` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_visibility","","Inherit `visibility` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_visibility","","Reset `visibility` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_visibility","","Set the `visibility` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_writing_mode","","Inherit `writing_mode` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_writing_mode","","Reset `writing_mode` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_writing_mode","","Set the `writing_mode` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_direction","","Inherit `direction` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_direction","","Reset `direction` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_direction","","Set the `direction` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_image_rendering","","Inherit `image_rendering` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_image_rendering","","Reset `image_rendering` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_image_rendering","","Set the `image_rendering` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_collapse","","Inherit `border_collapse` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_collapse","","Reset `border_collapse` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_collapse","","Set the `border_collapse` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_empty_cells","","Inherit `empty_cells` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_empty_cells","","Reset `empty_cells` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_empty_cells","","Set the `empty_cells` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_caption_side","","Inherit `caption_side` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_caption_side","","Reset `caption_side` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_caption_side","","Set the `caption_side` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_border_spacing","","Inherit `border_spacing` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_border_spacing","","Reset `border_spacing` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_border_spacing","","Set the `border_spacing` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_line_height","","Inherit `line_height` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_line_height","","Reset `line_height` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_line_height","","Set the `line_height` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_transform","","Inherit `text_transform` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_transform","","Reset `text_transform` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_transform","","Set the `text_transform` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_indent","","Inherit `text_indent` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_indent","","Reset `text_indent` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_indent","","Set the `text_indent` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_overflow_wrap","","Inherit `overflow_wrap` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_overflow_wrap","","Reset `overflow_wrap` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_overflow_wrap","","Set the `overflow_wrap` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_word_break","","Inherit `word_break` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_word_break","","Reset `word_break` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_word_break","","Set the `word_break` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_justify","","Inherit `text_justify` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_justify","","Reset `text_justify` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_justify","","Set the `text_justify` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_align","","Inherit `text_align` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_align","","Reset `text_align` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_align","","Set the `text_align` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_letter_spacing","","Inherit `letter_spacing` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_letter_spacing","","Reset `letter_spacing` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_letter_spacing","","Set the `letter_spacing` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_word_spacing","","Inherit `word_spacing` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_word_spacing","","Reset `word_spacing` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_word_spacing","","Set the `word_spacing` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit__servo_text_decorations_in_effect","","Inherit `_servo_text_decorations_in_effect` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset__servo_text_decorations_in_effect","","Reset `_servo_text_decorations_in_effect` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set__servo_text_decorations_in_effect","","Set the `_servo_text_decorations_in_effect` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_white_space","","Inherit `white_space` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_white_space","","Reset `white_space` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_white_space","","Set the `white_space` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_shadow","","Inherit `text_shadow` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_shadow","","Reset `text_shadow` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"inherit_text_rendering","","Inherit `text_rendering` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_rendering","","Reset `text_rendering` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_rendering","","Set the `text_rendering` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_list_style_position","","Inherit `list_style_position` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_list_style_position","","Reset `list_style_position` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_list_style_position","","Set the `list_style_position` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_list_style_type","","Inherit `list_style_type` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_list_style_type","","Reset `list_style_type` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_list_style_type","","Set the `list_style_type` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_list_style_image","","Inherit `list_style_image` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_list_style_image","","Reset `list_style_image` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_list_style_image","","Set the `list_style_image` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_quotes","","Inherit `quotes` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_quotes","","Reset `quotes` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_quotes","","Set the `quotes` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_top","","Inherit `margin_top` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_top","","Reset `margin_top` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_top","","Set the `margin_top` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_left","","Inherit `margin_left` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_left","","Reset `margin_left` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_left","","Set the `margin_left` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_bottom","","Inherit `margin_bottom` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_bottom","","Reset `margin_bottom` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_bottom","","Set the `margin_bottom` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_right","","Inherit `margin_right` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_right","","Reset `margin_right` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_right","","Set the `margin_right` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_block_start","","Inherit `margin_block_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_block_start","","Reset `margin_block_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_block_start","","Set the `margin_block_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_block_end","","Inherit `margin_block_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_block_end","","Reset `margin_block_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_block_end","","Set the `margin_block_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_inline_start","","Inherit `margin_inline_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_inline_start","","Reset `margin_inline_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_inline_start","","Set the `margin_inline_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_margin_inline_end","","Inherit `margin_inline_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_margin_inline_end","","Reset `margin_inline_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_margin_inline_end","","Set the `margin_inline_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_outline_color","","Inherit `outline_color` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_outline_color","","Reset `outline_color` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outline_color","","Set the `outline_color` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_outline_style","","Inherit `outline_style` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_outline_style","","Reset `outline_style` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outline_style","","Set the `outline_style` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_outline_width","","Inherit `outline_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_outline_width","","Reset `outline_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outline_width","","Set the `outline_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_outline_offset","","Inherit `outline_offset` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_outline_offset","","Reset `outline_offset` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outline_offset","","Set the `outline_offset` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_top","","Inherit `padding_top` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_top","","Reset `padding_top` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_top","","Set the `padding_top` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_left","","Inherit `padding_left` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_left","","Reset `padding_left` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_left","","Set the `padding_left` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_bottom","","Inherit `padding_bottom` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_bottom","","Reset `padding_bottom` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_bottom","","Set the `padding_bottom` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_right","","Inherit `padding_right` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_right","","Reset `padding_right` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_right","","Set the `padding_right` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_block_start","","Inherit `padding_block_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_block_start","","Reset `padding_block_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_block_start","","Set the `padding_block_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_block_end","","Inherit `padding_block_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_block_end","","Reset `padding_block_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_block_end","","Set the `padding_block_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_inline_start","","Inherit `padding_inline_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_inline_start","","Reset `padding_inline_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_inline_start","","Set the `padding_inline_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_padding_inline_end","","Inherit `padding_inline_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_padding_inline_end","","Reset `padding_inline_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_padding_inline_end","","Set the `padding_inline_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_cursor","","Inherit `cursor` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_cursor","","Reset `cursor` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_cursor","","Set the `cursor` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_pointer_events","","Inherit `pointer_events` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_pointer_events","","Reset `pointer_events` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_pointer_events","","Set the `pointer_events` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_top","","Inherit `top` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_top","","Reset `top` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_top","","Set the `top` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_left","","Inherit `left` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_left","","Reset `left` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_left","","Set the `left` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_bottom","","Inherit `bottom` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_bottom","","Reset `bottom` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_bottom","","Set the `bottom` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_right","","Inherit `right` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_right","","Reset `right` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_right","","Set the `right` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_offset_block_start","","Inherit `offset_block_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_offset_block_start","","Reset `offset_block_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_offset_block_start","","Set the `offset_block_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_offset_block_end","","Inherit `offset_block_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_offset_block_end","","Reset `offset_block_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_offset_block_end","","Set the `offset_block_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_offset_inline_start","","Inherit `offset_inline_start` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_offset_inline_start","","Reset `offset_inline_start` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_offset_inline_start","","Set the `offset_inline_start` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_offset_inline_end","","Inherit `offset_inline_end` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_offset_inline_end","","Reset `offset_inline_end` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_offset_inline_end","","Set the `offset_inline_end` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_z_index","","Inherit `z_index` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_z_index","","Reset `z_index` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_z_index","","Set the `z_index` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_flex_direction","","Inherit `flex_direction` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_flex_direction","","Reset `flex_direction` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flex_direction","","Set the `flex_direction` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_flex_wrap","","Inherit `flex_wrap` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_flex_wrap","","Reset `flex_wrap` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flex_wrap","","Set the `flex_wrap` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_justify_content","","Inherit `justify_content` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_justify_content","","Reset `justify_content` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_justify_content","","Set the `justify_content` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_align_content","","Inherit `align_content` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_align_content","","Reset `align_content` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_align_content","","Set the `align_content` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_align_items","","Inherit `align_items` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_align_items","","Reset `align_items` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_align_items","","Set the `align_items` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_flex_grow","","Inherit `flex_grow` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_flex_grow","","Reset `flex_grow` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flex_grow","","Set the `flex_grow` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_flex_shrink","","Inherit `flex_shrink` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_flex_shrink","","Reset `flex_shrink` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flex_shrink","","Set the `flex_shrink` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_align_self","","Inherit `align_self` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_align_self","","Reset `align_self` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_align_self","","Set the `align_self` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_order","","Inherit `order` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_order","","Reset `order` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_order","","Set the `order` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_flex_basis","","Inherit `flex_basis` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_flex_basis","","Reset `flex_basis` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_flex_basis","","Set the `flex_basis` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_width","","Inherit `width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_width","","Reset `width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_width","","Set the `width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_min_width","","Inherit `min_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_min_width","","Reset `min_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_min_width","","Set the `min_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_max_width","","Inherit `max_width` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_max_width","","Reset `max_width` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_max_width","","Set the `max_width` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_height","","Inherit `height` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_height","","Reset `height` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_height","","Set the `height` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_min_height","","Inherit `min_height` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_min_height","","Reset `min_height` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_min_height","","Set the `min_height` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_max_height","","Inherit `max_height` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_max_height","","Reset `max_height` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_max_height","","Set the `max_height` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_block_size","","Inherit `block_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_block_size","","Reset `block_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_block_size","","Set the `block_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_min_block_size","","Inherit `min_block_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_min_block_size","","Reset `min_block_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_min_block_size","","Set the `min_block_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_max_block_size","","Inherit `max_block_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_max_block_size","","Reset `max_block_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_max_block_size","","Set the `max_block_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_inline_size","","Inherit `inline_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_inline_size","","Reset `inline_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_inline_size","","Set the `inline_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_min_inline_size","","Inherit `min_inline_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_min_inline_size","","Reset `min_inline_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_min_inline_size","","Set the `min_inline_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_max_inline_size","","Inherit `max_inline_size` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_max_inline_size","","Reset `max_inline_size` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_max_inline_size","","Set the `max_inline_size` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_box_sizing","","Inherit `box_sizing` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_box_sizing","","Reset `box_sizing` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_box_sizing","","Set the `box_sizing` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_table_layout","","Inherit `table_layout` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_table_layout","","Reset `table_layout` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_table_layout","","Set the `table_layout` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_overflow","","Inherit `text_overflow` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_overflow","","Reset `text_overflow` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_overflow","","Set the `text_overflow` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_unicode_bidi","","Inherit `unicode_bidi` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_unicode_bidi","","Reset `unicode_bidi` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_unicode_bidi","","Set the `unicode_bidi` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"inherit_text_decoration_line","","Inherit `text_decoration_line` from our parent style.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_text_decoration_line","","Reset `text_decoration_line` to the initial value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"set_text_decoration_line","","Set the `text_decoration_line` to the computed value `value`.",451,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"for_inheritance","","Inherits style from the parent element, accounting for the default computed values that need to be provided as well.",451,{"inputs":[{"name":"device"},{"name":"computedvalues"},{"name":"option"}],"output":{"name":"self"}}],[11,"has_visited_style","","Returns whether we have a visited style.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pseudo_element","","Returns whether we're a pseudo-elements style.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default_style","","Returns the style we're getting reset properties from.",451,{"inputs":[{"name":"self"}],"output":{"name":"computedvalues"}}],[11,"get_background","","Gets an immutable view of the current `Background` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"mutate_background","","Gets a mutable view of the current `Background` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"take_background","","Gets a mutable view of the current `Background` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_background","","Gets a mutable view of the current `Background` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_background_if_mutated","","Gets a mutable view of the current `Background` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_background_struct","","Reset the current `Background` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_border","","Gets an immutable view of the current `Border` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"mutate_border","","Gets a mutable view of the current `Border` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"take_border","","Gets a mutable view of the current `Border` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_border","","Gets a mutable view of the current `Border` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_border_if_mutated","","Gets a mutable view of the current `Border` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_border_struct","","Reset the current `Border` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_box","","Gets an immutable view of the current `Box` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"mutate_box","","Gets a mutable view of the current `Box` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"take_box","","Gets a mutable view of the current `Box` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_box","","Gets a mutable view of the current `Box` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_box_if_mutated","","Gets a mutable view of the current `Box` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_box_struct","","Reset the current `Box` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_color","","Gets an immutable view of the current `Color` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"mutate_color","","Gets a mutable view of the current `Color` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"take_color","","Gets a mutable view of the current `Color` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_color","","Gets a mutable view of the current `Color` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_color_if_mutated","","Gets a mutable view of the current `Color` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_color_struct","","Reset the current `Color` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_column","","Gets an immutable view of the current `Column` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"mutate_column","","Gets a mutable view of the current `Column` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"take_column","","Gets a mutable view of the current `Column` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_column","","Gets a mutable view of the current `Column` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_column_if_mutated","","Gets a mutable view of the current `Column` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_column_struct","","Reset the current `Column` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_counters","","Gets an immutable view of the current `Counters` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"mutate_counters","","Gets a mutable view of the current `Counters` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"take_counters","","Gets a mutable view of the current `Counters` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_counters","","Gets a mutable view of the current `Counters` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_counters_if_mutated","","Gets a mutable view of the current `Counters` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_counters_struct","","Reset the current `Counters` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_effects","","Gets an immutable view of the current `Effects` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"mutate_effects","","Gets a mutable view of the current `Effects` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"take_effects","","Gets a mutable view of the current `Effects` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_effects","","Gets a mutable view of the current `Effects` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_effects_if_mutated","","Gets a mutable view of the current `Effects` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_effects_struct","","Reset the current `Effects` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_font","","Gets an immutable view of the current `Font` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"mutate_font","","Gets a mutable view of the current `Font` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"take_font","","Gets a mutable view of the current `Font` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_font","","Gets a mutable view of the current `Font` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_font_if_mutated","","Gets a mutable view of the current `Font` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_font_struct","","Reset the current `Font` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_inheritedbox","","Gets an immutable view of the current `InheritedBox` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"mutate_inheritedbox","","Gets a mutable view of the current `InheritedBox` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"take_inheritedbox","","Gets a mutable view of the current `InheritedBox` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_inheritedbox","","Gets a mutable view of the current `InheritedBox` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_inheritedbox_if_mutated","","Gets a mutable view of the current `InheritedBox` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_inheritedbox_struct","","Reset the current `InheritedBox` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_inheritedtable","","Gets an immutable view of the current `InheritedTable` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"mutate_inheritedtable","","Gets a mutable view of the current `InheritedTable` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"take_inheritedtable","","Gets a mutable view of the current `InheritedTable` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_inheritedtable","","Gets a mutable view of the current `InheritedTable` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_inheritedtable_if_mutated","","Gets a mutable view of the current `InheritedTable` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_inheritedtable_struct","","Reset the current `InheritedTable` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_inheritedtext","","Gets an immutable view of the current `InheritedText` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"mutate_inheritedtext","","Gets a mutable view of the current `InheritedText` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"take_inheritedtext","","Gets a mutable view of the current `InheritedText` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_inheritedtext","","Gets a mutable view of the current `InheritedText` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_inheritedtext_if_mutated","","Gets a mutable view of the current `InheritedText` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_inheritedtext_struct","","Reset the current `InheritedText` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_list","","Gets an immutable view of the current `List` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"mutate_list","","Gets a mutable view of the current `List` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"take_list","","Gets a mutable view of the current `List` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_list","","Gets a mutable view of the current `List` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_list_if_mutated","","Gets a mutable view of the current `List` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_list_struct","","Reset the current `List` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_margin","","Gets an immutable view of the current `Margin` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"mutate_margin","","Gets a mutable view of the current `Margin` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"take_margin","","Gets a mutable view of the current `Margin` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_margin","","Gets a mutable view of the current `Margin` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_margin_if_mutated","","Gets a mutable view of the current `Margin` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_margin_struct","","Reset the current `Margin` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_outline","","Gets an immutable view of the current `Outline` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"mutate_outline","","Gets a mutable view of the current `Outline` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"take_outline","","Gets a mutable view of the current `Outline` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_outline","","Gets a mutable view of the current `Outline` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_outline_if_mutated","","Gets a mutable view of the current `Outline` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_outline_struct","","Reset the current `Outline` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_padding","","Gets an immutable view of the current `Padding` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"mutate_padding","","Gets a mutable view of the current `Padding` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"take_padding","","Gets a mutable view of the current `Padding` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_padding","","Gets a mutable view of the current `Padding` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_padding_if_mutated","","Gets a mutable view of the current `Padding` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_padding_struct","","Reset the current `Padding` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_pointing","","Gets an immutable view of the current `Pointing` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"mutate_pointing","","Gets a mutable view of the current `Pointing` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"take_pointing","","Gets a mutable view of the current `Pointing` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_pointing","","Gets a mutable view of the current `Pointing` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_pointing_if_mutated","","Gets a mutable view of the current `Pointing` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_pointing_struct","","Reset the current `Pointing` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","Gets an immutable view of the current `Position` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"mutate_position","","Gets a mutable view of the current `Position` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"take_position","","Gets a mutable view of the current `Position` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_position","","Gets a mutable view of the current `Position` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_position_if_mutated","","Gets a mutable view of the current `Position` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_position_struct","","Reset the current `Position` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_table","","Gets an immutable view of the current `Table` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"mutate_table","","Gets a mutable view of the current `Table` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"take_table","","Gets a mutable view of the current `Table` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_table","","Gets a mutable view of the current `Table` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_table_if_mutated","","Gets a mutable view of the current `Table` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_table_struct","","Reset the current `Table` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"get_text","","Gets an immutable view of the current `Text` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"mutate_text","","Gets a mutable view of the current `Text` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"take_text","","Gets a mutable view of the current `Text` style.",451,{"inputs":[{"name":"self"}],"output":{"name":"uniquearc"}}],[11,"put_text","","Gets a mutable view of the current `Text` style.",451,{"inputs":[{"name":"self"},{"name":"uniquearc"}],"output":null}],[11,"get_text_if_mutated","","Gets a mutable view of the current `Text` style, only if it's been mutated before.",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reset_text_struct","","Reset the current `Text` style to its default value.",451,{"inputs":[{"name":"self"}],"output":null}],[11,"floated","","Returns whether this computed style represents a floated object.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"out_of_flow_positioned","","Returns whether this computed style represents an out of flow-positioned object.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"in_top_layer","","Whether this style has a top-layer style. That's implemented in Gecko via the -moz-top-layer property, but servo doesn't have any concept of a top layer (yet, it's needed for fullscreen).",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"build","","Turns this `StyleBuilder` into a proper `ComputedValues` instance.",451,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"inherited_font_computation_data","","Access to various information about our inherited styles.  We don't expose an inherited ComputedValues directly, because in the ::first-line case some of the inherited information needs to come from one ComputedValues instance and some from a different one. Inherited font bits.",451,{"inputs":[{"name":"self"}],"output":{"name":"fontcomputationdata"}}],[11,"inherited_writing_mode","","Inherited writing-mode.",451,{"inputs":[{"name":"self"}],"output":{"name":"writingmode"}}],[11,"inherited_flags","","Inherited style flags.",451,{"inputs":[{"name":"self"}],"output":{"name":"computedvalueflags"}}],[11,"get_parent_background","","And access to inherited style structs. Gets our inherited `Background`.  We don't name these accessors `inherited_background` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_background` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"background"}}],[11,"get_parent_border","","Gets our inherited `Border`.  We don't name these accessors `inherited_border` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_border` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"get_parent_box","","Gets our inherited `Box`.  We don't name these accessors `inherited_box` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_box` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"get_parent_color","","Gets our inherited `Color`.  We don't name these accessors `inherited_color` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_color` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"get_parent_column","","Gets our inherited `Column`.  We don't name these accessors `inherited_column` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_column` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"get_parent_counters","","Gets our inherited `Counters`.  We don't name these accessors `inherited_counters` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_counters` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"counters"}}],[11,"get_parent_effects","","Gets our inherited `Effects`.  We don't name these accessors `inherited_effects` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_effects` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"effects"}}],[11,"get_parent_font","","Gets our inherited `Font`.  We don't name these accessors `inherited_font` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_font` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"get_parent_inheritedbox","","Gets our inherited `InheritedBox`.  We don't name these accessors `inherited_inheritedbox` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_inheritedbox` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedbox"}}],[11,"get_parent_inheritedtable","","Gets our inherited `InheritedTable`.  We don't name these accessors `inherited_inheritedtable` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_inheritedtable` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtable"}}],[11,"get_parent_inheritedtext","","Gets our inherited `InheritedText`.  We don't name these accessors `inherited_inheritedtext` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_inheritedtext` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"inheritedtext"}}],[11,"get_parent_list","","Gets our inherited `List`.  We don't name these accessors `inherited_list` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_list` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"get_parent_margin","","Gets our inherited `Margin`.  We don't name these accessors `inherited_margin` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_margin` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"margin"}}],[11,"get_parent_outline","","Gets our inherited `Outline`.  We don't name these accessors `inherited_outline` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_outline` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"outline"}}],[11,"get_parent_padding","","Gets our inherited `Padding`.  We don't name these accessors `inherited_padding` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_padding` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"get_parent_pointing","","Gets our inherited `Pointing`.  We don't name these accessors `inherited_pointing` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_pointing` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"pointing"}}],[11,"get_parent_position","","Gets our inherited `Position`.  We don't name these accessors `inherited_position` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_position` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"get_parent_table","","Gets our inherited `Table`.  We don't name these accessors `inherited_table` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_table` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"get_parent_text","","Gets our inherited `Text`.  We don't name these accessors `inherited_text` because we already have things like \"box\" vs \"inherited_box\" as struct names.  Do the next-best thing and call them `parent_text` instead.",451,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"eq","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"ne","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"clone","","",717,{"inputs":[{"name":"self"}],"output":{"name":"cascadeflags"}}],[11,"partial_cmp","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"option"}}],[11,"lt","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"le","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"gt","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"ge","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",717,null],[11,"fmt","","",717,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",717,{"inputs":[],"output":{"name":"cascadeflags"}}],[11,"all","","Returns the set containing all flags.",717,{"inputs":[],"output":{"name":"cascadeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",717,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",717,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",717,{"inputs":[{"name":"u8"}],"output":{"name":"cascadeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",717,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",717,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"cascadeflags"}}],[11,"bitor_assign","","Adds the set of flags.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"cascadeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"cascadeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":{"name":"cascadeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",717,{"inputs":[{"name":"self"},{"name":"cascadeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",717,{"inputs":[{"name":"self"}],"output":{"name":"cascadeflags"}}],[11,"extend","","",717,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",717,{"inputs":[{"name":"t"}],"output":{"name":"cascadeflags"}}],[11,"clone","","",461,{"inputs":[{"name":"self"}],"output":{"name":"aliasid"}}],[11,"eq","","",461,{"inputs":[{"name":"self"},{"name":"aliasid"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",461,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"computed_values","style","Types for [computed values][computed].",null,null],[8,"CaseSensitivityExt","","Extension methods for selectors::attr::CaseSensitivity",null,null],[10,"eq_atom","","Return whether two atoms compare equal according to this case sensitivity.",718,{"inputs":[{"name":"self"},{"name":"weakatom"},{"name":"weakatom"}],"output":{"name":"bool"}}],[14,"css_properties_accessors","","",null,null],[14,"longhand_properties_idents","","",null,null],[11,"default","style::properties","",719,{"inputs":[],"output":{"name":"arc"}}],[11,"drop","","",719,null],[11,"partial_cmp","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",719,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",719,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",719,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"as_ref","","",719,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",719,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",719,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",719,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",719,null],[11,"clone","","",719,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",719,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","style::hash::map","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",720,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",79,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"clone","","",720,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",720,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",720,null],[11,"len","","",720,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","style::hash","",721,null],[11,"deref","","",722,null],[11,"heap_size_of_children","","",722,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",721,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",721,{"inputs":[],"output":{"name":"hashmap"}}],[11,"default","","",722,{"inputs":[],"output":{"name":"hashset"}}],[11,"deref_mut","","",722,null],[11,"deref_mut","","",721,null],[11,"eq","","",722,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"eq","","",721,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",722,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",721,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",721,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","","",722,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"into_iter","","",722,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"to_css","style::values","",233,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",234,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","style::values::computed","",249,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"hash","style::context","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"quirksmode"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"quirksmode"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","style::values","",723,{"inputs":[],"output":{"name":"cowrcstr"}}],[11,"drop","","",723,null],[11,"partial_cmp","","",723,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"basicparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"self"},{"name":"basicparseerror"}],"output":{"name":"bool"}}],[11,"eq","","",723,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"cmp","","",723,{"inputs":[{"name":"self"},{"name":"cowrcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",723,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",233,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",233,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",233,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",723,{"inputs":[{"name":"string"}],"output":{"name":"cowrcstr"}}],[11,"from","","",723,{"inputs":[{"name":"cow"}],"output":{"name":"cowrcstr"}}],[11,"from","","",723,{"inputs":[{"name":"str"}],"output":{"name":"cowrcstr"}}],[11,"to_css","","",234,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css","","",233,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"as_ref","","",723,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",723,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",723,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",723,null],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"clone","","",723,{"inputs":[{"name":"self"}],"output":{"name":"cowrcstr"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"basicparseerror"}}],[11,"deref","","",723,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"heap_size_of_children","style::values::computed","",249,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"au"}}],[11,"sub","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"partial_cmp","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"option"}}],[11,"lt","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"le","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"gt","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ge","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"add","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"zero","","",249,{"inputs":[],"output":{"name":"au"}}],[11,"is_zero","","",249,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",249,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"ordering"}}],[11,"div","","",249,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"mul","","",249,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"div_assign","","",249,null],[11,"sub_assign","","",249,null],[11,"deserialize","","",249,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"rem","","",249,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"neg","","",249,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"serialize","","",249,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul_assign","","",249,null],[11,"add_assign","","",249,null],[11,"hash","","",249,null],[11,"encode","","",249,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"unconditional_size_of","style::properties","",719,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"unconditional_shallow_size_of","","",719,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"size_of","style::values","",233,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"size_of","style::values::computed","",249,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"conditional_size_of","style::properties","",719,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"conditional_shallow_size_of","","",719,{"inputs":[{"name":"self"},{"name":"mallocsizeofops"}],"output":{"name":"usize"}}],[11,"classes_and_ids_case_sensitivity","style::context","",12,{"inputs":[{"name":"self"}],"output":{"name":"casesensitivity"}}],[11,"from_bytes","style::stylesheets","Parse a stylesheet from a set of bytes, potentially received over the network.",181,null],[11,"update_from_bytes","","Updates an empty stylesheet with a set of bytes that reached over the network.",181,null],[11,"new","style::hash","",721,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","",721,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"try_with_capacity","","",721,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_with_hasher","","",721,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"try_with_capacity_and_hasher","","",721,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_capacity_and_hasher","","",721,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"try_reserve","","",721,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_shrink_to_fit","","",721,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_entry","","",721,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[11,"try_insert","","",721,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","",722,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","",722,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","",722,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","",722,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"try_reserve","","",722,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_shrink_to_fit","","",722,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_insert","","",722,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"or_insert","style::hash::map","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",79,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",79,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",79,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"origin","style::stylesheets","Get the stylesheet origin.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"origin"}}],[11,"quirks_mode","","Get the stylesheet quirks mode.",226,{"inputs":[{"name":"self"},{"name":"sharedrwlockreadguard"}],"output":{"name":"quirksmode"}}],[11,"is_effective_for_device","","Returns whether the style-sheet applies for the current device.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"bool"}}],[11,"iter_rules","","Return an iterator using the condition `C`.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"rulesiterator"}}],[11,"effective_rules","","Return an iterator over the effective rules within the style-sheet, as according to the supplied `Device`.",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"}],"output":{"name":"rulesiterator"}}],[11,"effective_style_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_media_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_font_face_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_font_face_feature_values_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_counter_style_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_viewport_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_keyframes_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_supports_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_page_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"effective_document_rules","","",226,{"inputs":[{"name":"self"},{"name":"device"},{"name":"sharedrwlockreadguard"},{"name":"f"}],"output":null}],[11,"from_floats","style::values","Constructs a new RGBA value from float components. It expects the red, green, blue and alpha channels in that order, and all values will be clamped to the 0.0 ... 1.0 range.",233,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgba"}}],[11,"transparent","","Returns a transparent color.",233,{"inputs":[],"output":{"name":"rgba"}}],[11,"new","","Same thing, but with `u8` values instead of floats in the 0 to 1 range.",233,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgba"}}],[11,"red_f32","","Returns the red channel in a floating point number form, from 0 to 1.",233,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"green_f32","","Returns the green channel in a floating point number form, from 0 to 1.",233,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"blue_f32","","Returns the blue channel in a floating point number form, from 0 to 1.",233,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"alpha_f32","","Returns the alpha channel in a floating point number form, from 0 to 1.",233,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"serialization_type","","Categorize a token into a type that determines when `/**/` needs to be inserted between two tokens when serialized next to each other without whitespace in between.",234,{"inputs":[{"name":"self"}],"output":{"name":"tokenserializationtype"}}],[11,"is_parse_error","","Return whether this token represents a parse error.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new parser",724,{"inputs":[{"name":"parserinput"}],"output":{"name":"parser"}}],[11,"current_line","","Return the current line that is being parsed.",724,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expect_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token. Return a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"position","","Return the current position within the input.",724,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"current_source_location","","The current line number and column number.",724,{"inputs":[{"name":"self"}],"output":{"name":"sourcelocation"}}],[11,"current_source_map_url","","The source map URL, if known.",724,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_source_url","","The source URL, if known.",724,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"state","","Return the current internal state of the parser (including position within the input).",724,{"inputs":[{"name":"self"}],"output":{"name":"parserstate"}}],[11,"skip_whitespace","","Advance the input until the next token that’s not whitespace or a comment.",724,null],[11,"reset","","Restore the internal state of the parser (including position within the input) to what was previously saved by the `Parser::position` method.",724,null],[11,"look_for_var_functions","","Start looking for `var()` functions. (See the `.seen_var_functions()` method.)",724,null],[11,"seen_var_functions","","Return whether a `var()` function has been seen by the tokenizer since either `look_for_var_functions` was called, and stop looking.",724,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try","","Execute the given closure, passing it the parser. If the result (returned unchanged) is `Err`, the internal state of the parser  (including position within the input) is restored to what it was before the call.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"slice","","Return a slice of the CSS input",724,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"slice_from","","Return a slice of the CSS input, from the given position to the current one.",724,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"str"}}],[11,"next","","Return the next token in the input that is neither whitespace or a comment, and advance the position accordingly.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_including_whitespace","","Same as `Parser::next`, but does not skip whitespace tokens.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_including_whitespace_and_comments","","Same as `Parser::next`, but does not skip whitespace or comment tokens.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse_entirely","","Have the given closure parse something, then check the the input is exhausted. The result is overridden to `Err(())` if some input remains.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_comma_separated","","Parse a list of comma-separated values, all with the same syntax.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_nested_block","","Parse the content of a block or function.",724,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_before","","Limit parsing to until a given delimiter or the end of the input. (E.g. a semicolon for a property value.)",724,{"inputs":[{"name":"self"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_after","","Like `parse_until_before`, but also consume the delimiter token.",724,{"inputs":[{"name":"self"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"expect_whitespace","","Parse a <whitespace-token> and return its value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident","","Parse a <ident-token> and return the unescaped value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_cloned","","expect_ident, but clone the CowRcStr",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_matching","","Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_string","","Parse a <string-token> and return the unescaped value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_string_cloned","","expect_string, but clone the CowRcStr",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_ident_or_string","","Parse either a <ident-token> or a <string-token>, and return the unescaped value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_url","","Parse a <url-token> and return the unescaped value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_url_or_string","","Parse either a <url-token> or a <string-token>, and return the unescaped value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_number","","Parse a <number-token> and return the integer value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_integer","","Parse a <number-token> that does not have a fractional part, and return the integer value.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_percentage","","Parse a <percentage-token> and return the value. `0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_colon","","Parse a `:` <colon-token>.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_semicolon","","Parse a `;` <semicolon-token>.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_comma","","Parse a `,` <comma-token>.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_delim","","Parse a <delim-token> with the given value.",724,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"expect_curly_bracket_block","","Parse a `{ /* ... */ }` curly brackets block.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_square_bracket_block","","Parse a `[ /* ... */ ]` square brackets block.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_parenthesis_block","","Parse a `( /* ... */ )` parenthesis block.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_function","","Parse a  token and return its name.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expect_function_matching","","Parse a  token whose name is an ASCII-insensitive match for the given value.",724,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_no_error_token","","Parse the input until exhaustion and check that it contains no “error” token.",724,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_animated_value","style::properties::longhands::box_shadow::computed_value","",545,null],[11,"from_animated_value","","",545,null],[11,"to_animated_value","style::properties::longhands::text_shadow::computed_value","",580,null],[11,"from_animated_value","","",580,null],[11,"to_animated_value","style::properties::longhands::filter::computed_value","",547,null],[11,"from_animated_value","","",547,null],[11,"animate","style::values::computed","",249,{"inputs":[{"name":"self"},{"name":"self"},{"name":"procedure"}],"output":{"name":"result"}}],[11,"to_animated_value","","",288,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",288,null],[11,"to_animated_value","","",289,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",289,null],[11,"to_animated_value","style::values::computed::length","",272,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",272,null],[11,"to_animated_value","style::values::computed","",291,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",291,null],[11,"to_animated_value","style::values::computed::length","",269,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",269,null],[11,"to_animated_value","style::values::computed::border","",260,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",260,null],[11,"to_animated_value","style::values::computed::length","",268,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",268,null],[11,"to_animated_value","","",267,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",267,null],[11,"to_animated_zero","style::values::computed","",249,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",249,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"scale_by","","",249,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"scale_by_trunc","","Scale, but round down (useful for viewport-relative units)",249,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_au","","",249,{"inputs":[{"name":"f64"}],"output":{"name":"au"}}],[11,"from_px","","",249,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"to_px","","Rounds this app unit down to the pixel towards zero and returns it.",249,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"ceil_to_px","","Ceil this app unit to the appropriate pixel boundary and return it.",249,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_px","","",249,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_pixel","","",249,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"to_f32_px","","",249,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64_px","","",249,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from_f32_px","","",249,{"inputs":[{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_px","","",249,{"inputs":[{"name":"f64"}],"output":{"name":"au"}}],[11,"abs","","",249,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"to_animated_value","style::properties::longhands::background_size::computed_value","",491,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_animated_value","","",491,null],[11,"to_computed_value","style::values::specified::image","",396,null],[11,"from_computed_value","","",396,null],[11,"to_computed_value","style::values::specified::length","",406,null],[11,"from_computed_value","","",406,null],[11,"to_computed_value","","",407,null],[11,"from_computed_value","","",407,null],[11,"to_computed_value_zoomed","style::values::specified::calc","Compute font-size or line-height taking into account text-zoom if necessary.",385,{"inputs":[{"name":"self"},{"name":"context"},{"name":"fontbasesize"}],"output":{"name":"calclengthorpercentage"}}],[11,"to_computed_value","","",385,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"calclengthorpercentage"}}],[11,"from_computed_value","","",385,{"inputs":[{"name":"calclengthorpercentage"}],"output":{"name":"self"}}],[11,"to_computed_value","style::values::specified::length","",408,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"lengthorpercentage"}}],[11,"from_computed_value","","",408,{"inputs":[{"name":"lengthorpercentage"}],"output":{"name":"self"}}],[11,"to_computed_value","","",409,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"lengthorpercentageorauto"}}],[11,"from_computed_value","","",409,{"inputs":[{"name":"lengthorpercentageorauto"}],"output":{"name":"self"}}],[11,"to_computed_value","","",410,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"lengthorpercentageornone"}}],[11,"from_computed_value","","",410,{"inputs":[{"name":"lengthorpercentageornone"}],"output":{"name":"self"}}],[11,"to_computed_value","","",411,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"mozlength"}}],[11,"from_computed_value","","",411,{"inputs":[{"name":"mozlength"}],"output":{"name":"self"}}],[11,"to_computed_value","","",412,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"maxlength"}}],[11,"from_computed_value","","",412,{"inputs":[{"name":"maxlength"}],"output":{"name":"self"}}],[11,"from","style::properties::longhands::transform::computed_value","",533,{"inputs":[{"name":"transform3d"}],"output":{"name":"self"}}],[11,"to_transform_3d_matrix","","Return the equivalent 3d matrix of this transform list. If |reference_box| is None, we will drop the percent part from translate because we can resolve it without the layout info.",535,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"create_perspective_matrix","","Return the transform matrix from a perspective length.",535,{"inputs":[{"name":"cssfloat"}],"output":{"name":"transform3d"}}],[11,"get_normalized_vector_and_angle","","Return the normalized direction vector and its angle for Rotate3D.",535,null],[11,"to_computed_value","style::values::specified","",367,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_computed_value","","",367,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","style::values","",725,{"inputs":[{"name":"nonnegativenumber"}],"output":{"name":"cssfloat"}}],[11,"from","","",725,{"inputs":[{"name":"greaterthanorequaltoonenumber"}],"output":{"name":"cssfloat"}}],[11,"to_computed_value","style::values::specified","",368,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"numberorpercentage"}}],[11,"from_computed_value","","",368,{"inputs":[{"name":"numberorpercentage"}],"output":{"name":"self"}}],[11,"new","style::properties","",719,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"into_raw","","",719,null],[11,"from_raw","","",719,null],[11,"borrow_arc","","Produce a pointer to the data that can be converted back to an arc",719,{"inputs":[{"name":"self"}],"output":{"name":"arcborrow"}}],[11,"with_raw_offset_arc","","Temporarily converts |self| into a bonafide RawOffsetArc and exposes it to the provided callback. The refcount is not modified.",719,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"heap_ptr","","Returns the address on the heap of the Arc itself -- not the T within it -- for memory reporting.",719,null],[11,"ptr_eq","","",719,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","",719,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","",719,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"is_unique","","",719,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_header_and_iter","","Creates an Arc for a HeaderSlice using the given header struct and iterator to generate the slice. The resulting Arc will be fat.",719,{"inputs":[{"name":"h"},{"name":"i"}],"output":{"name":"arc"}}],[11,"into_thin","","Converts an Arc into a ThinArc. This consumes the Arc, so the refcount is not modified.",719,{"inputs":[{"name":"arc"}],"output":{"name":"thinarc"}}],[11,"from_thin","","Converts a ThinArc into an Arc. This consumes the ThinArc, so the refcount is not modified.",719,{"inputs":[{"name":"thinarc"}],"output":{"name":"arc"}}],[11,"into_raw_offset","","Converts an Arc into a RawOffsetArc. This consumes the Arc, so the refcount is not modified.",719,{"inputs":[{"name":"arc"}],"output":{"name":"rawoffsetarc"}}],[11,"from_raw_offset","","Converts a RawOffsetArc into an Arc. This consumes the RawOffsetArc, so the refcount is not modified.",719,{"inputs":[{"name":"rawoffsetarc"}],"output":{"name":"arc"}}]],"paths":[[3,"KeyframesAnimationState"],[3,"AnimationFrame"],[4,"KeyframesIterationState"],[4,"KeyframesRunningState"],[4,"Animation"],[3,"PropertyAnimation"],[3,"ApplicableDeclarationBlock"],[3,"AttrIdentifier"],[4,"LengthOrPercentageOrAuto"],[4,"AttrValue"],[3,"Bezier"],[3,"StyleBloom"],[4,"QuirksMode"],[3,"StyleSystemOptions"],[3,"SharedStyleContext"],[3,"CascadeInputs"],[3,"ElementCascadeInputs"],[3,"CurrentElementInfo"],[3,"TraversalStatistics"],[3,"ThreadLocalStyleContext"],[3,"StyleContext"],[4,"SequentialTask"],[4,"ReflowGoal"],[8,"RegisteredSpeculativePainter"],[8,"RegisteredSpeculativePainters"],[3,"ThreadLocalStyleContextCreationInfo"],[3,"EagerPseudoCascadeInputs"],[3,"SelectorFlagsMap"],[3,"SequentialTaskList"],[3,"StackLimitChecker"],[3,"Negative"],[3,"Ranges"],[3,"Pad"],[3,"Fallback"],[3,"Symbols"],[3,"AdditiveSymbols"],[3,"AdditiveTuple"],[4,"System"],[4,"Symbol"],[4,"SpeakAs"],[3,"CounterStyleRuleData"],[3,"SpecifiedValue"],[3,"ComputedValue"],[3,"OrderedMap"],[3,"OrderedMapIterator"],[3,"ElementStyles"],[3,"ElementData"],[4,"RestyleKind"],[3,"ElementDataFlags"],[3,"EagerPseudoStyles"],[3,"OpaqueNode"],[3,"LayoutIterator"],[3,"ShowData"],[3,"ShowDataAndPrimaryValues"],[3,"ShowSubtree"],[3,"ShowSubtreeData"],[3,"ShowSubtreeDataAndPrimaryValues"],[8,"NodeInfo"],[8,"TNode"],[8,"PresentationalHintsSynthesizer"],[8,"TElement"],[3,"SendNode"],[3,"SendElement"],[3,"ElementState"],[3,"DocumentState"],[4,"ContextualParseError"],[8,"ParseErrorReporter"],[3,"RustLogReporter"],[3,"NullReporter"],[3,"UrlSource"],[3,"FontFaceRuleData"],[4,"Source"],[4,"FontDisplay"],[3,"EffectiveSources"],[3,"FontFace"],[3,"FontMetrics"],[4,"FontMetricsQueryResult"],[8,"FontMetricsProvider"],[3,"ServoMetricsProvider"],[4,"Entry"],[8,"ElementSnapshot"],[3,"ElementWrapper"],[3,"Dependency"],[3,"StateDependency"],[3,"InvalidationMap"],[3,"InvalidationResult"],[3,"TreeStyleInvalidator"],[3,"RestyleHint"],[8,"ToMediaListKey"],[3,"MediaListKey"],[3,"EffectiveMediaQueryResults"],[3,"PotentiallyEffectiveMediaRules"],[3,"StylesheetInvalidationSet"],[3,"LogicalSize"],[3,"LogicalPoint"],[3,"LogicalMargin"],[3,"LogicalRect"],[4,"BlockFlowDirection"],[4,"InlineBaseDirection"],[4,"Direction"],[4,"PhysicalSide"],[3,"WritingMode"],[3,"StyleDifference"],[4,"StyleChange"],[4,"ChildCascadeRequirement"],[4,"CascadeVisitedMode"],[8,"MatchMethods"],[3,"MediaList"],[3,"MediaQuery"],[3,"MediaType"],[4,"Qualifier"],[4,"MediaQueryType"],[4,"DispatchMode"],[3,"ParserErrorContext"],[3,"ParserContext"],[8,"Parse"],[3,"RuleCacheConditions"],[3,"RuleCache"],[4,"StyleSource"],[4,"CascadeLevel"],[3,"RuleTree"],[3,"StrongRuleNode"],[3,"SelfAndAncestors"],[3,"ScopedTLS"],[3,"SelectorMap"],[8,"SelectorMapEntry"],[3,"PrecomputedHasher"],[3,"MaybeCaseInsensitiveHashMap"],[3,"SelectorParser"],[4,"PseudoElementCascadeType"],[8,"ElementExt"],[3,"PerPseudoElementMap"],[3,"StylesheetGuards"],[8,"ToCssWithGuard"],[8,"DeepCloneWithLock"],[3,"SharedRwLock"],[3,"SharedRwLockReadGuard"],[3,"SharedRwLockWriteGuard"],[3,"Locked"],[4,"StyleSharingBehavior"],[3,"OpaqueComputedValues"],[3,"ValidationData"],[3,"StyleSharingCandidate"],[3,"StyleSharingTarget"],[3,"StyleSharingCache"],[3,"ResolvedStyle"],[3,"PrimaryStyle"],[3,"ResolvedElementStyles"],[4,"PseudoElementResolution"],[3,"StyleResolverForElement"],[3,"Rule"],[4,"RuleInclusion"],[3,"Stylist"],[3,"ExtraStyleData"],[3,"ExtraStyleDataIterator"],[4,"ExpressionKind"],[4,"Range"],[3,"Device"],[3,"Expression"],[3,"ServoRestyleDamage"],[3,"ServoElementSnapshot"],[4,"PseudoElement"],[4,"NonTSPseudoClass"],[3,"SelectorImpl"],[3,"SnapshotMap"],[3,"SpecifiedUrl"],[3,"StyleAdjuster"],[4,"OriginValidity"],[4,"SheetRebuildKind"],[3,"StylesheetCollectionIterator"],[3,"StylesheetIterator"],[3,"StylesheetFlusher"],[3,"PerOriginFlusher"],[3,"StylesheetSet"],[3,"DocumentRule"],[3,"MediaRule"],[3,"NamespaceRule"],[3,"PageRule"],[3,"TopLevelRuleParser"],[3,"CssRules"],[3,"Namespaces"],[3,"Stylesheet"],[3,"DocumentStyleSheet"],[3,"StylesheetContents"],[3,"UserAgentStylesheets"],[3,"StyleRule"],[4,"State"],[4,"CssRule"],[4,"CssRuleType"],[4,"SingleRuleParseError"],[4,"RulesMutateError"],[3,"FFVDeclaration"],[3,"SingleValue"],[3,"PairValues"],[3,"VectorValues"],[3,"FontFeatureValuesRule"],[3,"ImportSheet"],[3,"ImportRule"],[3,"KeyframesRule"],[3,"KeyframePercentage"],[3,"Keyframe"],[3,"KeyframesStep"],[3,"KeyframesAnimation"],[4,"KeyframesStepValue"],[3,"KeyframeSelector"],[3,"PerOrigin"],[4,"Origin"],[3,"OriginSet"],[3,"OriginSetIterator"],[3,"PerOriginIter"],[3,"PerOriginIterMut"],[3,"RulesIterator"],[3,"EffectiveRules"],[3,"AllRules"],[3,"SupportsRule"],[3,"Declaration"],[4,"SupportsCondition"],[3,"ViewportDescriptorDeclaration"],[3,"ViewportRule"],[4,"ViewportDescriptor"],[4,"ViewportLength"],[8,"MaybeNew"],[3,"Cascade"],[8,"StylesheetLoader"],[8,"CssRulesHelpers"],[8,"NestedRuleIterationCondition"],[8,"StylesheetInDocument"],[3,"ThreadState"],[3,"Timer"],[3,"PerLevelTraversalData"],[8,"DomTraversal"],[3,"PreTraverseToken"],[3,"TraversalFlags"],[3,"RGBA"],[4,"Token"],[4,"BasicParseError"],[3,"CustomIdent"],[4,"Either"],[4,"KeyframesName"],[4,"ExtremumLength"],[4,"Procedure"],[3,"RGBA"],[3,"Color"],[3,"FilterList"],[3,"ShadowList"],[6,"BoxShadow"],[8,"Animate"],[8,"ToAnimatedValue"],[8,"ToAnimatedZero"],[3,"Au"],[3,"Context"],[3,"ClipRect"],[4,"NumberOrPercentage"],[4,"ComputedUrl"],[4,"Angle"],[6,"BackgroundSize"],[6,"Circle"],[6,"Ellipse"],[6,"BorderImageSideWidth"],[6,"BorderSpacing"],[6,"BorderCornerRadius"],[3,"Color"],[4,"LineDirection"],[3,"CalcLengthOrPercentage"],[4,"LengthOrPercentage"],[4,"LengthOrPercentageOrAuto"],[4,"LengthOrPercentageOrNone"],[4,"MozLength"],[4,"MaxLength"],[6,"NonNegativeLengthOrPercentage"],[3,"CSSPixelLength"],[6,"LengthOrNumber"],[6,"NonNegativeLength"],[3,"Percentage"],[6,"Position"],[6,"SVGPaint"],[6,"SVGLength"],[6,"SvgLengthOrPercentageOrNumber"],[6,"SVGWidth"],[6,"SVGStrokeDashArray"],[6,"SVGOpacity"],[6,"LineHeight"],[3,"Time"],[6,"TransformOrigin"],[8,"ToComputedValue"],[3,"ComputedVecIter"],[6,"Atom"],[6,"Namespace"],[6,"NonNegativeNumber"],[6,"GreaterThanOrEqualToOneNumber"],[6,"IntegerOrAuto"],[6,"PositiveInteger"],[6,"ClipRectOrAuto"],[4,"SquaredDistance"],[8,"ComputeSquaredDistance"],[3,"FontSettingTag"],[3,"FontSettingTagInt"],[3,"FontSettingTagFloat"],[3,"NonNegative"],[3,"GreaterThanOrEqualToOne"],[4,"SymbolsType"],[4,"CounterStyleOrNone"],[4,"FontSettings"],[4,"BackgroundSize"],[3,"InsetRect"],[3,"Circle"],[3,"Ellipse"],[3,"Polygon"],[4,"GeometryBox"],[4,"ShapeBox"],[4,"ShapeSource"],[4,"BasicShape"],[4,"ShapeRadius"],[4,"FillRule"],[3,"BorderImageSlice"],[3,"BorderCornerRadius"],[3,"BorderSpacing"],[3,"BorderRadius"],[4,"BorderImageSideWidth"],[4,"VerticalAlign"],[3,"BoxShadow"],[3,"SimpleShadow"],[4,"Filter"],[4,"FlexBasis"],[3,"GridLine"],[3,"TrackRepeat"],[3,"TrackList"],[3,"LineNameList"],[4,"TrackKeyword"],[4,"TrackBreadth"],[4,"TrackSize"],[4,"RepeatCount"],[4,"TrackListValue"],[4,"TrackListType"],[4,"GridTemplateComponent"],[3,"Gradient"],[3,"ColorStop"],[3,"PaintWorklet"],[3,"MozImageRect"],[4,"Image"],[4,"CompatMode"],[4,"GradientKind"],[4,"EndingShape"],[4,"Circle"],[4,"Ellipse"],[4,"ShapeExtent"],[4,"GradientItem"],[8,"LineDirection"],[3,"Position"],[3,"Rect"],[3,"Size"],[3,"SVGPaint"],[4,"SVGPaintKind"],[4,"SvgLengthOrPercentageOrNumber"],[4,"SVGLength"],[4,"SVGStrokeDashArray"],[4,"SVGOpacity"],[4,"InitialLetter"],[4,"Spacing"],[4,"LineHeight"],[3,"Matrix"],[3,"TransformOrigin"],[4,"TimingFunction"],[4,"TimingKeyword"],[4,"StepPosition"],[3,"ClipRect"],[3,"Attr"],[4,"BorderStyle"],[4,"NumberOrPercentage"],[4,"AllowQuirks"],[3,"Angle"],[6,"BackgroundSize"],[6,"BasicShape"],[6,"InsetRect"],[6,"Circle"],[6,"Ellipse"],[6,"ShapeRadius"],[6,"Polygon"],[4,"BorderSideWidth"],[6,"BorderImageSideWidth"],[6,"BorderImageSlice"],[6,"BorderRadius"],[6,"BorderCornerRadius"],[6,"BorderSpacing"],[6,"VerticalAlign"],[3,"CalcLengthOrPercentage"],[4,"CalcNode"],[4,"CalcUnit"],[3,"RGBAColor"],[3,"ColorPropertyValue"],[4,"Color"],[3,"Factor"],[6,"BoxShadow"],[6,"Filter"],[6,"SimpleShadow"],[6,"FlexBasis"],[4,"LineDirection"],[6,"Image"],[6,"Gradient"],[6,"ColorStop"],[6,"MozImageRect"],[3,"CharacterWidth"],[4,"FontRelativeLength"],[4,"FontBaseSize"],[4,"ViewportPercentageLength"],[4,"AbsoluteLength"],[4,"NoCalcLength"],[4,"Length"],[4,"LengthOrPercentage"],[4,"LengthOrPercentageOrAuto"],[4,"LengthOrPercentageOrNone"],[4,"MozLength"],[4,"MaxLength"],[6,"NonNegativeLength"],[6,"NonNegativeLengthOrPercentage"],[6,"LengthOrNumber"],[3,"Percentage"],[4,"PositionComponent"],[4,"X"],[4,"Y"],[8,"Side"],[6,"Position"],[6,"LegacyPosition"],[6,"LengthOrNumberRect"],[6,"SVGLength"],[6,"SVGWidth"],[6,"SVGStrokeDashArray"],[6,"SVGOpacity"],[6,"InitialLetter"],[6,"LetterSpacing"],[6,"WordSpacing"],[6,"LineHeight"],[4,"TimeUnit"],[3,"Time"],[4,"OriginComponent"],[6,"TransformOrigin"],[6,"TimingFunction"],[3,"Number"],[6,"NonNegativeNumber"],[6,"GreaterThanOrEqualToOneNumber"],[3,"Opacity"],[3,"Integer"],[6,"IntegerOrAuto"],[6,"PositiveInteger"],[6,"ClipRectOrAuto"],[3,"None_"],[3,"Auto"],[3,"Normal"],[4,"Impossible"],[3,"PropertyParserContext"],[3,"ComputedValuesInner"],[3,"StyleBuilder"],[4,"CSSWideKeyword"],[4,"LonghandId"],[4,"ShorthandId"],[4,"DeclaredValue"],[4,"DeclaredValueOwned"],[4,"PropertyDeclarationId"],[4,"PropertyId"],[4,"PropertyDeclaration"],[4,"StyleStructRef"],[4,"AliasId"],[3,"ComputedValueFlags"],[3,"AnimationRules"],[4,"Importance"],[4,"AppendableValue"],[3,"PropertyDeclarationBlock"],[3,"DeclarationImportanceIterator"],[3,"NormalDeclarationIterator"],[3,"AnimationValueIterator"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[4,"RepeatKeyword"],[4,"SpecifiedValue"],[3,"T"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[4,"RepeatKeyword"],[3,"T"],[4,"SpecifiedValue"],[4,"T"],[4,"SpecifiedValue"],[4,"T"],[4,"SpecifiedValue"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[4,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[4,"SpecifiedOperation"],[3,"ComputedMatrix"],[3,"ComputedMatrixWithPercents"],[3,"T"],[4,"ComputedOperation"],[3,"SpecifiedValue"],[4,"T"],[4,"T"],[4,"ContentItem"],[4,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[4,"T"],[4,"SpecifiedValue"],[3,"FamilyName"],[3,"T"],[4,"FontFamily"],[4,"FamilyNameSyntax"],[4,"SpecifiedValue"],[4,"T"],[4,"SpecifiedValue"],[4,"T"],[4,"SpecifiedValue"],[3,"T"],[4,"SpecifiedValue"],[4,"KeywordSize"],[4,"SpecifiedValue"],[4,"T"],[4,"SystemFont"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[4,"T"],[3,"SpecifiedValue"],[3,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"T"],[3,"T"],[6,"SpecifiedValue"],[4,"Keyword"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[4,"Side"],[3,"T"],[4,"T"],[3,"SpecifiedValue"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"Longhands"],[3,"LonghandsToSerialize"],[3,"InnerMatrix2D"],[3,"MatrixDecomposed2D"],[3,"MatrixDecomposed3D"],[4,"AnimatableLonghand"],[4,"TransitionProperty"],[4,"AnimatedProperty"],[4,"AnimationValue"],[3,"Translate2D"],[3,"Scale2D"],[3,"Translate3D"],[3,"Scale3D"],[3,"Skew"],[3,"Perspective"],[3,"Quaternion"],[6,"IntermediateSVGPaint"],[6,"Filter"],[3,"Background"],[3,"Border"],[3,"Box"],[3,"Color"],[3,"Column"],[3,"Counters"],[3,"Effects"],[3,"Font"],[3,"InheritedBox"],[3,"InheritedTable"],[3,"InheritedText"],[3,"List"],[3,"Margin"],[3,"Outline"],[3,"Padding"],[3,"Pointing"],[3,"Position"],[3,"Table"],[3,"Text"],[3,"INITIAL_SERVO_VALUES"],[8,"MaybeBoxed"],[3,"NonCustomPropertyId"],[3,"NonCustomPropertyIdSet"],[3,"LonghandIdSet"],[3,"PropertyDeclarationIdSet"],[3,"PropertyFlags"],[3,"UnparsedValue"],[3,"SourcePropertyDeclaration"],[3,"TransitionDurationIter"],[3,"TransitionTimingFunctionIter"],[3,"TransitionPropertyIter"],[3,"TransitionDelayIter"],[3,"AnimationNameIter"],[3,"AnimationDurationIter"],[3,"AnimationTimingFunctionIter"],[3,"AnimationIterationCountIter"],[3,"AnimationDirectionIter"],[3,"AnimationPlayStateIter"],[3,"AnimationFillModeIter"],[3,"AnimationDelayIter"],[3,"ComputedValues"],[3,"CascadeFlags"],[8,"CaseSensitivityExt"],[3,"BuilderArc"],[3,"Iter"],[3,"HashMap"],[3,"HashSet"],[3,"CowRcStr"],[3,"Parser"],[6,"CSSFloat"]]};
searchIndex["style_derive"] = {"doc":"","items":[[5,"derive_animate","style_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_compute_squared_distance","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_to_animated_value","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_to_animated_zero","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_to_computed_value","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_to_css","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["style_traits"] = {"doc":"This module contains shared types and messages for use by devtools/script. The traits are here instead of in script so that the devtools crate can be modified independently of the rest of Servo.","items":[[3,"DevicePixel","style_traits","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",null,null],[3,"PinchZoomFactor","","Represents a mobile style pinch zoom factor. TODO(gw): Once WR supports pinch zoom, use a type directly from webrender_api.",null,null],[3,"ParsingMode","","The mode to use when parsing values.",null,null],[4,"CSSPixel","","One CSS \"px\" in the coordinate system of the \"initial viewport\": http://www.w3.org/TR/css-device-adapt/#initial-viewport",null,null],[4,"StyleParseError","","Errors that can be encountered while parsing CSS values.",null,null],[13,"BadUrlInDeclarationValueBlock","","A bad URL token in a DVB.",0,null],[13,"BadStringInDeclarationValueBlock","","A bad string token in a DVB.",0,null],[13,"UnbalancedCloseParenthesisInDeclarationValueBlock","","Unexpected closing parenthesis in a DVB.",0,null],[13,"UnbalancedCloseSquareBracketInDeclarationValueBlock","","Unexpected closing bracket in a DVB.",0,null],[13,"UnbalancedCloseCurlyBracketInDeclarationValueBlock","","Unexpected closing curly bracket in a DVB.",0,null],[13,"PropertyDeclaration","","A property declaration parsing error.",0,null],[13,"PropertyDeclarationValueNotExhausted","","A property declaration value had input remaining after successfully parsing.",0,null],[13,"UnexpectedDimension","","An unexpected dimension token was encountered.",0,null],[13,"ExpectedIdentifier","","Expected identifier not found.",0,null],[13,"MediaQueryExpectedFeatureName","","Missing or invalid media feature name.",0,null],[13,"MediaQueryExpectedFeatureValue","","Missing or invalid media feature value.",0,null],[13,"RangedExpressionWithNoValue","","min- or max- properties must have a value.",0,null],[13,"UnexpectedFunction","","A function was encountered that was not expected.",0,null],[13,"UnexpectedNamespaceRule","","@namespace must be before any rule but @charset and @import",0,null],[13,"UnexpectedImportRule","","@import must be before any rule but @charset",0,null],[13,"UnexpectedCharsetRule","","Unexpected @charset rule encountered.",0,null],[13,"UnsupportedAtRule","","Unsupported @ rule",0,null],[13,"UnspecifiedError","","A placeholder for many sources of errors that require more specific variants.",0,null],[13,"UnexpectedTokenWithinNamespace","","An unexpected token was found within a namespace rule.",0,null],[13,"ValueError","","An error was encountered while parsing a property value.",0,null],[4,"ValueParseError","","Specific errors that can be encountered while parsing property values.",null,null],[13,"InvalidColor","","An invalid token was encountered while parsing a color value.",1,null],[13,"InvalidFilter","","An invalid filter value was encountered.",1,null],[4,"PropertyDeclarationParseError","","The result of parsing a property declaration.",null,null],[13,"UnknownProperty","","The property declaration was for an unknown property.",2,null],[13,"UnknownVendorProperty","","An unknown vendor-specific identifier was encountered.",2,null],[13,"ExperimentalProperty","","The property declaration was for a disabled experimental property.",2,null],[13,"InvalidValue","","The property declaration contained an invalid value.",2,null],[13,"AnimationPropertyInKeyframeBlock","","The declaration contained an animation property, and we were parsing this as a keyframe block (so that property should be ignored).",2,null],[13,"NotAllowedInPageRule","","The property is not allowed within a page rule.",2,null],[0,"cursor","","A list of common mouse cursors per CSS3-UI § 8.1.1.",null,null],[4,"Cursor","style_traits::cursor","https://drafts.csswg.org/css-ui/#cursor",null,null],[13,"None","","",3,null],[13,"Default","","",3,null],[13,"Pointer","","",3,null],[13,"ContextMenu","","",3,null],[13,"Help","","",3,null],[13,"Progress","","",3,null],[13,"Wait","","",3,null],[13,"Cell","","",3,null],[13,"Crosshair","","",3,null],[13,"Text","","",3,null],[13,"VerticalText","","",3,null],[13,"Alias","","",3,null],[13,"Copy","","",3,null],[13,"Move","","",3,null],[13,"NoDrop","","",3,null],[13,"NotAllowed","","",3,null],[13,"Grab","","",3,null],[13,"Grabbing","","",3,null],[13,"EResize","","",3,null],[13,"NResize","","",3,null],[13,"NeResize","","",3,null],[13,"NwResize","","",3,null],[13,"SResize","","",3,null],[13,"SeResize","","",3,null],[13,"SwResize","","",3,null],[13,"WResize","","",3,null],[13,"EwResize","","",3,null],[13,"NsResize","","",3,null],[13,"NeswResize","","",3,null],[13,"NwseResize","","",3,null],[13,"ColResize","","",3,null],[13,"RowResize","","",3,null],[13,"AllScroll","","",3,null],[13,"ZoomIn","","",3,null],[13,"ZoomOut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_css_keyword","","Given a CSS keyword, get the corresponding cursor enum.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"values","style_traits","Helper types and traits for the handling of CSS values.",null,null],[3,"SequenceWriter","style_traits::values","Convenience wrapper to serialise CSS values separated by a given string.",null,null],[3,"Comma","","Type used as the associated type in the `OneOrMoreSeparated` trait on a type to indicate that a serialized list of elements of this type is separated by commas.",null,null],[3,"Space","","Type used as the associated type in the `OneOrMoreSeparated` trait on a type to indicate that a serialized list of elements of this type is separated by spaces.",null,null],[3,"CommaWithSpace","","Type used as the associated type in the `OneOrMoreSeparated` trait on a type to indicate that a serialized list of elements of this type is separated by commas, but spaces without commas are also allowed when parsing.",null,null],[0,"specified","","Helper types for the handling of specified values.",null,null],[4,"AllowedNumericType","style_traits::values::specified","Whether to allow negative lengths or not.",null,null],[13,"All","","Allow all kind of numeric values.",4,null],[13,"NonNegative","","Allow only non-negative numeric values.",4,null],[13,"AtLeastOne","","Allow only numeric values greater or equal to 1.0.",4,null],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"allowednumerictype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"allowednumerictype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"allowednumerictype"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_ok","","Whether the value fits the rules of this numeric type.",4,{"inputs":[{"name":"self"},{"name":"parsingmode"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"clamp","","Clamp the value following the rules of this numeric type.",4,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[8,"ToCss","style_traits::values","Serialises a value according to its CSS representation.",null,null],[10,"to_css","","Serialize `self` in CSS syntax, writing to `dest`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Separator","","A trait satisfied by the types corresponding to separators.",null,null],[10,"separator","","The separator string that the satisfying separator type corresponds to.",6,{"inputs":[],"output":{"name":"str"}}],[10,"parse","","Parses a sequence of values separated by this separator.",6,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[8,"OneOrMoreSeparated","","Marker trait on T to automatically implement ToCss for Vec when T's are separated by some delimiter `delim`.",null,null],[16,"S","","Associated type indicating which separator is used.",7,null],[11,"new","","Create a new sequence writer.",8,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"self"}}],[11,"item","","Serialises a CSS value, writing any separator as necessary.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"separator","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",9,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"separator","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",10,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"separator","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",11,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[0,"viewport","style_traits","Helper types for the `@viewport` rule.",null,null],[3,"ViewportConstraints","style_traits::viewport","A set of viewport descriptors:",null,null],[12,"size","","Width and height: * https://drafts.csswg.org/css-device-adapt/#width-desc * https://drafts.csswg.org/css-device-adapt/#height-desc",12,null],[12,"initial_zoom","","https://drafts.csswg.org/css-device-adapt/#zoom-desc",12,null],[12,"min_zoom","","https://drafts.csswg.org/css-device-adapt/#min-max-width-desc",12,null],[12,"max_zoom","","https://drafts.csswg.org/css-device-adapt/#min-max-width-desc",12,null],[12,"user_zoom","","https://drafts.csswg.org/css-device-adapt/#user-zoom-desc",12,null],[12,"orientation","","https://drafts.csswg.org/css-device-adapt/#orientation-desc",12,null],[4,"UserZoom","","",null,null],[13,"Zoom","","",13,null],[13,"Fixed","","",13,null],[4,"Orientation","","",null,null],[13,"Auto","","",14,null],[13,"Portrait","","",14,null],[13,"Landscape","","",14,null],[4,"Zoom","","https://drafts.csswg.org/css-device-adapt/#descdef-viewport-zoom",null,null],[13,"Number","","A number value.",15,null],[13,"Percentage","","A percentage value.",15,null],[13,"Auto","","The `auto` keyword.",15,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"userzoom"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"userzoom"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",13,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",13,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse","","Parse this property from a CSS input stream.",14,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"from_ident","","Parse this property from an already-tokenized identifier.",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_css","","",14,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"viewportconstraints"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"viewportconstraints"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"viewportconstraints"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",12,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"zoom"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"zoom"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"zoom"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_css","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"parse","","Parse a zoom value per:",15,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"to_f32","","Get this zoom value as a float value. Returns `None` if the value is the `auto` keyword.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"UnsafeNode","style_traits","Opaque type stored in type-unsafe work queues for parallel layout. Must be transmutable to and from `TNode`.",null,null],[6,"ParseError","","The error type for all CSS parsing routines.",null,null],[17,"PARSING_MODE_DEFAULT","","In CSS, lengths must have units, except for zero values, where the unit can be omitted. https://www.w3.org/TR/css3-values/#lengths",null,null],[17,"PARSING_MODE_ALLOW_UNITLESS_LENGTH","","In SVG, a coordinate or length value without a unit identifier (e.g., \"25\") is assumed to be in user units (px). https://www.w3.org/TR/SVG/coords.html#Units",null,null],[17,"PARSING_MODE_ALLOW_ALL_NUMERIC_VALUES","","In SVG, out-of-range values are not treated as an error in parsing. https://www.w3.org/TR/SVG/implnote.html#RangeClamping",null,null],[8,"SpeculativePainter","","Speculatively execute paint code in the worklet thread pool.",null,null],[10,"speculatively_draw_a_paint_image","","https://drafts.css-houdini.org/css-paint-api/#draw-a-paint-image",16,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pinchzoomfactor"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pinchzoomfactor"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pinchzoomfactor"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Construct a new pinch zoom factor.",17,{"inputs":[{"name":"f32"}],"output":{"name":"pinchzoomfactor"}}],[11,"get","","Get the pinch zoom factor as an untyped float.",17,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"csspixel"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"styleparseerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"styleparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"styleparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"valueparseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"valueparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"valueparseerror"}],"output":{"name":"bool"}}],[11,"from","","",19,{"inputs":[{"name":"valueparseerror"}],"output":{"name":"self"}}],[11,"from_parse_error","","Attempt to extract a ValueParseError value from a ParseError.",1,{"inputs":[{"name":"parseerror"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"propertydeclarationparseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"propertydeclarationparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"propertydeclarationparseerror"}],"output":{"name":"bool"}}],[11,"from","","",19,{"inputs":[{"name":"styleparseerror"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"propertydeclarationparseerror"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parsingmode"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"ordering"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"parsingmode"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"parsingmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"parsingmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"parsingmode"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"parsingmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"parsingmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":{"name":"parsingmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"inputs":[{"name":"self"},{"name":"parsingmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"self"}],"output":{"name":"parsingmode"}}],[11,"extend","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"parsingmode"}}],[11,"allows_unitless_lengths","","Whether the parsing mode allows unitless lengths for non-zero values to be intpreted as px.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"allows_all_numeric_values","","Whether the parsing mode allows all numeric values.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"serialize_function","","",null,null],[14,"define_css_keyword_enum","","",null,null],[14,"__define_css_keyword_enum__add_optional_traits","","",null,null],[14,"__define_css_keyword_enum__actual","","",null,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"devicepixel"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StyleParseError"],[4,"ValueParseError"],[4,"PropertyDeclarationParseError"],[4,"Cursor"],[4,"AllowedNumericType"],[8,"ToCss"],[8,"Separator"],[8,"OneOrMoreSeparated"],[3,"SequenceWriter"],[3,"Comma"],[3,"Space"],[3,"CommaWithSpace"],[3,"ViewportConstraints"],[4,"UserZoom"],[4,"Orientation"],[4,"Zoom"],[8,"SpeculativePainter"],[3,"PinchZoomFactor"],[4,"CSSPixel"],[6,"ParseError"],[3,"ParsingMode"],[3,"DevicePixel"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",3,null],[12,"pats","","",3,null],[12,"guard","","",3,null],[12,"body","","",3,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",4,null],[3,"Expr","","An expression.",null,null],[12,"node","","Type of the expression.",5,null],[12,"attrs","","Attributes tagged on the expression.",5,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",6,null],[12,"pat","","The pattern the field is destructured to",6,null],[12,"is_shorthand","","",6,null],[12,"attrs","","",6,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"ident","","Name of the field.",7,null],[12,"expr","","Value of the field.",7,null],[12,"is_shorthand","","Whether this is a shorthand field, e.g. `Struct { x }` instead of `Struct { x: x }`.",7,null],[12,"attrs","","Attributes tagged on the field.",7,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",8,null],[12,"ty","","",8,null],[12,"init","","Initializer expression to set the value, if any",8,null],[12,"attrs","","",8,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",9,null],[12,"ty_params","","",9,null],[12,"where_clause","","",9,null],[3,"Lifetime","","",null,null],[12,"ident","","",10,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",11,null],[12,"lifetime","","",11,null],[12,"bounds","","",11,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",12,null],[12,"ident","","",12,null],[12,"bounds","","",12,null],[12,"default","","",12,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",13,null],[12,"bounded_ty","","The type being bounded",13,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",13,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",14,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",15,null],[12,"rhs_ty","","",15,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",17,null],[12,"output","","",17,null],[12,"variadic","","",17,null],[3,"ForeignItem","","",null,null],[12,"ident","","",18,null],[12,"attrs","","",18,null],[12,"node","","",18,null],[12,"vis","","",18,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",19,null],[12,"items","","",19,null],[3,"ImplItem","","",null,null],[12,"ident","","",20,null],[12,"vis","","",20,null],[12,"defaultness","","",20,null],[12,"attrs","","",20,null],[12,"node","","",20,null],[3,"Item","","An item",null,null],[12,"ident","","",21,null],[12,"vis","","",21,null],[12,"attrs","","",21,null],[12,"node","","",21,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",22,null],[12,"constness","","",22,null],[12,"abi","","",22,null],[12,"decl","","",22,null],[12,"generics","","",22,null],[3,"PathListItem","","",null,null],[12,"name","","",23,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",23,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"ident","","",24,null],[12,"attrs","","",24,null],[12,"node","","",24,null],[3,"Crate","","",null,null],[12,"shebang","","",25,null],[12,"attrs","","",25,null],[12,"items","","",25,null],[3,"ByteStrLit","","",null,null],[12,"value","","",26,null],[12,"style","","",26,null],[3,"FloatLit","","",null,null],[12,"value","","",27,null],[12,"suffix","","",27,null],[3,"IntLit","","",null,null],[12,"value","","",28,null],[12,"suffix","","",28,null],[3,"StrLit","","",null,null],[12,"value","","",29,null],[12,"style","","",29,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",30,null],[12,"tts","","The delimited sequence of token trees",30,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",31,null],[12,"tts","","",31,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",32,null],[12,"vis","","Visibility of the struct or enum.",32,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",32,null],[12,"generics","","Generics required to complete the definition.",32,null],[12,"body","","Data within the struct or enum.",32,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",33,null],[12,"types","","The type parameters for this path segment, if present.",33,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",33,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",34,null],[12,"ty","","",34,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",35,null],[12,"abi","","",35,null],[12,"lifetimes","","",35,null],[12,"inputs","","",35,null],[12,"output","","",35,null],[12,"variadic","","",35,null],[3,"MutTy","","",null,null],[12,"ty","","",36,null],[12,"mutability","","",36,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",37,null],[12,"output","","`C`",37,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",38,null],[12,"segments","","The segments in the path: the things separated by `::`.",38,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",39,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",39,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",40,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",40,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",41,null],[12,"position","","",41,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",42,null],[12,"ty","","",42,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",43,null],[13,"Inner","","Attribute of the form `#[...]`.",43,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",44,null],[13,"List","","List meta item.",44,null],[13,"NameValue","","Name-value meta item.",44,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",45,null],[13,"Literal","","A Rust literal.",45,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",46,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",46,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",46,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",46,null],[13,"Cast","","A cast (`foo as f64`)",46,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",46,null],[13,"Index","","An indexing operation (`foo[2]`)",46,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",46,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",46,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",47,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",47,null],[13,"Unit","","Unit variant, e.g. `None`.",47,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",48,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",48,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",48,null],[13,"Inherited","","Inherited, i.e. private.",48,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",49,null],[13,"ByValue","","",49,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",50,null],[13,"Ref","","",50,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",51,null],[13,"InPlace","","First expr is the place; second expr is the value.",51,null],[13,"Array","","An array, e.g. `[a, b, c, d]`.",51,null],[13,"Call","","A function call.",51,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",51,null],[13,"Tup","","A tuple, e.g. `(a, b, c, d)`.",51,null],[13,"Binary","","A binary operation, e.g. `a + b`, `a * b`.",51,null],[13,"Unary","","A unary operation, e.g. `!x`, `*x`.",51,null],[13,"Lit","","A literal, e.g. `1`, `\"foo\"`.",51,null],[13,"Cast","","A cast, e.g. `foo as f64`.",51,null],[13,"Type","","A type ascription, e.g. `foo: f64`.",51,null],[13,"If","","An `if` block, with an optional else block",51,null],[13,"IfLet","","An `if let` expression with an optional else block",51,null],[13,"While","","A while loop, with an optional label",51,null],[13,"WhileLet","","A while-let loop, with an optional label.",51,null],[13,"ForLoop","","A for loop, with an optional label.",51,null],[13,"Loop","","Conditionless loop with an optional label.",51,null],[13,"Match","","A `match` block.",51,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",51,null],[13,"Block","","A block (`{ ... }` or `unsafe { ... }`)",51,null],[13,"Assign","","An assignment (`a = foo()`)",51,null],[13,"AssignOp","","An assignment with an operator",51,null],[13,"Field","","Access of a named struct field (`obj.foo`)",51,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",51,null],[13,"Index","","An indexing operation (`foo[2]`)",51,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",51,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",51,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",51,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",51,null],[13,"Continue","","A `continue`, with an optional label",51,null],[13,"Ret","","A `return`, with an optional value to be returned",51,null],[13,"Mac","","A macro invocation; pre-expansion",51,null],[13,"Struct","","A struct literal expression.",51,null],[13,"Repeat","","An array literal constructed from one repeated element.",51,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",51,null],[13,"Try","","`expr?`",51,null],[4,"MacStmtStyle","","How a macro was invoked.",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",52,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",52,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",52,null],[4,"Pat","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",53,null],[13,"Ident","","A `Pat::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",53,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",53,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",53,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Box","","A `box` pattern",53,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",53,null],[13,"Lit","","A literal",53,null],[13,"Range","","A range pattern, e.g. `1...2`",53,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `Pat::Slice(box [a, b], Some(i), box [y, z])`",53,null],[13,"Mac","","A macro pattern; pre-expansion",53,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",54,null],[13,"Closed","","Inclusive at the beginning and end",54,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",55,null],[13,"Item","","An item definition.",55,null],[13,"Expr","","Expr without trailing semicolon.",55,null],[13,"Semi","","Expression with trailing semicolon;",55,null],[13,"Mac","","Macro invocation.",55,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",56,null],[13,"Maybe","","",56,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",57,null],[13,"Region","","",57,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",58,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",58,null],[13,"EqPredicate","","An equality predicate (unsupported)",58,null],[4,"Constness","","",null,null],[13,"Const","","",59,null],[13,"NotConst","","",59,null],[4,"Defaultness","","",null,null],[13,"Default","","",60,null],[13,"Final","","",60,null],[4,"FnArg","","An argument in a function header.",null,null],[13,"SelfRef","","",61,null],[13,"SelfValue","","",61,null],[13,"Captured","","",61,null],[13,"Ignored","","",61,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",62,null],[13,"Static","","A foreign static item (`static ext: u8`)",62,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",63,null],[13,"Method","","",63,null],[13,"Type","","",63,null],[13,"Macro","","",63,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",64,null],[13,"Negative","","`impl !Trait for Type`",64,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",65,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",65,null],[13,"Static","","A static item (`static` or `pub static`).",65,null],[13,"Const","","A constant item (`const` or `pub const`).",65,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",65,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",65,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",65,null],[13,"Ty","","A type alias (`type` or `pub type`).",65,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",65,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",65,null],[13,"Union","","A union definition (`union` or `pub union`).",65,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",65,null],[13,"DefaultImpl","","Default trait implementation.",65,null],[13,"Impl","","An implementation.",65,null],[13,"Mac","","A macro invocation (which includes macro definition).",65,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",66,null],[13,"Method","","",66,null],[13,"Type","","",66,null],[13,"Macro","","",66,null],[4,"ViewPath","","",null,null],[13,"Simple","","`foo::bar::baz as quux`",67,null],[13,"Glob","","`foo::bar::*`",67,null],[13,"List","","`foo::bar::{a, b, c}`",67,null],[4,"FloatTy","","",null,null],[13,"F32","","",68,null],[13,"F64","","",68,null],[13,"Unsuffixed","","",68,null],[4,"IntTy","","",null,null],[13,"Isize","","",69,null],[13,"I8","","",69,null],[13,"I16","","",69,null],[13,"I32","","",69,null],[13,"I64","","",69,null],[13,"Usize","","",69,null],[13,"U8","","",69,null],[13,"U16","","",69,null],[13,"U32","","",69,null],[13,"U64","","",69,null],[13,"Unsuffixed","","",69,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",70,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",70,null],[13,"Byte","","A byte char (`b'f'`)",70,null],[13,"Char","","A character literal (`'a'`)",70,null],[13,"Int","","An integer literal (`1`)",70,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",70,null],[13,"Bool","","A boolean literal",70,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",71,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",71,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",72,null],[13,"Minus","","",72,null],[13,"Star","","",72,null],[13,"Slash","","",72,null],[13,"Percent","","",72,null],[13,"Caret","","",72,null],[13,"And","","",72,null],[13,"Or","","",72,null],[13,"Shl","","",72,null],[13,"Shr","","",72,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",73,null],[13,"Bracket","","A square bracket: `[` or `]`",73,null],[13,"Brace","","A curly brace: `{` or `}`",73,null],[4,"Token","","",null,null],[13,"Eq","","",74,null],[13,"Lt","","",74,null],[13,"Le","","",74,null],[13,"EqEq","","",74,null],[13,"Ne","","",74,null],[13,"Ge","","",74,null],[13,"Gt","","",74,null],[13,"AndAnd","","",74,null],[13,"OrOr","","",74,null],[13,"Not","","",74,null],[13,"Tilde","","",74,null],[13,"BinOp","","",74,null],[13,"BinOpEq","","",74,null],[13,"At","","",74,null],[13,"Dot","","",74,null],[13,"DotDot","","",74,null],[13,"DotDotDot","","",74,null],[13,"Comma","","",74,null],[13,"Semi","","",74,null],[13,"Colon","","",74,null],[13,"ModSep","","",74,null],[13,"RArrow","","",74,null],[13,"LArrow","","",74,null],[13,"FatArrow","","",74,null],[13,"Pound","","",74,null],[13,"Dollar","","",74,null],[13,"Question","","",74,null],[13,"Literal","","",74,null],[13,"Ident","","",74,null],[13,"Underscore","","",74,null],[13,"Lifetime","","",74,null],[13,"DocComment","","",74,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",75,null],[13,"Delimited","","A delimited sequence of token trees",75,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",76,null],[13,"Struct","","It's a struct.",76,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",77,null],[13,"Sub","","The `-` operator (subtraction)",77,null],[13,"Mul","","The `*` operator (multiplication)",77,null],[13,"Div","","The `/` operator (division)",77,null],[13,"Rem","","The `%` operator (modulus)",77,null],[13,"And","","The `&&` operator (logical and)",77,null],[13,"Or","","The `||` operator (logical or)",77,null],[13,"BitXor","","The `^` operator (bitwise xor)",77,null],[13,"BitAnd","","The `&` operator (bitwise and)",77,null],[13,"BitOr","","The `|` operator (bitwise or)",77,null],[13,"Shl","","The `<<` operator (shift left)",77,null],[13,"Shr","","The `>>` operator (shift right)",77,null],[13,"Eq","","The `==` operator (equality)",77,null],[13,"Lt","","The `<` operator (less than)",77,null],[13,"Le","","The `<=` operator (less than or equal to)",77,null],[13,"Ne","","The `!=` operator (not equal to)",77,null],[13,"Ge","","The `>=` operator (greater than or equal to)",77,null],[13,"Gt","","The `>` operator (greater than)",77,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",78,null],[13,"Not","","The `!` operator for logical inversion",78,null],[13,"Neg","","The `-` operator for negation",78,null],[4,"Abi","","",null,null],[13,"Named","","",79,null],[13,"Rust","","",79,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",80,null],[13,"Ty","","Everything else",80,null],[4,"Mutability","","",null,null],[13,"Mutable","","",81,null],[13,"Immutable","","",81,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",82,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",82,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",83,null],[13,"Array","","A fixed length array (`[T; n]`)",83,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",83,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",83,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",83,null],[13,"Never","","The never type (`!`)",83,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",83,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",83,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",83,null],[13,"Mac","","A macro in the type position.",83,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",84,null],[13,"Normal","","",84,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_crate","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_items","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_inner_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"name","","Name of the item.",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fields","","Slice containing the fields stored in the variant.",47,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",47,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"exprkind"}],"output":{"name":"expr"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",9,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",9,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",86,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"from","","",12,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",14,null],[11,"none","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",88,null],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",88,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"from","","",21,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"viewpath"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"from","","",70,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",70,null],[11,"from","","",70,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"from","","",70,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"from","","",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"none","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",33,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_view_path","","",null,{"inputs":[{"name":"v"},{"name":"viewpath"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",89,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",89,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",89,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",89,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",89,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",89,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",89,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",89,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",89,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",89,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",89,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",89,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",89,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",89,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",89,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",89,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",89,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",89,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",89,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",89,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_crate","","",89,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"visit_item","","",89,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_expr","","",89,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_foreign_item","","",89,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",89,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_fn_decl","","",89,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_trait_item","","",89,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",89,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_method_sig","","",89,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_stmt","","",89,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_local","","",89,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_view_path","","",89,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",90,null],[13,"Error","","Parsing failed.",90,null],[5,"item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"pat","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"block","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"stmt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Arm"],[3,"Block"],[3,"Expr"],[3,"FieldPat"],[3,"FieldValue"],[3,"Local"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"FnDecl"],[3,"ForeignItem"],[3,"ForeignMod"],[3,"ImplItem"],[3,"Item"],[3,"MethodSig"],[3,"PathListItem"],[3,"TraitItem"],[3,"Crate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"BindingMode"],[4,"CaptureBy"],[4,"ExprKind"],[4,"MacStmtStyle"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"Constness"],[4,"Defaultness"],[4,"FnArg"],[4,"ForeignItemKind"],[4,"ImplItemKind"],[4,"ImplPolarity"],[4,"ItemKind"],[4,"TraitItemKind"],[4,"ViewPath"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper methods for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindOpts","synstructure","Binding options to use when generating a pattern. Configuration options used for generating binding patterns.",null,null],[3,"BindingInfo","","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"ident","","",0,null],[12,"field","","",0,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",1,null],[13,"MoveMut","","`mut x`",1,null],[13,"Ref","","`ref x`",1,null],[13,"RefMut","","`ref mut x`",1,null],[5,"match_pattern","","Generate a match pattern for binding to the given VariantData This function returns a tuple of the tokens which make up that match pattern, and a `BindingInfo` object for each of the bindings which were made. The `bind` parameter controls the type of binding which is made.",null,null],[5,"each_variant","","This method calls `func` once per variant in the struct or enum, and generates a series of match branches which will destructure a the input, and run the result of `func` once for each of the variants.",null,{"inputs":[{"name":"macroinput"},{"name":"bindopts"},{"name":"f"}],"output":{"name":"tokens"}}],[5,"match_substructs","","This method generates a match branch for each of the substructures of the given `MacroInput`. It will call `func` for each of these substructures, passing in the bindings which were made for each of the fields in the substructure. The return value of `func` is then used as the value of each branch",null,{"inputs":[{"name":"macroinput"},{"name":"bindopts"},{"name":"f"}],"output":{"name":"tokens"}}],[5,"each_field","","This method calls `func` once per field in the struct or enum, and generates a series of match branches which will destructure match argument, and run the result of `func` once on each of the bindings.",null,{"inputs":[{"name":"macroinput"},{"name":"bindopts"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bindopts"}}],[11,"new","","Create a BindOpts with the given style, and the default prefix: \"__binding\".",2,{"inputs":[{"name":"bindstyle"}],"output":{"name":"bindopts"}}],[11,"with_prefix","","Create a BindOpts with the given style and prefix.",2,{"inputs":[{"name":"bindstyle"},{"name":"string"}],"output":{"name":"bindopts"}}],[11,"from","","",2,{"inputs":[{"name":"bindstyle"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}]],"paths":[[3,"BindingInfo"],[4,"BindStyle"],[3,"BindOpts"]]};
searchIndex["tendril"] = {"doc":"","items":[[3,"Tendril","tendril","Compact string type for zero-copy parsing.",null,null],[3,"SendTendril","","A simple wrapper to make `Tendril` `Send`.",null,null],[3,"Atomic","","A marker of an atomic (and hence concurrent) tendril.",null,null],[3,"NonAtomic","","A marker of a non-atomic tendril.",null,null],[3,"IncompleteUtf8","","",null,null],[4,"SubtendrilError","","Errors that can occur when slicing a `Tendril`.",null,null],[13,"OutOfBounds","","",0,null],[13,"ValidationFailed","","",0,null],[0,"fmt","","Marker types for formats.",null,null],[3,"Bytes","tendril::fmt","Marker type for uninterpreted bytes.",null,null],[3,"ASCII","","Marker type for ASCII text.",null,null],[3,"UTF8","","Marker type for UTF-8 text.",null,null],[3,"WTF8","","Marker type for WTF-8 text.",null,null],[3,"Latin1","","Marker type for the single-byte encoding of the first 256 Unicode codepoints.",null,null],[0,"imp","","Implementation details.",null,null],[3,"Fixup","tendril::fmt::imp","Describes how to fix up encodings when concatenating.",null,null],[12,"drop_left","","",1,null],[12,"drop_right","","",1,null],[12,"insert_len","","",1,null],[12,"insert_bytes","","",1,null],[3,"SingleByteCharIndices","","",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"fixup"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",2,null],[8,"Format","tendril::fmt","Trait for format marker types.",null,null],[10,"validate","","Check whether the buffer is valid for this format.",3,null],[11,"validate_prefix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_suffix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_subseq","","Check whether the buffer is valid for this format.",3,null],[11,"fixup","","Compute any fixup needed when concatenating buffers.",3,null],[8,"SubsetOf","","Indicates that one format is a subset of another.",null,null],[11,"revalidate_subset","","Validate the other direction of conversion; check if this buffer from the superset format conforms to the subset format.",4,null],[8,"SliceFormat","","Indicates a format which corresponds to a Rust slice type, representing exactly the same invariants.",null,null],[16,"Slice","","",5,null],[8,"CharFormat","","Indicates a format which contains characters from Unicode (all of it, or some proper subset).",null,null],[16,"Iter","","Iterator for characters and their byte indices.",6,null],[10,"char_indices","","Iterate over the characters of the string and their byte indices.",6,null],[10,"encode_char","","Encode the character as bytes and pass them to a continuation.",6,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[8,"Slice","","Indicates a Rust slice type that is represented in memory as bytes.",null,null],[10,"as_bytes","","Access the raw bytes of the slice.",7,null],[10,"from_bytes","","Convert a byte slice to this kind of slice.",7,null],[10,"from_mut_bytes","","Convert a byte slice to this kind of slice.",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"validate","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ascii"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"ascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"validate","","",9,null],[11,"validate_prefix","","",9,null],[11,"validate_suffix","","",9,null],[11,"validate_subseq","","",9,null],[11,"char_indices","","",9,null],[11,"encode_char","","",9,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"utf8"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"utf8"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"validate","","",10,null],[11,"validate_prefix","","",10,null],[11,"validate_suffix","","",10,null],[11,"validate_subseq","","",10,null],[11,"char_indices","","",10,null],[11,"encode_char","","",10,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"wtf8"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"wtf8"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"validate","","",11,null],[11,"validate_prefix","","",11,null],[11,"validate_suffix","","",11,null],[11,"validate_subseq","","",11,null],[11,"fixup","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"latin1"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"latin1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"validate","","",12,null],[11,"validate_prefix","","",12,null],[11,"validate_suffix","","",12,null],[11,"validate_subseq","","",12,null],[11,"char_indices","","",12,null],[11,"encode_char","","",12,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[0,"stream","tendril","Streams of tendrils.",null,null],[3,"Utf8LossyDecoder","tendril::stream","A `TendrilSink` adaptor that takes bytes, decodes them as UTF-8, lossily replace ill-formed byte sequences with U+FFFD replacement characters, and emits Unicode (`StrTendril`).",null,null],[12,"inner_sink","","",13,null],[8,"TendrilSink","","Trait for types that can process a tendril.",null,null],[10,"process","","Process this tendril.",14,{"inputs":[{"name":"self"},{"name":"tendril"}],"output":null}],[10,"error","","Indicates that an error has occurred.",14,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[16,"Output","","What the overall result of processing is.",14,null],[10,"finish","","Indicates the end of the stream.",14,null],[11,"one","","Process one tendril and finish.",14,null],[11,"from_iter","","Consume an iterator of tendrils, processing each item, then finish.",14,null],[11,"read_from","","Read from the given stream of bytes until exhaustion and process incrementally, then finish. Return `Err` at the first I/O error.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"from_file","","Read from the file at the given path and process incrementally, then finish. Return `Err` at the first I/O error.",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Create a new incremental UTF-8 decoder.",13,{"inputs":[{"name":"sink"}],"output":{"name":"self"}}],[11,"process","","",13,{"inputs":[{"name":"self"},{"name":"tendril"}],"output":null}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"finish","","",13,null],[11,"new","tendril","",15,{"inputs":[],"output":{"name":"self"}}],[11,"increment","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrement","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fence_acquire","","",15,{"inputs":[],"output":null}],[11,"new","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"increment","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrement","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fence_acquire","","",16,{"inputs":[],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"subtendrilerror"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"subtendrilerror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",17,null],[11,"deref_mut","","",17,null],[11,"borrow","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"tendril"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Create a new, empty `Tendril` in any format.",17,{"inputs":[],"output":{"name":"tendril"}}],[11,"with_capacity","","Create a new, empty `Tendril` with a specified capacity.",17,{"inputs":[{"name":"u32"}],"output":{"name":"tendril"}}],[11,"reserve","","Reserve space for additional bytes.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"len32","","Get the length of the `Tendril`.",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_shared","","Is the backing buffer shared?",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shared_with","","Is the backing buffer shared with this other `Tendril`?",17,{"inputs":[{"name":"self"},{"name":"tendril"}],"output":{"name":"bool"}}],[11,"clear","","Truncate to length 0 without discarding any owned storage.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"try_from_byte_slice","","Build a `Tendril` by copying a byte slice, if it conforms to the format.",17,null],[11,"as_bytes","","View as uninterpreted bytes.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"into_bytes","","Convert into uninterpreted bytes.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"into_send","","Convert `self` into a type which is `Send`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sendtendril"}}],[11,"as_superset","","View as a superset format, for free.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"into_superset","","Convert into a superset format, for free.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"try_as_subset","","View as a subset format, if the `Tendril` conforms to that subset.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_into_subset","","Convert into a subset format, if the `Tendril` conforms to that subset.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_reinterpret_view","","View as another format, if the bytes of the `Tendril` are valid for that format.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_reinterpret","","Convert into another format, if the `Tendril` conforms to that format.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_push_bytes","","Push some bytes onto the end of the `Tendril`, if they conform to the format.",17,null],[11,"push_tendril","","Push another `Tendril` onto the end of this one.",17,{"inputs":[{"name":"self"},{"name":"tendril"}],"output":null}],[11,"try_subtendril","","Attempt to slice this `Tendril` as a new `Tendril`.",17,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"subtendril","","Slice this `Tendril` as a new `Tendril`.",17,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"tendril"}}],[11,"try_pop_front","","Try to drop `n` bytes from the front.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"pop_front","","Drop `n` bytes from the front.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"try_pop_back","","Drop `n` bytes from the back.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"pop_back","","Drop `n` bytes from the back.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"reinterpret_view_without_validating","","View as another format, without validating.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"reinterpret_without_validating","","Convert into another format, without validating.",17,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[11,"from_byte_slice_without_validating","","Build a `Tendril` by copying a byte slice, without validating.",17,null],[11,"push_bytes_without_validating","","Push some bytes onto the end of the `Tendril`, without validating.",17,null],[11,"unsafe_subtendril","","Slice this `Tendril` as a new `Tendril`.",17,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"tendril"}}],[11,"unsafe_pop_front","","Drop `n` bytes from the front.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"unsafe_pop_back","","Drop `n` bytes from the back.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from_slice","","Build a `Tendril` by copying a slice.",17,null],[11,"push_slice","","Push a slice onto the end of the `Tendril`.",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sendtendril"}}],[11,"from","","",18,{"inputs":[{"name":"tendril"}],"output":{"name":"sendtendril"}}],[11,"from","","",17,{"inputs":[{"name":"sendtendril"}],"output":{"name":"tendril"}}],[11,"pop_front_char","","Remove and return the first character, if any.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front_char_run","","Remove and return a run of characters at the front of the `Tendril` which are classified the same according to the function `classify`.",17,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"try_push_char","","Push a character, if it can be represented in this format.",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"write_all","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_uninitialized","","Push \"uninitialized bytes\" onto the end.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"push_char","","Push a character onto the end.",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"from_char","","Create a `Tendril` from a single character.",17,{"inputs":[{"name":"char"}],"output":{"name":"tendril"}}],[11,"format","","Helper for the `format_tendril!` macro.",17,{"inputs":[{"name":"arguments"}],"output":{"name":"tendril"}}],[11,"from","","",17,null],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"name":"tendril"}}],[11,"as_ref","","",17,null],[11,"decode_utf8_lossy","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"try_complete","","",19,{"inputs":[{"name":"self"},{"name":"tendril"},{"name":"f"}],"output":{"name":"result"}}],[6,"ByteTendril","","`Tendril` for storing binary data.",null,null],[6,"StrTendril","","`Tendril` for storing native Rust strings.",null,null],[8,"SliceExt","","`Tendril`-related methods for Rust slices.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",20,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}],[8,"ReadExt","","Extension trait for `io::Read`.",null,null],[10,"read_to_tendril","","",21,{"inputs":[{"name":"self"},{"name":"tendril"}],"output":{"name":"result"}}],[8,"Atomicity","","The multithreadedness of a tendril.",null,null],[14,"format_tendril","","Create a `StrTendril` through string formatting.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",20,{"inputs":[{"name":"self"}],"output":{"name":"tendril"}}]],"paths":[[4,"SubtendrilError"],[3,"Fixup"],[3,"SingleByteCharIndices"],[8,"Format"],[8,"SubsetOf"],[8,"SliceFormat"],[8,"CharFormat"],[8,"Slice"],[3,"Bytes"],[3,"ASCII"],[3,"UTF8"],[3,"WTF8"],[3,"Latin1"],[3,"Utf8LossyDecoder"],[8,"TendrilSink"],[3,"NonAtomic"],[3,"Atomic"],[3,"Tendril"],[3,"SendTendril"],[3,"IncompleteUtf8"],[8,"SliceExt"],[8,"ReadExt"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -76060 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","url","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",15,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",22,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["url_serde"] = {"doc":"This crate provides wrappers and convenience functions to make rust-url and Serde work hand in hand.","items":[[3,"Ser","url_serde","A wrapper to serialize `rust-url` types.",null,null],[3,"De","","A wrapper to deserialize `rust-url` types.",null,null],[3,"Serde","","A convenience wrapper to be used as a type parameter, for example when a `Vec<T>` or an `HashMap<K, V>` need to be passed to serde.",null,null],[12,"0","","",0,null],[5,"serialize","","Serialises `value` with a given serializer.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","Deserialises a `T` value with a given deserializer.",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"SerdeUrl","","A convenience type alias for Serde.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Ser` wrapper.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this wrapper, returning the deserialized value.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"serde"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"serde"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"serde"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this wrapper, returning the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}]],"paths":[[3,"Serde"],[3,"Ser"],[3,"De"]]};
searchIndex["utf8"] = {"doc":"","items":[[3,"LossyDecoder","utf8","A push-based, lossy decoder for UTF-8. Errors are replaced with the U+FFFD replacement character.",null,null],[3,"Incomplete","","",null,null],[12,"buffer","","",0,null],[12,"buffer_len","","",0,null],[4,"DecodeError","","",null,null],[13,"Invalid","","In lossy decoding insert `valid_prefix`, then `\"\\u{FFFD}\"`, then call `decode()` again with `remaining_input`.",1,null],[12,"valid_prefix","utf8::DecodeError","",1,null],[12,"invalid_sequence","","",1,null],[12,"remaining_input","","",1,null],[13,"Incomplete","utf8","Call the `incomplete_suffix.try_complete` method with more input when available. If no more input is available, this is an invalid byte sequence.",1,null],[12,"valid_prefix","utf8::DecodeError","",1,null],[12,"incomplete_suffix","","",1,null],[5,"decode","utf8","",null,null],[11,"new","","Create a new decoder from a callback.",2,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"feed","","Feed one chunk of input into the decoder.",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[17,"REPLACEMENT_CHARACTER","","The replacement character, U+FFFD. In lossy decoding, insert it for every decoding error.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"incomplete"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",0,null],[11,"try_complete","","`None``try_complete``Some((result, remaining_input))``Incomplete``remaining_input``decode()`",0,null]],"paths":[[3,"Incomplete"],[4,"DecodeError"],[3,"LossyDecoder"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["webrender_api"] = {"doc":"","items":[[3,"ResourceUpdates","webrender_api","The resource updates for a given transaction (they must be applied in the same frame).",null,null],[12,"updates","","",0,null],[3,"AddImage","","",null,null],[12,"key","","",1,null],[12,"descriptor","","",1,null],[12,"data","","",1,null],[12,"tiling","","",1,null],[3,"UpdateImage","","",null,null],[12,"key","","",2,null],[12,"descriptor","","",2,null],[12,"data","","",2,null],[12,"dirty_rect","","",2,null],[3,"HitTestItem","","",null,null],[12,"pipeline","","The pipeline that the display item that was hit belongs to.",3,null],[12,"tag","","The tag of the hit display item.",3,null],[12,"point_in_viewport","","The hit point in the coordinate space of the \"viewport\" of the display item. The viewport is the scroll node formed by the root reference frame of the display item's pipeline.",3,null],[12,"point_relative_to_item","","The coordinates of the original hit test point relative to the origin of this item. This is useful for calculating things like text offsets in the client.",3,null],[3,"HitTestResult","","",null,null],[12,"items","","",4,null],[3,"HitTestFlags","","",null,null],[3,"AddFontInstance","","",null,null],[12,"key","","",5,null],[12,"font_key","","",5,null],[12,"glyph_size","","",5,null],[12,"options","","",5,null],[12,"platform_options","","",5,null],[12,"variations","","",5,null],[3,"Epoch","","",null,null],[12,"0","","",6,null],[3,"IdNamespace","","",null,null],[12,"0","","",7,null],[3,"DocumentId","","",null,null],[12,"0","","",8,null],[12,"1","","",8,null],[3,"PipelineId","","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it's clonable, serializable, comparable, and hashable.",null,null],[12,"0","","",9,null],[12,"1","","",9,null],[3,"ResourceId","","",null,null],[12,"0","","",10,null],[3,"ExternalEvent","","An opaque pointer-sized value.",null,null],[3,"RenderApiSender","","",null,null],[3,"RenderApi","","",null,null],[3,"ScrollLayerState","","",null,null],[12,"id","","",11,null],[12,"scroll_offset","","",11,null],[3,"ZoomFactor","","Represents a zoom factor.",null,null],[3,"PropertyBindingId","","",null,null],[3,"PropertyBindingKey","","A unique key that is used for connecting animated property values to bindings in the display list.",null,null],[12,"id","","",12,null],[3,"PropertyValue","","The current value of an animated property. This is supplied by the calling code.",null,null],[12,"key","","",13,null],[12,"value","","",13,null],[3,"DynamicProperties","","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties.",null,null],[12,"transforms","","",14,null],[12,"floats","","",14,null],[3,"ColorF","","Represents RGBA screen colors with floating point numbers.",null,null],[12,"r","","",15,null],[12,"g","","",15,null],[12,"b","","",15,null],[12,"a","","",15,null],[3,"ColorU","","Represents RGBA screen colors with one byte per channel.",null,null],[12,"r","","",16,null],[12,"g","","",16,null],[12,"b","","",16,null],[12,"a","","",16,null],[3,"ClipAndScrollInfo","","",null,null],[12,"scroll_node_id","","",17,null],[12,"clip_node_id","","",17,null],[3,"DisplayItem","","",null,null],[12,"item","","",18,null],[12,"clip_and_scroll","","",18,null],[12,"info","","",18,null],[3,"PrimitiveInfo","","",null,null],[12,"rect","","",19,null],[12,"local_clip","","",19,null],[12,"is_backface_visible","","",19,null],[12,"tag","","",19,null],[3,"ClipDisplayItem","","",null,null],[12,"id","","",20,null],[12,"image_mask","","",20,null],[3,"StickyOffsetBounds","","The minimum and maximum allowable offset for a sticky frame in a single dimension.",null,null],[12,"min","","The minimum offset for this frame, typically a negative value, which specifies how far in the negative direction the sticky frame can offset its contents in this dimension.",21,null],[12,"max","","The maximum offset for this frame, typically a positive value, which specifies how far in the positive direction the sticky frame can offset its contents in this dimension.",21,null],[3,"StickyFrameDisplayItem","","",null,null],[12,"id","","",22,null],[12,"margins","","The margins that should be maintained between the edge of the parent viewport and this sticky frame. A margin of None indicates that the sticky frame should not stick at all to that particular edge of the viewport.",22,null],[12,"vertical_offset_bounds","","The minimum and maximum vertical offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",22,null],[12,"horizontal_offset_bounds","","The minimum and maximum horizontal offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",22,null],[12,"previously_applied_offset","","The amount of offset that has already been applied to the sticky frame. A positive y component this field means that a top-sticky item was in a scrollframe that has been scrolled down, such that the sticky item's position needed to be offset downwards by `previously_applied_offset.y`. A negative y component corresponds to the upward offset applied due to bottom-stickiness. The x-axis works analogously.",22,null],[3,"ScrollFrameDisplayItem","","",null,null],[12,"id","","",23,null],[12,"image_mask","","",23,null],[12,"scroll_sensitivity","","",23,null],[3,"RectangleDisplayItem","","",null,null],[12,"color","","",24,null],[3,"LineDisplayItem","","",null,null],[12,"orientation","","",25,null],[12,"wavy_line_thickness","","",25,null],[12,"color","","",25,null],[12,"style","","",25,null],[3,"TextDisplayItem","","",null,null],[12,"font_key","","",26,null],[12,"color","","",26,null],[12,"glyph_options","","",26,null],[3,"NormalBorder","","",null,null],[12,"left","","",27,null],[12,"right","","",27,null],[12,"top","","",27,null],[12,"bottom","","",27,null],[12,"radius","","",27,null],[3,"NinePatchDescriptor","","",null,null],[12,"width","","",28,null],[12,"height","","",28,null],[12,"slice","","",28,null],[3,"ImageBorder","","",null,null],[12,"image_key","","",29,null],[12,"patch","","",29,null],[12,"fill","","Controls whether the center of the 9 patch image is rendered or ignored.",29,null],[12,"outset","","",29,null],[12,"repeat_horizontal","","",29,null],[12,"repeat_vertical","","",29,null],[3,"GradientBorder","","",null,null],[12,"gradient","","",30,null],[12,"outset","","",30,null],[3,"RadialGradientBorder","","",null,null],[12,"gradient","","",31,null],[12,"outset","","",31,null],[3,"BorderDisplayItem","","",null,null],[12,"widths","","",32,null],[12,"details","","",32,null],[3,"BorderRadius","","",null,null],[12,"top_left","","",33,null],[12,"top_right","","",33,null],[12,"bottom_left","","",33,null],[12,"bottom_right","","",33,null],[3,"BorderWidths","","",null,null],[12,"left","","",34,null],[12,"top","","",34,null],[12,"right","","",34,null],[12,"bottom","","",34,null],[3,"BorderSide","","",null,null],[12,"color","","",35,null],[12,"style","","",35,null],[3,"BoxShadowDisplayItem","","",null,null],[12,"box_bounds","","",36,null],[12,"offset","","",36,null],[12,"color","","",36,null],[12,"blur_radius","","",36,null],[12,"spread_radius","","",36,null],[12,"border_radius","","",36,null],[12,"clip_mode","","",36,null],[3,"Shadow","","",null,null],[12,"offset","","",37,null],[12,"color","","",37,null],[12,"blur_radius","","",37,null],[3,"Gradient","","",null,null],[12,"start_point","","",38,null],[12,"end_point","","",38,null],[12,"extend_mode","","",38,null],[3,"GradientDisplayItem","","",null,null],[12,"gradient","","",39,null],[12,"tile_size","","",39,null],[12,"tile_spacing","","",39,null],[3,"GradientStop","","",null,null],[12,"offset","","",40,null],[12,"color","","",40,null],[3,"RadialGradient","","",null,null],[12,"start_center","","",41,null],[12,"start_radius","","",41,null],[12,"end_center","","",41,null],[12,"end_radius","","",41,null],[12,"ratio_xy","","",41,null],[12,"extend_mode","","",41,null],[3,"RadialGradientDisplayItem","","",null,null],[12,"gradient","","",42,null],[12,"tile_size","","",42,null],[12,"tile_spacing","","",42,null],[3,"PushStackingContextDisplayItem","","",null,null],[12,"stacking_context","","",43,null],[3,"StackingContext","","",null,null],[12,"scroll_policy","","",44,null],[12,"transform","","",44,null],[12,"transform_style","","",44,null],[12,"perspective","","",44,null],[12,"mix_blend_mode","","",44,null],[3,"IframeDisplayItem","","",null,null],[12,"pipeline_id","","",45,null],[3,"ImageDisplayItem","","",null,null],[12,"image_key","","",46,null],[12,"stretch_size","","",46,null],[12,"tile_spacing","","",46,null],[12,"image_rendering","","",46,null],[3,"YuvImageDisplayItem","","",null,null],[12,"yuv_data","","",47,null],[12,"color_space","","",47,null],[12,"image_rendering","","",47,null],[3,"ImageMask","","",null,null],[12,"image","","",48,null],[12,"rect","","",48,null],[12,"repeat","","",48,null],[3,"ComplexClipRegion","","",null,null],[12,"rect","","The boundaries of the rectangle.",49,null],[12,"radii","","Border radii of this rectangle.",49,null],[12,"mode","","Whether we are clipping inside or outside the region.",49,null],[3,"ItemRange","","",null,null],[3,"BuiltDisplayList","","A display list.",null,null],[3,"BuiltDisplayListDescriptor","","Describes the memory layout of a display list.",null,null],[3,"BuiltDisplayListIter","","",null,null],[3,"DisplayItemRef","","",null,null],[3,"AuxIter","","",null,null],[3,"SaveState","","",null,null],[3,"DisplayListBuilder","","",null,null],[12,"data","","",50,null],[12,"pipeline_id","","",50,null],[3,"NativeFontHandle","","",null,null],[12,"pathname","","",51,null],[12,"index","","",51,null],[3,"GlyphDimensions","","",null,null],[12,"left","","",52,null],[12,"top","","",52,null],[12,"width","","",52,null],[12,"height","","",52,null],[12,"advance","","",52,null],[3,"FontKey","","",null,null],[12,"0","","",53,null],[12,"1","","",53,null],[3,"FontVariation","","",null,null],[12,"tag","","",54,null],[12,"value","","",54,null],[3,"GlyphOptions","","",null,null],[12,"render_mode","","",55,null],[3,"FontInstanceOptions","","",null,null],[12,"render_mode","","",56,null],[12,"subpx_dir","","",56,null],[12,"synthetic_italics","","",56,null],[12,"bg_color","","When bg_color.a is != 0 and render_mode is FontRenderMode::Subpixel, the text will be rendered with bg_color.r/g/b as an opaque estimated background color.",56,null],[3,"FontInstancePlatformOptions","","",null,null],[12,"flags","","",57,null],[12,"lcd_filter","","",57,null],[12,"hinting","","",57,null],[3,"FontInstance","","",null,null],[12,"font_key","","",58,null],[12,"size","","",58,null],[12,"color","","",58,null],[12,"bg_color","","",58,null],[12,"render_mode","","",58,null],[12,"subpx_dir","","",58,null],[12,"platform_options","","",58,null],[12,"variations","","",58,null],[12,"synthetic_italics","","",58,null],[3,"FontInstanceKey","","",null,null],[12,"0","","",59,null],[12,"1","","",59,null],[3,"GlyphKey","","",null,null],[12,"index","","",60,null],[12,"subpixel_offset","","",60,null],[3,"GlyphInstance","","",null,null],[12,"index","","",61,null],[12,"point","","",61,null],[3,"ImageKey","","",null,null],[12,"0","","",62,null],[12,"1","","",62,null],[3,"ExternalImageId","","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image.",null,null],[12,"0","","",63,null],[3,"ExternalImageData","","",null,null],[12,"id","","",64,null],[12,"channel_index","","",64,null],[12,"image_type","","",64,null],[3,"ImageDescriptor","","",null,null],[12,"format","","",65,null],[12,"width","","",65,null],[12,"height","","",65,null],[12,"stride","","",65,null],[12,"offset","","",65,null],[12,"is_opaque","","",65,null],[3,"BlobImageDescriptor","","",null,null],[12,"width","","",66,null],[12,"height","","",66,null],[12,"offset","","",66,null],[12,"format","","",66,null],[3,"RasterizedBlobImage","","",null,null],[12,"width","","",67,null],[12,"height","","",67,null],[12,"data","","",67,null],[3,"BlobImageRequest","","",null,null],[12,"key","","",68,null],[12,"tile","","",68,null],[3,"DevicePixel","","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",null,null],[3,"LayerPixel","","Geometry in a layer's local coordinate space (logical pixels).",null,null],[3,"ScrollLayerPixel","","Geometry in a layer's scrollable parent coordinate space (logical pixels).",null,null],[3,"WorldPixel","","Geometry in the document's coordinate space (logical pixels).",null,null],[3,"Tiles","","Offset in number of tiles.",null,null],[4,"ResourceUpdate","","",null,null],[13,"AddImage","","",69,null],[13,"UpdateImage","","",69,null],[13,"DeleteImage","","",69,null],[13,"AddFont","","",69,null],[13,"DeleteFont","","",69,null],[13,"AddFontInstance","","",69,null],[13,"DeleteFontInstance","","",69,null],[4,"AddFont","","",null,null],[13,"Raw","","",70,null],[13,"Native","","",70,null],[4,"DocumentMsg","","",null,null],[13,"HitTest","","",71,null],[13,"SetDisplayList","","",71,null],[12,"list_descriptor","webrender_api::DocumentMsg","",71,null],[12,"epoch","","",71,null],[12,"pipeline_id","","",71,null],[12,"background","","",71,null],[12,"viewport_size","","",71,null],[12,"content_size","","",71,null],[12,"preserve_frame_state","","",71,null],[12,"resources","","",71,null],[13,"UpdatePipelineResources","webrender_api","",71,null],[12,"resources","webrender_api::DocumentMsg","",71,null],[12,"pipeline_id","","",71,null],[12,"epoch","","",71,null],[13,"SetPageZoom","webrender_api","",71,null],[13,"SetPinchZoom","","",71,null],[13,"SetPan","","",71,null],[13,"SetRootPipeline","","",71,null],[13,"RemovePipeline","","",71,null],[13,"EnableFrameOutput","","",71,null],[13,"SetWindowParameters","","",71,null],[12,"window_size","webrender_api::DocumentMsg","",71,null],[12,"inner_rect","","",71,null],[12,"device_pixel_ratio","","",71,null],[13,"Scroll","webrender_api","",71,null],[13,"ScrollNodeWithId","","",71,null],[13,"TickScrollingBounce","","",71,null],[13,"GetScrollNodeState","","",71,null],[13,"GenerateFrame","","",71,null],[4,"DebugCommand","","",null,null],[13,"EnableProfiler","","",72,null],[13,"EnableTextureCacheDebug","","",72,null],[13,"EnableRenderTargetDebug","","",72,null],[13,"EnableAlphaRectsDebug","","",72,null],[13,"FetchDocuments","","",72,null],[13,"FetchPasses","","",72,null],[13,"FetchClipScrollTree","","",72,null],[4,"ApiMsg","","",null,null],[13,"UpdateResources","","Add/remove/update images and fonts.",73,null],[13,"GetGlyphDimensions","","Gets the glyph dimensions",73,null],[13,"GetGlyphIndices","","Gets the glyph indices from a string",73,null],[13,"CloneApi","","Adds a new document namespace.",73,null],[13,"AddDocument","","Adds a new document with given initial size.",73,null],[13,"UpdateDocument","","A message targeted at a particular document.",73,null],[13,"DeleteDocument","","Deletes an existing document.",73,null],[13,"ExternalEvent","","An opaque handle that must be passed to the render notifier. It is used by Gecko to forward gecko-specific messages to the render thread preserving the ordering within the other messages.",73,null],[13,"ClearNamespace","","Removes all resources associated with a namespace.",73,null],[13,"MemoryPressure","","Flush from the caches anything that isn't necessary, to free some memory.",73,null],[13,"DebugCommand","","Change debugging options.",73,null],[13,"ShutDown","","",73,null],[4,"ScrollClamping","","",null,null],[13,"ToContentBounds","","",74,null],[13,"NoClamping","","",74,null],[4,"ScrollEventPhase","","",null,null],[13,"Start","","The user started scrolling.",75,null],[13,"Move","","The user performed a scroll. The Boolean flag indicates whether the user's fingers are down, if a touchpad is in use. (If false, the event is a touchpad fling.)",75,null],[13,"End","","The user ended scrolling.",75,null],[4,"ScrollLocation","","",null,null],[13,"Delta","","Scroll by a certain amount.",76,null],[13,"Start","","Scroll to very top of element.",76,null],[13,"End","","Scroll to very bottom of element.",76,null],[4,"PropertyBinding","","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from.",null,null],[13,"Value","","",77,null],[13,"Binding","","",77,null],[4,"SpecificDisplayItem","","",null,null],[13,"Clip","","",78,null],[13,"ScrollFrame","","",78,null],[13,"StickyFrame","","",78,null],[13,"Rectangle","","",78,null],[13,"ClearRectangle","","",78,null],[13,"Line","","",78,null],[13,"Text","","",78,null],[13,"Image","","",78,null],[13,"YuvImage","","",78,null],[13,"Border","","",78,null],[13,"BoxShadow","","",78,null],[13,"Gradient","","",78,null],[13,"RadialGradient","","",78,null],[13,"Iframe","","",78,null],[13,"PushStackingContext","","",78,null],[13,"PopStackingContext","","",78,null],[13,"SetGradientStops","","",78,null],[13,"PushShadow","","",78,null],[13,"PopAllShadows","","",78,null],[4,"ScrollSensitivity","","",null,null],[13,"ScriptAndInputEvents","","",79,null],[13,"Script","","",79,null],[4,"LineOrientation","","",null,null],[13,"Vertical","","",80,null],[13,"Horizontal","","",80,null],[4,"LineStyle","","",null,null],[13,"Solid","","",81,null],[13,"Dotted","","",81,null],[13,"Dashed","","",81,null],[13,"Wavy","","",81,null],[4,"RepeatMode","","",null,null],[13,"Stretch","","",82,null],[13,"Repeat","","",82,null],[13,"Round","","",82,null],[13,"Space","","",82,null],[4,"BorderDetails","","",null,null],[13,"Normal","","",83,null],[13,"Image","","",83,null],[13,"Gradient","","",83,null],[13,"RadialGradient","","",83,null],[4,"BorderRadiusKind","","",null,null],[13,"Uniform","","",84,null],[13,"NonUniform","","",84,null],[4,"BorderStyle","","",null,null],[13,"None","","",85,null],[13,"Solid","","",85,null],[13,"Double","","",85,null],[13,"Dotted","","",85,null],[13,"Dashed","","",85,null],[13,"Hidden","","",85,null],[13,"Groove","","",85,null],[13,"Ridge","","",85,null],[13,"Inset","","",85,null],[13,"Outset","","",85,null],[4,"BoxShadowClipMode","","",null,null],[13,"Outset","","",86,null],[13,"Inset","","",86,null],[4,"ExtendMode","","",null,null],[13,"Clamp","","",87,null],[13,"Repeat","","",87,null],[4,"ScrollPolicy","","",null,null],[13,"Scrollable","","",88,null],[13,"Fixed","","",88,null],[4,"TransformStyle","","",null,null],[13,"Flat","","",89,null],[13,"Preserve3D","","",89,null],[4,"MixBlendMode","","",null,null],[13,"Normal","","",90,null],[13,"Multiply","","",90,null],[13,"Screen","","",90,null],[13,"Overlay","","",90,null],[13,"Darken","","",90,null],[13,"Lighten","","",90,null],[13,"ColorDodge","","",90,null],[13,"ColorBurn","","",90,null],[13,"HardLight","","",90,null],[13,"SoftLight","","",90,null],[13,"Difference","","",90,null],[13,"Exclusion","","",90,null],[13,"Hue","","",90,null],[13,"Saturation","","",90,null],[13,"Color","","",90,null],[13,"Luminosity","","",90,null],[4,"FilterOp","","",null,null],[13,"Blur","","",91,null],[13,"Brightness","","",91,null],[13,"Contrast","","",91,null],[13,"Grayscale","","",91,null],[13,"HueRotate","","",91,null],[13,"Invert","","",91,null],[13,"Opacity","","",91,null],[13,"Saturate","","",91,null],[13,"Sepia","","",91,null],[4,"ImageRendering","","",null,null],[13,"Auto","","",92,null],[13,"CrispEdges","","",92,null],[13,"Pixelated","","",92,null],[4,"YuvColorSpace","","",null,null],[13,"Rec601","","",93,null],[13,"Rec709","","",93,null],[4,"YuvData","","",null,null],[13,"NV12","","",94,null],[13,"PlanarYCbCr","","",94,null],[13,"InterleavedYCbCr","","",94,null],[4,"YuvFormat","","",null,null],[13,"NV12","","",95,null],[13,"PlanarYCbCr","","",95,null],[13,"InterleavedYCbCr","","",95,null],[4,"LocalClip","","",null,null],[13,"Rect","","",96,null],[13,"RoundedRect","","",96,null],[4,"ClipMode","","",null,null],[13,"Clip","","",97,null],[13,"ClipOut","","",97,null],[4,"ClipId","","",null,null],[13,"Clip","","",98,null],[13,"ClipExternalId","","",98,null],[13,"DynamicallyAddedNode","","",98,null],[4,"FontTemplate","","",null,null],[13,"Raw","","",99,null],[13,"Native","","",99,null],[4,"FontRenderMode","","",null,null],[13,"Mono","","",100,null],[13,"Alpha","","",100,null],[13,"Subpixel","","",100,null],[13,"Bitmap","","",100,null],[4,"SubpixelDirection","","",null,null],[13,"None","","",101,null],[13,"Horizontal","","",101,null],[13,"Vertical","","",101,null],[4,"SubpixelOffset","","",null,null],[13,"Zero","","",102,null],[13,"Quarter","","",102,null],[13,"Half","","",102,null],[13,"ThreeQuarters","","",102,null],[4,"FontLCDFilter","","",null,null],[13,"None","","",103,null],[13,"Default","","",103,null],[13,"Light","","",103,null],[13,"Legacy","","",103,null],[4,"FontHinting","","",null,null],[13,"None","","",104,null],[13,"Mono","","",104,null],[13,"Light","","",104,null],[13,"Normal","","",104,null],[13,"LCD","","",104,null],[4,"ExternalImageType","","",null,null],[13,"Texture2DHandle","","",105,null],[13,"Texture2DArrayHandle","","",105,null],[13,"TextureRectHandle","","",105,null],[13,"TextureExternalHandle","","",105,null],[13,"ExternalBuffer","","",105,null],[4,"ImageFormat","","",null,null],[13,"Invalid","","",106,null],[13,"A8","","",106,null],[13,"RGB8","","",106,null],[13,"BGRA8","","",106,null],[13,"RGBAF32","","",106,null],[13,"RG8","","",106,null],[4,"ImageData","","",null,null],[13,"Raw","","",107,null],[13,"Blob","","",107,null],[13,"External","","",107,null],[4,"BlobImageError","","",null,null],[13,"Oom","","",108,null],[13,"InvalidKey","","",108,null],[13,"InvalidData","","",108,null],[13,"Other","","",108,null],[5,"device_length","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"deviceintlength"}}],[5,"as_scroll_parent_rect","","",null,{"inputs":[{"name":"layerrect"}],"output":{"name":"scrolllayerrect"}}],[5,"as_scroll_parent_vector","","",null,{"inputs":[{"name":"layervector2d"}],"output":{"name":"scrolllayervector2d"}}],[11,"hash","","",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"devicepixel"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"option"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"layerpixel"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"option"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerpixel"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"option"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"worldpixel"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"option"}}],[11,"hash","","",113,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"tiles"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdates"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdate"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"add_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"imagedescriptor"},{"name":"imagedata"},{"name":"option"}],"output":null}],[11,"update_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"imagedescriptor"},{"name":"imagedata"},{"name":"option"}],"output":null}],[11,"delete_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":null}],[11,"add_raw_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"vec"},{"name":"u32"}],"output":null}],[11,"add_native_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"nativefonthandle"}],"output":null}],[11,"delete_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":null}],[11,"add_font_instance","","",0,{"inputs":[{"name":"self"},{"name":"fontinstancekey"},{"name":"fontkey"},{"name":"au"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"delete_font_instance","","",0,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":null}],[11,"merge","","",0,{"inputs":[{"name":"self"},{"name":"resourceupdates"}],"output":null}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"addimage"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"updateimage"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"addfont"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hittestitem"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hittestresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"hittestresult"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"cmp","","",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"ordering"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FIND_ALL","","",114,null],[18,"POINT_RELATIVE_TO_PIPELINE_VIEWPORT","","",114,null],[11,"empty","","Returns an empty set of flags.",114,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"all","","Returns the set containing all flags.",114,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",114,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",114,{"inputs":[{"name":"u8"}],"output":{"name":"hittestflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitor_assign","","Adds the set of flags.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",114,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",114,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"extend","","",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",114,{"inputs":[{"name":"t"}],"output":{"name":"hittestflags"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"addfontinstance"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"documentmsg"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"debugcommand"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"apimsg"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"epoch"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"documentid"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"dummy","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"resourceid"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"externalevent"}}],[11,"from_raw","","",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unwrap","","Consumes self to make it obvious that the event should be forwarded only once.",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"scrollclamping"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"new","","",116,{"inputs":[{"name":"msgsender"},{"name":"payloadsender"}],"output":{"name":"self"}}],[11,"create_api","","Creates a new resource API object with a dedicated namespace.",116,{"inputs":[{"name":"self"}],"output":{"name":"renderapi"}}],[11,"get_namespace_id","","",117,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"clone_sender","","",117,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"add_document","","",117,{"inputs":[{"name":"self"},{"name":"deviceuintsize"}],"output":{"name":"documentid"}}],[11,"delete_document","","",117,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":null}],[11,"generate_font_key","","",117,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"generate_font_instance_key","","",117,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"get_glyph_dimensions","","Gets the dimensions for the supplied glyph keys",117,{"inputs":[{"name":"self"},{"name":"fontinstance"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_glyph_indices","","Gets the glyph indices for the supplied string. These can be used to construct GlyphKeys.",117,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"str"}],"output":{"name":"vec"}}],[11,"generate_image_key","","Creates an `ImageKey`.",117,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"update_resources","","Add/remove/update resources such as images and fonts.",117,{"inputs":[{"name":"self"},{"name":"resourceupdates"}],"output":null}],[11,"update_pipeline_resources","","Add/remove/update resources such as images and fonts.",117,{"inputs":[{"name":"self"},{"name":"resourceupdates"},{"name":"documentid"},{"name":"pipelineid"},{"name":"epoch"}],"output":null}],[11,"send_external_event","","",117,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"notify_memory_pressure","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"shut_down","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"generate_property_binding_key","","Create a new unique key that can be used for animated property bindings.",117,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"set_root_pipeline","","Sets the root pipeline.",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"}],"output":null}],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"}],"output":null}],[11,"set_display_list","","Supplies a new frame to WebRender.",117,null],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"scrolllocation"},{"name":"worldpoint"},{"name":"scrolleventphase"}],"output":null}],[11,"scroll_node_with_id","","",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"layoutpoint"},{"name":"clipid"},{"name":"scrollclamping"}],"output":null}],[11,"hit_test","","Does a hit test on display items in the specified document, at the given point. If a pipeline_id is specified, it is used to further restrict the hit results so that only items inside that pipeline are matched. If the HitTestFlags argument contains the FIND_ALL flag, then the vector of hit results will contain all display items that match, ordered from front to back.",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"option"},{"name":"worldpoint"},{"name":"hittestflags"}],"output":{"name":"hittestresult"}}],[11,"set_page_zoom","","",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"zoomfactor"}],"output":null}],[11,"set_pinch_zoom","","",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"zoomfactor"}],"output":null}],[11,"set_pan","","",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"deviceintpoint"}],"output":null}],[11,"set_window_parameters","","",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"deviceuintsize"},{"name":"deviceuintrect"},{"name":"f32"}],"output":null}],[11,"tick_scrolling_bounce_animations","","",117,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":null}],[11,"get_scroll_node_state","","",117,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"vec"}}],[11,"enable_frame_output","","Enable copying of the output of this pipeline id to an external texture for callers to consume.",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"},{"name":"bool"}],"output":null}],[11,"generate_frame","","Generate a new frame. Optionally, supply a list of animated property bindings that should be used to resolve bindings in the current display list.",117,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"option"}],"output":null}],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"scrolleventphase"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerstate"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"scrolllocation"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"zoomfactor"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new zoom factor.",118,{"inputs":[{"name":"f32"}],"output":{"name":"zoomfactor"}}],[11,"get","","Get the zoom factor as an untyped float.",118,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingid"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"hash","","",119,null],[11,"new","","",119,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"with","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"propertyvalue"}}],[11,"new","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"propertybinding"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"from","","",77,{"inputs":[{"name":"t"}],"output":{"name":"propertybinding"}}],[11,"from","","",77,{"inputs":[{"name":"propertybindingkey"}],"output":{"name":"propertybinding"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"propertyvalue"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"dynamicproperties"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"colorf"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `ColorF` from its components.",15,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"scale_rgb","","Multiply the RGB channels (but not alpha) with a given factor.",15,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"to_array","","",15,null],[11,"premultiplied","","Multiply the RGB components with the alpha channel.",15,{"inputs":[{"name":"self"}],"output":{"name":"colorf"}}],[11,"hash","","",15,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"coloru"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new additive `ColorU` from its components.",16,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"coloru"}}],[11,"from","","",16,{"inputs":[{"name":"colorf"}],"output":{"name":"coloru"}}],[11,"from","","",15,{"inputs":[{"name":"coloru"}],"output":{"name":"colorf"}}],[0,"channel","","",null,null],[3,"Payload","webrender_api::channel","",null,null],[12,"epoch","","An epoch used to get the proper payload for a pipeline id frame request.",120,null],[12,"pipeline_id","","A pipeline id to key the payload with, along with the epoch.",120,null],[12,"display_list_data","","",120,null],[3,"MsgReceiver","","",null,null],[3,"MsgSender","","",null,null],[5,"payload_channel","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"msg_channel","","",null,{"inputs":[],"output":{"name":"result"}}],[6,"PayloadSender","","",null,null],[6,"PayloadReceiver","","",null,null],[8,"PayloadSenderHelperMethods","","A helper to handle the interface difference between `IpcBytesSender` and `Sender<Vec<u8>>`.",null,null],[10,"send_payload","","",121,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"name":"result"}}],[8,"PayloadReceiverHelperMethods","","",null,null],[10,"recv_payload","","",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"payload"}}],[11,"to_data","","Convert the payload to a raw byte vector, in order for it to be efficiently shared via shmem, for example.",120,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_data","","Deserializes the given payload from a raw byte vector.",120,null],[11,"send_payload","","",123,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"name":"result"}}],[11,"recv_payload","","",124,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv","","",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"msgsender"}}],[11,"send","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize","","",125,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",126,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",125,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",126,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","webrender_api","",17,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"simple","","",17,{"inputs":[{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"new","","",17,{"inputs":[{"name":"clipid"},{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"clip_node_id","","",17,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"displayitem"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"displayitem"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"displayitem"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"primitiveinfo"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"clipdisplayitem"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stickyoffsetbounds"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"new","","",21,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"stickyoffsetbounds"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"stickyframedisplayitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"scrollsensitivity"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"scrollsensitivity"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"scrollframedisplayitem"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"rectangledisplayitem"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"linedisplayitem"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"lineorientation"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"lineorientation"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"linestyle"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"linestyle"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"textdisplayitem"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"normalborder"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"repeatmode"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"repeatmode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ninepatchdescriptor"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"imageborder"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"gradientborder"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientborder"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"borderdetails"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borderdisplayitem"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"borderradiuskind"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"borderradiuskind"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"borderradius"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"borderwidths"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"borderside"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"borderstyle"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowclipmode"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"boxshadowclipmode"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowdisplayitem"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"shadow"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"extendmode"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"gradientdisplayitem"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gradientstop"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"radialgradient"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientdisplayitem"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pushstackingcontextdisplayitem"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"stackingcontext"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"scrollpolicy"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"scrollpolicy"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"transformstyle"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"transformstyle"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"mixblendmode"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"mixblendmode"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"iframedisplayitem"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"imagedisplayitem"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"imagerendering"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"imagerendering"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"yuvimagedisplayitem"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"yuvcolorspace"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"yuvcolorspace"}],"output":{"name":"bool"}}],[11,"get_feature_string","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"yuvdata"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"get_format","","",94,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"yuvformat"}],"output":{"name":"bool"}}],[11,"get_plane_num","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_feature_string","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"imagemask"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"from","","",96,{"inputs":[{"name":"layoutrect"}],"output":{"name":"self"}}],[11,"clip_rect","","",96,{"inputs":[{"name":"self"}],"output":{"name":"layoutrect"}}],[11,"create_with_offset","","",96,{"inputs":[{"name":"self"},{"name":"layoutvector2d"}],"output":{"name":"localclip"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"clipmode"}],"output":{"name":"bool"}}],[11,"not","","",97,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"complexclipregion"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"zero","","",33,{"inputs":[],"output":{"name":"borderradius"}}],[11,"uniform","","",33,{"inputs":[{"name":"f32"}],"output":{"name":"borderradius"}}],[11,"uniform_size","","",33,{"inputs":[{"name":"layoutsize"}],"output":{"name":"borderradius"}}],[11,"is_uniform","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_uniform_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_zero","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new complex clip region.",49,{"inputs":[{"name":"layoutrect"},{"name":"borderradius"},{"name":"clipmode"}],"output":{"name":"complexclipregion"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"root_scroll_node","","",98,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"root_reference_frame","","",98,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"new","","",98,{"inputs":[{"name":"u64"},{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"pipeline_id","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"external_id","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_root_scroll_node","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"builtdisplaylist"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"auxiter"}}],[11,"from_data","","",128,{"inputs":[{"name":"vec"},{"name":"builtdisplaylistdescriptor"}],"output":{"name":"builtdisplaylist"}}],[11,"into_data","","",128,null],[11,"data","","",128,null],[11,"item_slice","","",128,null],[11,"descriptor","","",128,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"times","","",128,null],[11,"iter","","",128,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"get","","",128,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"auxiter"}}],[11,"new","","",131,{"inputs":[{"name":"builtdisplaylist"}],"output":{"name":"self"}}],[11,"new_with_list_and_data","","",131,null],[11,"display_list","","",131,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",131,{"inputs":[{"name":"self"}],"output":{"name":"displayitemref"}}],[11,"starting_stacking_context","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"skip_current_stacking_context","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"current_stacking_context_empty","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"display_item","","",132,{"inputs":[{"name":"self"}],"output":{"name":"displayitem"}}],[11,"rect","","",132,{"inputs":[{"name":"self"}],"output":{"name":"layoutrect"}}],[11,"get_layer_primitive_info","","",132,{"inputs":[{"name":"self"},{"name":"layoutvector2d"}],"output":{"name":"layerprimitiveinfo"}}],[11,"local_clip","","",132,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"clip_and_scroll","","",132,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"item","","",132,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"complex_clip","","",132,null],[11,"gradient_stops","","",132,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"glyphs","","",132,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"filters","","",132,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"display_list","","",132,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"is_backface_visible","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub_iter","","",132,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"new","","",130,null],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"serialize","","",128,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",132,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"savestate"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"displaylistbuilder"}}],[11,"new","","",50,{"inputs":[{"name":"pipelineid"},{"name":"layoutsize"}],"output":{"name":"displaylistbuilder"}}],[11,"with_capacity","","",50,{"inputs":[{"name":"pipelineid"},{"name":"layoutsize"},{"name":"usize"}],"output":{"name":"displaylistbuilder"}}],[11,"save","","Saves the current display list state, so it may be `restore()`'d.",50,{"inputs":[{"name":"self"}],"output":null}],[11,"restore","","Restores the state of the builder to when `save()` was last called.",50,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_save","","Discards the builder's save (indicating the attempted operation was sucessful).",50,{"inputs":[{"name":"self"}],"output":null}],[11,"print_display_list","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"push_rect","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"colorf"}],"output":null}],[11,"push_clear_rect","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"}],"output":null}],[11,"push_line","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"f32"},{"name":"lineorientation"},{"name":"colorf"},{"name":"linestyle"}],"output":null}],[11,"push_image","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"layoutsize"},{"name":"layoutsize"},{"name":"imagerendering"},{"name":"imagekey"}],"output":null}],[11,"push_yuv_image","","Push a yuv image. All planar data in yuv image should use the same buffer type.",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"yuvdata"},{"name":"yuvcolorspace"},{"name":"imagerendering"}],"output":null}],[11,"push_text","","",50,null],[11,"create_gradient","","",50,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"layoutpoint"},{"name":"vec"},{"name":"extendmode"}],"output":{"name":"gradient"}}],[11,"create_radial_gradient","","",50,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"layoutsize"},{"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"create_complex_radial_gradient","","",50,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"f32"},{"name":"layoutpoint"},{"name":"f32"},{"name":"f32"},{"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"push_border","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"borderwidths"},{"name":"borderdetails"}],"output":null}],[11,"push_box_shadow","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"layoutrect"},{"name":"layoutvector2d"},{"name":"colorf"},{"name":"f32"},{"name":"f32"},{"name":"borderradius"},{"name":"boxshadowclipmode"}],"output":null}],[11,"push_gradient","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"gradient"},{"name":"layoutsize"},{"name":"layoutsize"}],"output":null}],[11,"push_radial_gradient","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"radialgradient"},{"name":"layoutsize"},{"name":"layoutsize"}],"output":null}],[11,"push_stacking_context","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"scrollpolicy"},{"name":"option"},{"name":"transformstyle"},{"name":"option"},{"name":"mixblendmode"},{"name":"vec"}],"output":null}],[11,"pop_stacking_context","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"push_stops","","",50,null],[11,"define_scroll_frame","","",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"layoutrect"},{"name":"layoutrect"},{"name":"i"},{"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_scroll_frame_with_parent","","",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"clipid"},{"name":"layoutrect"},{"name":"layoutrect"},{"name":"i"},{"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_clip","","",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"layoutrect"},{"name":"i"},{"name":"option"}],"output":{"name":"clipid"}}],[11,"define_clip_with_parent","","",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"clipid"},{"name":"layoutrect"},{"name":"i"},{"name":"option"}],"output":{"name":"clipid"}}],[11,"define_sticky_frame","","",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"layoutrect"},{"name":"sideoffsets2d"},{"name":"stickyoffsetbounds"},{"name":"stickyoffsetbounds"},{"name":"layoutvector2d"}],"output":{"name":"clipid"}}],[11,"push_clip_id","","",50,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":null}],[11,"push_clip_and_scroll_info","","",50,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":null}],[11,"pop_clip_id","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"push_iframe","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"pipelineid"}],"output":null}],[11,"push_shadow","","",50,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"shadow"}],"output":null}],[11,"pop_all_shadows","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"nativefonthandle"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"glyphdimensions"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"new","","",53,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontkey"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"fonttemplate"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"fontrendermode"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"subpixeldirection"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"option"}}],[11,"limit_by","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"fontrendermode"}}],[11,"limit_by","","",101,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"subpixeldirection"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"subpixeloffset"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"ordering"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"option"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fontvariation"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"ordering"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"hash","","",54,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"glyphoptions"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"ordering"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceoptions"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"ordering"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"fontinstanceoptions"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"fontlcdfilter"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"ordering"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"fonthinting"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"option"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"ordering"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceplatformoptions"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"ordering"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"fontinstanceplatformoptions"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fontinstance"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"fontinstance"}],"output":{"name":"bool"}}],[11,"new","","",58,{"inputs":[{"name":"fontkey"},{"name":"au"},{"name":"colorf"},{"name":"coloru"},{"name":"fontrendermode"},{"name":"subpixeldirection"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"fontinstance"}}],[11,"get_subpx_offset","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"new","","",59,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontinstancekey"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"glyphkey"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"new","","",60,{"inputs":[{"name":"u32"},{"name":"layoutpoint"},{"name":"fontrendermode"},{"name":"subpixeldirection"}],"output":{"name":"glyphkey"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"glyphinstance"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"new","","",62,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"imagekey"}}],[11,"dummy","","",62,{"inputs":[],"output":{"name":"imagekey"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"externalimageid"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"externalimagetype"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"externalimagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"externalimagedata"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"bytes_per_pixel","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"imagedescriptor"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"new","","",65,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"imageformat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"compute_stride","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[{"name":"vec"}],"output":{"name":"imagedata"}}],[11,"new_shared","","",107,{"inputs":[{"name":"arc"}],"output":{"name":"imagedata"}}],[11,"new_blob_image","","",107,{"inputs":[{"name":"vec"}],"output":{"name":"imagedata"}}],[11,"is_blob","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"uses_texture_cache","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"blobimagedescriptor"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"blobimageerror"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"blobimagerequest"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[6,"TileSize","","",null,null],[6,"PipelineSourceId","","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision.",null,null],[6,"ItemTag","","A tag that can be used to identify items during hit testing. If the tag is missing then the item doesn't take part in hit testing at all. This is composed of two numbers. In Servo, the first is an identifier while the second is used to select the cursor that should be used during mouse movement.",null,null],[6,"LayoutPrimitiveInfo","","",null,null],[6,"LayerPrimitiveInfo","","",null,null],[6,"GlyphIndex","","",null,null],[6,"BlobImageData","","",null,null],[6,"BlobImageResult","","",null,null],[6,"DeviceIntRect","","",null,null],[6,"DeviceIntPoint","","",null,null],[6,"DeviceIntSize","","",null,null],[6,"DeviceIntLength","","",null,null],[6,"DeviceUintRect","","",null,null],[6,"DeviceUintPoint","","",null,null],[6,"DeviceUintSize","","",null,null],[6,"DeviceRect","","",null,null],[6,"DevicePoint","","",null,null],[6,"DeviceVector2D","","",null,null],[6,"DeviceSize","","",null,null],[6,"LayoutPixel","","Geometry in a stacking context's local coordinate space (logical pixels).",null,null],[6,"LayoutRect","","",null,null],[6,"LayoutPoint","","",null,null],[6,"LayoutVector2D","","",null,null],[6,"LayoutVector3D","","",null,null],[6,"LayoutSize","","",null,null],[6,"LayerRect","","",null,null],[6,"LayerPoint","","",null,null],[6,"LayerPoint3D","","",null,null],[6,"LayerVector2D","","",null,null],[6,"LayerVector3D","","",null,null],[6,"LayerSize","","",null,null],[6,"ScrollLayerRect","","",null,null],[6,"ScrollLayerPoint","","",null,null],[6,"ScrollLayerVector2D","","",null,null],[6,"ScrollLayerSize","","",null,null],[6,"WorldRect","","",null,null],[6,"WorldPoint","","",null,null],[6,"WorldSize","","",null,null],[6,"WorldPoint3D","","",null,null],[6,"WorldVector2D","","",null,null],[6,"WorldVector3D","","",null,null],[6,"TileOffset","","",null,null],[6,"LayoutTransform","","",null,null],[6,"LayerTransform","","",null,null],[6,"LayerToScrollTransform","","",null,null],[6,"ScrollToLayerTransform","","",null,null],[6,"LayerToWorldTransform","","",null,null],[6,"WorldToLayerTransform","","",null,null],[6,"ScrollToWorldTransform","","",null,null],[17,"YUV_COLOR_SPACES","","",null,null],[17,"YUV_FORMATS","","",null,null],[17,"MAX_TEXT_RUN_LENGTH","","",null,null],[17,"FONT_FORCE_AUTOHINT","","",null,null],[17,"FONT_NO_AUTOHINT","","",null,null],[17,"FONT_EMBEDDED_BITMAP","","",null,null],[17,"FONT_EMBOLDEN","","",null,null],[17,"FONT_VERTICAL_LAYOUT","","",null,null],[17,"FONT_SUBPIXEL_BGR","","",null,null],[8,"RenderNotifier","","",null,null],[10,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"new_frame_ready","","",134,{"inputs":[{"name":"self"}],"output":null}],[10,"new_scroll_frame_ready","","",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"external_event","","",134,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"shut_down","","",134,{"inputs":[{"name":"self"}],"output":null}],[8,"ToBits","","",null,null],[10,"_to_bits","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"BlobImageResources","","",null,null],[10,"get_font_data","","",136,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"fonttemplate"}}],[10,"get_image","","",136,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"option"}}],[8,"BlobImageRenderer","","",null,null],[10,"add","","",137,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"blobimagedata"},{"name":"option"}],"output":null}],[10,"update","","",137,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"blobimagedata"},{"name":"option"}],"output":null}],[10,"delete","","",137,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":null}],[10,"request","","",137,{"inputs":[{"name":"self"},{"name":"blobimageresources"},{"name":"blobimagerequest"},{"name":"blobimagedescriptor"},{"name":"option"}],"output":null}],[10,"resolve","","",137,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"blobimageresult"}}],[10,"delete_font","","",137,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":null}],[10,"delete_font_instance","","",137,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":null}],[11,"external_event","","",134,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"shut_down","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",138,{"inputs":[{"name":"typedrect"}],"output":{"name":"self"}}],[11,"with_clip_rect","","",138,{"inputs":[{"name":"typedrect"},{"name":"typedrect"}],"output":{"name":"self"}}],[11,"with_clip","","",138,{"inputs":[{"name":"typedrect"},{"name":"localclip"}],"output":{"name":"self"}}]],"paths":[[3,"ResourceUpdates"],[3,"AddImage"],[3,"UpdateImage"],[3,"HitTestItem"],[3,"HitTestResult"],[3,"AddFontInstance"],[3,"Epoch"],[3,"IdNamespace"],[3,"DocumentId"],[3,"PipelineId"],[3,"ResourceId"],[3,"ScrollLayerState"],[3,"PropertyBindingKey"],[3,"PropertyValue"],[3,"DynamicProperties"],[3,"ColorF"],[3,"ColorU"],[3,"ClipAndScrollInfo"],[3,"DisplayItem"],[3,"PrimitiveInfo"],[3,"ClipDisplayItem"],[3,"StickyOffsetBounds"],[3,"StickyFrameDisplayItem"],[3,"ScrollFrameDisplayItem"],[3,"RectangleDisplayItem"],[3,"LineDisplayItem"],[3,"TextDisplayItem"],[3,"NormalBorder"],[3,"NinePatchDescriptor"],[3,"ImageBorder"],[3,"GradientBorder"],[3,"RadialGradientBorder"],[3,"BorderDisplayItem"],[3,"BorderRadius"],[3,"BorderWidths"],[3,"BorderSide"],[3,"BoxShadowDisplayItem"],[3,"Shadow"],[3,"Gradient"],[3,"GradientDisplayItem"],[3,"GradientStop"],[3,"RadialGradient"],[3,"RadialGradientDisplayItem"],[3,"PushStackingContextDisplayItem"],[3,"StackingContext"],[3,"IframeDisplayItem"],[3,"ImageDisplayItem"],[3,"YuvImageDisplayItem"],[3,"ImageMask"],[3,"ComplexClipRegion"],[3,"DisplayListBuilder"],[3,"NativeFontHandle"],[3,"GlyphDimensions"],[3,"FontKey"],[3,"FontVariation"],[3,"GlyphOptions"],[3,"FontInstanceOptions"],[3,"FontInstancePlatformOptions"],[3,"FontInstance"],[3,"FontInstanceKey"],[3,"GlyphKey"],[3,"GlyphInstance"],[3,"ImageKey"],[3,"ExternalImageId"],[3,"ExternalImageData"],[3,"ImageDescriptor"],[3,"BlobImageDescriptor"],[3,"RasterizedBlobImage"],[3,"BlobImageRequest"],[4,"ResourceUpdate"],[4,"AddFont"],[4,"DocumentMsg"],[4,"DebugCommand"],[4,"ApiMsg"],[4,"ScrollClamping"],[4,"ScrollEventPhase"],[4,"ScrollLocation"],[4,"PropertyBinding"],[4,"SpecificDisplayItem"],[4,"ScrollSensitivity"],[4,"LineOrientation"],[4,"LineStyle"],[4,"RepeatMode"],[4,"BorderDetails"],[4,"BorderRadiusKind"],[4,"BorderStyle"],[4,"BoxShadowClipMode"],[4,"ExtendMode"],[4,"ScrollPolicy"],[4,"TransformStyle"],[4,"MixBlendMode"],[4,"FilterOp"],[4,"ImageRendering"],[4,"YuvColorSpace"],[4,"YuvData"],[4,"YuvFormat"],[4,"LocalClip"],[4,"ClipMode"],[4,"ClipId"],[4,"FontTemplate"],[4,"FontRenderMode"],[4,"SubpixelDirection"],[4,"SubpixelOffset"],[4,"FontLCDFilter"],[4,"FontHinting"],[4,"ExternalImageType"],[4,"ImageFormat"],[4,"ImageData"],[4,"BlobImageError"],[3,"DevicePixel"],[3,"LayerPixel"],[3,"ScrollLayerPixel"],[3,"WorldPixel"],[3,"Tiles"],[3,"HitTestFlags"],[3,"ExternalEvent"],[3,"RenderApiSender"],[3,"RenderApi"],[3,"ZoomFactor"],[3,"PropertyBindingId"],[3,"Payload"],[8,"PayloadSenderHelperMethods"],[8,"PayloadReceiverHelperMethods"],[6,"PayloadSender"],[6,"PayloadReceiver"],[3,"MsgReceiver"],[3,"MsgSender"],[3,"ItemRange"],[3,"BuiltDisplayList"],[3,"BuiltDisplayListDescriptor"],[3,"AuxIter"],[3,"BuiltDisplayListIter"],[3,"DisplayItemRef"],[3,"SaveState"],[8,"RenderNotifier"],[8,"ToBits"],[8,"BlobImageResources"],[8,"BlobImageRenderer"],[6,"LayerPrimitiveInfo"]]};
searchIndex["xdg"] = {"doc":"","items":[[3,"BaseDirectories","xdg","BaseDirectories allows to look up paths to configuration, data, cache and runtime files in well-known locations according to the [X Desktop Group Base Directory specification][xdg-basedir]. [xdg-basedir]: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html",null,null],[3,"BaseDirectoriesError","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"basedirectories"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Reads the process environment, determines the XDG base directories, and returns a value that can be used for lookup. The following environment variables are examined:",0,{"inputs":[],"output":{"name":"result"}}],[11,"with_prefix","","Same as `new()`, but `prefix` is implicitly prepended to every path that is looked up.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"with_profile","","Same as `with_prefix()`, with `profile` also implicitly prepended to every path that is looked up, but only for user-specific directories.",0,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[11,"has_runtime_directory","","Returns `true` if `XDG_RUNTIME_DIR` is available, `false` otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"place_config_file","","Given a relative path `path`, returns an absolute path in `XDG_CONFIG_HOME` where a configuration file may be stored. Leading directories in the returned path are pre-created; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_data_file","","Like `place_config_file()`, but for a data file in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_cache_file","","Like `place_config_file()`, but for a cache file in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_runtime_file","","Like `place_config_file()`, but for a runtime file in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"find_config_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CONFIG_HOME` and then `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_data_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_DATA_HOME` and then `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_cache_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_runtime_file","","Given a relative path `path`, returns an absolute path to an existing runtime file, or `None`. Searches `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns `None`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"create_config_directory","","Given a relative path `path`, returns an absolute path to a configuration directory in `XDG_CONFIG_HOME`. The directory and all directories leading to it are created if they did not exist; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_data_directory","","Like `create_config_directory()`, but for a data directory in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_cache_directory","","Like `create_config_directory()`, but for a cache directory in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_runtime_directory","","Like `create_config_directory()`, but for a runtime directory in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"list_config_files","","Given a relative path `path`, list absolute paths to all files in directories with path `path` in `XDG_CONFIG_HOME` and `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_config_files_once","","Like `list_config_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_data_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_DATA_HOME` and `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_data_files_once","","Like `list_data_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_cache_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_runtime_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an empty `Vec`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"get_data_home","","Returns the user-specific data directory (set by `XDG_DATA_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_config_home","","Returns the user-specific configuration directory (set by `XDG_CONFIG_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_cache_home","","Returns the user-specific directory for non-essential (cached) data (set by `XDG_CACHE_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_data_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary data directories, ordered by preference (set by `XDG_DATA_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_config_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary configuration directories (set by `XDG_CONFIG_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"BaseDirectories"],[3,"BaseDirectoriesError"]]};
initSearch(searchIndex);

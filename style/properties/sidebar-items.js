initSidebarItems({"constant":[["ABSPOS_CB","This property has values that can establish a containing block for absolutely positioned elements."],["APPLIES_TO_FIRST_LETTER","This longhand property applies to ::first-letter."],["APPLIES_TO_FIRST_LINE","This longhand property applies to ::first-line."],["APPLIES_TO_PLACEHOLDER","This longhand property applies to ::placeholder."],["CREATES_STACKING_CONTEXT","This property requires a stacking context."],["FIXPOS_CB","This property has values that can establish a containing block for fixed positioned and absolutely positioned elements."],["INHERIT_ALL","Whether to inherit all styles from the parent. If this flag is not present, non-inherited styles are reset to their initial values."],["IS_FIELDSET_CONTENT","Whether we're styling the ::-moz-fieldset-content anonymous box."],["IS_LINK","Whether we're computing the style of a link, either visited or unvisited."],["IS_ROOT_ELEMENT","Whether the given element we're styling is the document element, that is, matches :root."],["IS_VISITED_LINK","Whether we're computing the style of a link element that happens to be visited."],["PROHIBIT_DISPLAY_CONTENTS","Whether to convert display:contents into display:inline.  This is used by Gecko to prevent display:contents on generated content."],["SHORTHAND_ALIAS_PROPERTY","This shorthand property is an alias of another property."],["SKIP_ROOT_AND_ITEM_BASED_DISPLAY_FIXUP","Whether to skip any display style fixup for root element, flex/grid item, and ruby descendants."],["VISITED_DEPENDENT_ONLY","Whether to only cascade properties that are visited dependent."]],"enum":[["AliasId","An identifier for a given alias property."],["CSSWideKeyword","An enum to represent a CSS Wide keyword."],["DeclaredValue","Servo's representation of a declared value for a given `T`, which is the declared value for that property."],["DeclaredValueOwned","A variant of DeclaredValue that owns its data. This separation exists so that PropertyDeclaration can avoid embedding a DeclaredValue (and its extra discriminant word) and synthesize dependent DeclaredValues for PropertyDeclaration instances as needed."],["LonghandId","An identifier for a given longhand property."],["PropertyDeclaration","Servo's representation for a property declaration."],["PropertyDeclarationId","An identifier for a given property declaration, which can be either a longhand or a custom property."],["PropertyId","Servo's representation of a CSS property, that is, either a longhand, a shorthand, or a custom property."],["ShorthandId","An identifier for a given shorthand property."],["StyleStructRef","A reference to a style struct of the parent, or our own style struct."]],"fn":[["adjust_border_width","See StyleAdjuster::adjust_for_border_width."],["apply_declarations","NOTE: This function expects the declaration with more priority to appear first."],["cascade","Performs the CSS cascade, computing new styles for an element from its parent style."],["default_font_size_keyword","Default value for FontComputationData"],["get_writing_mode","Return a WritingMode bitflags from the relevant CSS properties."],["modify_border_style_for_inline_sides","Adjusts borders as appropriate to account for a fragment's status as the first or last fragment within the range of an element."]],"mod":[["animated_properties","A module with all the code related to animated properties."],["computed_value_flags","Misc information about a given computed style."],["declaration_block","A property declaration block."],["longhands","A module with all the code for longhand properties."],["shorthands","A module with code for all the shorthand css properties, and a few serialization helpers."],["style_structs","The module where all the style structs are defined."]],"struct":[["AnimationDelayIter","An iterator over the values of the animation-delay properties."],["AnimationDirectionIter","An iterator over the values of the animation-direction properties."],["AnimationDurationIter","An iterator over the values of the animation-duration properties."],["AnimationFillModeIter","An iterator over the values of the animation-fill-mode properties."],["AnimationIterationCountIter","An iterator over the values of the animation-iteration-count properties."],["AnimationNameIter","An iterator over the values of the animation-name properties."],["AnimationPlayStateIter","An iterator over the values of the animation-play-state properties."],["AnimationTimingFunctionIter","An iterator over the values of the animation-timing-function properties."],["BuilderArc",""],["CascadeFlags","A set of flags to tweak the behavior of the `cascade` function."],["ComputedValues","The struct that Servo uses to represent computed values."],["ComputedValuesInner","Actual data of ComputedValues, to match up with Gecko"],["INITIAL_SERVO_VALUES",""],["LonghandIdSet","A set of longhand properties"],["NonCustomPropertyId","A longhand or shorthand porperty"],["NonCustomPropertyIdSet","A set of all properties"],["PropertyDeclarationIdSet","A specialized set of PropertyDeclarationId"],["PropertyFlags","A set of flags for properties."],["PropertyParserContext","Parsing Context for PropertyId."],["SourcePropertyDeclaration","A stack-allocated vector of `PropertyDeclaration` large enough to parse one CSS `key: value` declaration. (Shorthands expand to multiple `PropertyDeclaration`s.)"],["SourcePropertyDeclarationDrain","Return type of SourcePropertyDeclaration::drain"],["StyleBuilder","A type used to compute a struct with minimal overhead."],["TransitionDelayIter","An iterator over the values of the transition-delay properties."],["TransitionDurationIter","An iterator over the values of the transition-duration properties."],["TransitionPropertyIter","An iterator over the values of the transition-property properties."],["TransitionTimingFunctionIter","An iterator over the values of the transition-timing-function properties."],["UnparsedValue","An unparsed property value that contains `var()` functions."]],"trait":[["MaybeBoxed","Conversion with fewer impls than From/Into"]],"type":[["CascadePropertyFn","A per-longhand function that performs the CSS cascade for that longhand."],["FontComputationData","This is where we store extra font data while while computing font sizes."]]});
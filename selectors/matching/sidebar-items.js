initSidebarItems({"constant":[["HAS_EDGE_CHILD_SELECTOR","When a child is added or removed from the parent, the first and last children must be restyled, because they may match :first-child, :last-child, or :only-child."],["HAS_EMPTY_SELECTOR","The element has an empty selector, so when a child is appended we might need to restyle the parent completely."],["HAS_SLOW_SELECTOR","When a child is added or removed from the parent, all the children must be restyled, because they may match :nth-last-child, :last-of-type, :nth-last-of-type, or :only-of-type."],["HAS_SLOW_SELECTOR_LATER_SIBLINGS","When a child is added or removed from the parent, any later children must be restyled, because they may match :nth-child, :first-of-type, or :nth-of-type."]],"enum":[["CompoundSelectorMatchingResult","Whether a compound selector matched, and whether it was the rightmost selector inside the complex selector."],["RelevantLinkStatus","Tracks whether we are currently looking for relevant links for a given complex selector. A \"relevant link\" is the element being matched if it is a link or the nearest ancestor link."]],"fn":[["matches_complex_selector","Matches a complex selector."],["matches_compound_selector","Matches a compound selector belonging to `selector`, starting at offset `from_offset`, matching left to right."],["matches_selector","Matches a selector, fast-rejecting against a bloom filter."],["matches_selector_list",""]],"static":[["RECOMMENDED_SELECTOR_BLOOM_FILTER_SIZE",""]],"struct":[["ElementSelectorFlags","Set of flags that are set on either the element or its parent (depending on the flag) if the element could potentially match a selector."],["LocalMatchingContext","Holds per-selector data alongside a pointer to MatchingContext."]]});